
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00200000 <_vectors>:
  200000:	20000400 	.word	0x20000400
  200004:	002002d9 	.word	0x002002d9
  200008:	002002db 	.word	0x002002db
  20000c:	002002db 	.word	0x002002db
  200010:	002002db 	.word	0x002002db
  200014:	002002db 	.word	0x002002db
  200018:	002002db 	.word	0x002002db
  20001c:	002002db 	.word	0x002002db
  200020:	002002db 	.word	0x002002db
  200024:	002002db 	.word	0x002002db
  200028:	002002db 	.word	0x002002db
  20002c:	00202d51 	.word	0x00202d51
  200030:	002002db 	.word	0x002002db
  200034:	002002db 	.word	0x002002db
  200038:	002002db 	.word	0x002002db
  20003c:	002002db 	.word	0x002002db
  200040:	002002db 	.word	0x002002db
  200044:	002002db 	.word	0x002002db
  200048:	002002db 	.word	0x002002db
  20004c:	002002db 	.word	0x002002db
  200050:	002002db 	.word	0x002002db
  200054:	002002db 	.word	0x002002db
  200058:	002002db 	.word	0x002002db
  20005c:	002002db 	.word	0x002002db
  200060:	002002db 	.word	0x002002db
  200064:	002002db 	.word	0x002002db
  200068:	002002db 	.word	0x002002db
  20006c:	002035d1 	.word	0x002035d1
  200070:	002035a1 	.word	0x002035a1
  200074:	00203571 	.word	0x00203571
  200078:	00203541 	.word	0x00203541
  20007c:	00203511 	.word	0x00203511
  200080:	002034e1 	.word	0x002034e1
  200084:	002034b1 	.word	0x002034b1
  200088:	002002db 	.word	0x002002db
  20008c:	00203761 	.word	0x00203761
  200090:	00203741 	.word	0x00203741
  200094:	00203721 	.word	0x00203721
  200098:	00203701 	.word	0x00203701
  20009c:	002002db 	.word	0x002002db
  2000a0:	002031c1 	.word	0x002031c1
  2000a4:	00203231 	.word	0x00203231
  2000a8:	002002db 	.word	0x002002db
  2000ac:	00203251 	.word	0x00203251
  2000b0:	00203261 	.word	0x00203261
  2000b4:	00203211 	.word	0x00203211
  2000b8:	002002db 	.word	0x002002db
  2000bc:	002002db 	.word	0x002002db
  2000c0:	002002db 	.word	0x002002db
  2000c4:	002002db 	.word	0x002002db
  2000c8:	002002db 	.word	0x002002db
  2000cc:	002002db 	.word	0x002002db
  2000d0:	002002db 	.word	0x002002db
  2000d4:	002002db 	.word	0x002002db
  2000d8:	002002db 	.word	0x002002db
  2000dc:	002031a1 	.word	0x002031a1
  2000e0:	002002db 	.word	0x002002db
  2000e4:	002002db 	.word	0x002002db
  2000e8:	002002db 	.word	0x002002db
  2000ec:	002002db 	.word	0x002002db
  2000f0:	002031e1 	.word	0x002031e1
  2000f4:	002002db 	.word	0x002002db
  2000f8:	00203201 	.word	0x00203201
  2000fc:	00203481 	.word	0x00203481
  200100:	002002db 	.word	0x002002db
  200104:	002002db 	.word	0x002002db
  200108:	002002db 	.word	0x002002db
  20010c:	002002db 	.word	0x002002db
  200110:	00203181 	.word	0x00203181
  200114:	002002db 	.word	0x002002db
  200118:	002002db 	.word	0x002002db
  20011c:	002002db 	.word	0x002002db
  200120:	00203451 	.word	0x00203451
  200124:	00203421 	.word	0x00203421
  200128:	002033f1 	.word	0x002033f1
  20012c:	002033c1 	.word	0x002033c1
  200130:	00203391 	.word	0x00203391
  200134:	002002db 	.word	0x002002db
  200138:	002002db 	.word	0x002002db
  20013c:	002036e1 	.word	0x002036e1
  200140:	002036c1 	.word	0x002036c1
  200144:	002036a1 	.word	0x002036a1
  200148:	00203681 	.word	0x00203681
  20014c:	002002db 	.word	0x002002db
  200150:	00203361 	.word	0x00203361
  200154:	00203331 	.word	0x00203331
  200158:	00203301 	.word	0x00203301
  20015c:	002002db 	.word	0x002002db
  200160:	002002db 	.word	0x002002db
  200164:	002002db 	.word	0x002002db
  200168:	002002db 	.word	0x002002db
  20016c:	002002db 	.word	0x002002db
  200170:	002002db 	.word	0x002002db
  200174:	002002db 	.word	0x002002db
  200178:	002002db 	.word	0x002002db
  20017c:	002002db 	.word	0x002002db
  200180:	002002db 	.word	0x002002db
  200184:	002002db 	.word	0x002002db
  200188:	00203091 	.word	0x00203091
  20018c:	002002db 	.word	0x002002db
  200190:	002002db 	.word	0x002002db
  200194:	002002db 	.word	0x002002db
  200198:	002002db 	.word	0x002002db
  20019c:	002002db 	.word	0x002002db
  2001a0:	002002db 	.word	0x002002db
  2001a4:	002002db 	.word	0x002002db
  2001a8:	002002db 	.word	0x002002db
  2001ac:	002002db 	.word	0x002002db
  2001b0:	002002db 	.word	0x002002db
  2001b4:	002002db 	.word	0x002002db
  2001b8:	002002db 	.word	0x002002db
  2001bc:	002002db 	.word	0x002002db
  2001c0:	002002db 	.word	0x002002db
  2001c4:	002002db 	.word	0x002002db
  2001c8:	002002db 	.word	0x002002db
  2001cc:	002002db 	.word	0x002002db
  2001d0:	002002db 	.word	0x002002db
  2001d4:	002002db 	.word	0x002002db
  2001d8:	002002db 	.word	0x002002db
  2001dc:	002002db 	.word	0x002002db
  2001e0:	00203661 	.word	0x00203661
  2001e4:	00203641 	.word	0x00203641
  2001e8:	00203621 	.word	0x00203621
  2001ec:	00203601 	.word	0x00203601
  2001f0:	002002db 	.word	0x002002db
  2001f4:	002002db 	.word	0x002002db
  2001f8:	002002db 	.word	0x002002db
  2001fc:	002002db 	.word	0x002002db

Disassembly of section .text:

00200200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
  200200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
  200202:	4827      	ldr	r0, [pc, #156]	; (2002a0 <endfiniloop+0x4>)
                msr     MSP, r0
  200204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
  200208:	4826      	ldr	r0, [pc, #152]	; (2002a4 <endfiniloop+0x8>)
                msr     PSP, r0
  20020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
  20020e:	4826      	ldr	r0, [pc, #152]	; (2002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
  200210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
  200214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
  200218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
  20021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
  20021c:	f380 8814 	msr	CONTROL, r0
                isb
  200220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
  200224:	f003 faf4 	bl	203810 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
  200228:	f002 fdea 	bl	202e00 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
  20022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
  200230:	491e      	ldr	r1, [pc, #120]	; (2002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
  200232:	4a1b      	ldr	r2, [pc, #108]	; (2002a0 <endfiniloop+0x4>)

00200234 <msloop>:
msloop:
                cmp     r1, r2
  200234:	4291      	cmp	r1, r2
                itt     lo
  200236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
  20023c:	e7fa      	bcc.n	200234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
  20023e:	491c      	ldr	r1, [pc, #112]	; (2002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
  200240:	4a18      	ldr	r2, [pc, #96]	; (2002a4 <endfiniloop+0x8>)

00200242 <psloop>:
psloop:
                cmp     r1, r2
  200242:	4291      	cmp	r1, r2
                itt     lo
  200244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
  20024a:	e7fa      	bcc.n	200242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
  20024c:	4919      	ldr	r1, [pc, #100]	; (2002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
  20024e:	4a1a      	ldr	r2, [pc, #104]	; (2002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
  200250:	4b1a      	ldr	r3, [pc, #104]	; (2002bc <endfiniloop+0x20>)

00200252 <dloop>:
dloop:
                cmp     r2, r3
  200252:	429a      	cmp	r2, r3
                ittt    lo
  200254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
  200256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
  20025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
  20025e:	e7f8      	bcc.n	200252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
  200260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
  200262:	4917      	ldr	r1, [pc, #92]	; (2002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
  200264:	4a17      	ldr	r2, [pc, #92]	; (2002c4 <endfiniloop+0x28>)

00200266 <bloop>:
bloop:
                cmp     r1, r2
  200266:	4291      	cmp	r1, r2
                itt     lo
  200268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  20026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
  20026e:	e7fa      	bcc.n	200266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
  200270:	f003 fa86 	bl	203780 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
  200274:	f003 fac4 	bl	203800 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
  200278:	4c13      	ldr	r4, [pc, #76]	; (2002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
  20027a:	4d14      	ldr	r5, [pc, #80]	; (2002cc <endfiniloop+0x30>)

0020027c <initloop>:
initloop:
                cmp     r4, r5
  20027c:	42ac      	cmp	r4, r5
                bge     endinitloop
  20027e:	da03      	bge.n	200288 <endinitloop>
                ldr     r1, [r4], #4
  200280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200284:	4788      	blx	r1
                b       initloop
  200286:	e7f9      	b.n	20027c <initloop>

00200288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
  200288:	f002 f912 	bl	2024b0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
  20028c:	4c10      	ldr	r4, [pc, #64]	; (2002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
  20028e:	4d11      	ldr	r5, [pc, #68]	; (2002d4 <endfiniloop+0x38>)

00200290 <finiloop>:
finiloop:
                cmp     r4, r5
  200290:	42ac      	cmp	r4, r5
                bge     endfiniloop
  200292:	da03      	bge.n	20029c <endfiniloop>
                ldr     r1, [r4], #4
  200294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200298:	4788      	blx	r1
                b       finiloop
  20029a:	e7f9      	b.n	200290 <finiloop>

0020029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
  20029c:	f003 baa8 	b.w	2037f0 <__default_exit>
                ldr     r0, =__main_stack_end__
  2002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
  2002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
  2002a8:	00200000 	.word	0x00200000
                ldr     r1, =__main_stack_base__
  2002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
  2002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
  2002b4:	08003a68 	.word	0x08003a68
                ldr     r2, =_data_start
  2002b8:	20020000 	.word	0x20020000
                ldr     r3, =_data_end
  2002bc:	2002007c 	.word	0x2002007c
                ldr     r1, =_bss_start
  2002c0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
  2002c4:	20000e5c 	.word	0x20000e5c
                ldr     r4, =__init_array_start
  2002c8:	00200200 	.word	0x00200200
                ldr     r5, =__init_array_end
  2002cc:	00200200 	.word	0x00200200
                ldr     r4, =__fini_array_start
  2002d0:	00200200 	.word	0x00200200
                ldr     r5, =__fini_array_end
  2002d4:	00200200 	.word	0x00200200

002002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
  2002d8:	e792      	b.n	200200 <_crt0_entry>

002002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
  2002da:	f000 f800 	bl	2002de <_unhandled_exception>

002002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
  2002de:	e7fe      	b.n	2002de <_unhandled_exception>

002002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  2002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
  2002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
  2002e8:	f8d0 d00c 	ldr.w	sp, [r0, #12]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  2002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
  2002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
  2002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
  2002f6:	4628      	mov	r0, r5
                blx     r4
  2002f8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
  2002fa:	2000      	movs	r0, #0
                bl      chThdExit
  2002fc:	f002 fd38 	bl	202d70 <chThdExit>

00200300 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
  200300:	f002 fd5e 	bl	202dc0 <chSchDoReschedule>

00200304 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
  200304:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
  200306:	e7fe      	b.n	200306 <_port_exit_from_isr+0x2>

00200308 <memcpy>:
  200308:	4684      	mov	ip, r0
  20030a:	ea41 0300 	orr.w	r3, r1, r0
  20030e:	f013 0303 	ands.w	r3, r3, #3
  200312:	d16d      	bne.n	2003f0 <memcpy+0xe8>
  200314:	3a40      	subs	r2, #64	; 0x40
  200316:	d341      	bcc.n	20039c <memcpy+0x94>
  200318:	f851 3b04 	ldr.w	r3, [r1], #4
  20031c:	f840 3b04 	str.w	r3, [r0], #4
  200320:	f851 3b04 	ldr.w	r3, [r1], #4
  200324:	f840 3b04 	str.w	r3, [r0], #4
  200328:	f851 3b04 	ldr.w	r3, [r1], #4
  20032c:	f840 3b04 	str.w	r3, [r0], #4
  200330:	f851 3b04 	ldr.w	r3, [r1], #4
  200334:	f840 3b04 	str.w	r3, [r0], #4
  200338:	f851 3b04 	ldr.w	r3, [r1], #4
  20033c:	f840 3b04 	str.w	r3, [r0], #4
  200340:	f851 3b04 	ldr.w	r3, [r1], #4
  200344:	f840 3b04 	str.w	r3, [r0], #4
  200348:	f851 3b04 	ldr.w	r3, [r1], #4
  20034c:	f840 3b04 	str.w	r3, [r0], #4
  200350:	f851 3b04 	ldr.w	r3, [r1], #4
  200354:	f840 3b04 	str.w	r3, [r0], #4
  200358:	f851 3b04 	ldr.w	r3, [r1], #4
  20035c:	f840 3b04 	str.w	r3, [r0], #4
  200360:	f851 3b04 	ldr.w	r3, [r1], #4
  200364:	f840 3b04 	str.w	r3, [r0], #4
  200368:	f851 3b04 	ldr.w	r3, [r1], #4
  20036c:	f840 3b04 	str.w	r3, [r0], #4
  200370:	f851 3b04 	ldr.w	r3, [r1], #4
  200374:	f840 3b04 	str.w	r3, [r0], #4
  200378:	f851 3b04 	ldr.w	r3, [r1], #4
  20037c:	f840 3b04 	str.w	r3, [r0], #4
  200380:	f851 3b04 	ldr.w	r3, [r1], #4
  200384:	f840 3b04 	str.w	r3, [r0], #4
  200388:	f851 3b04 	ldr.w	r3, [r1], #4
  20038c:	f840 3b04 	str.w	r3, [r0], #4
  200390:	f851 3b04 	ldr.w	r3, [r1], #4
  200394:	f840 3b04 	str.w	r3, [r0], #4
  200398:	3a40      	subs	r2, #64	; 0x40
  20039a:	d2bd      	bcs.n	200318 <memcpy+0x10>
  20039c:	3230      	adds	r2, #48	; 0x30
  20039e:	d311      	bcc.n	2003c4 <memcpy+0xbc>
  2003a0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003a4:	f840 3b04 	str.w	r3, [r0], #4
  2003a8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003ac:	f840 3b04 	str.w	r3, [r0], #4
  2003b0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003b4:	f840 3b04 	str.w	r3, [r0], #4
  2003b8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003bc:	f840 3b04 	str.w	r3, [r0], #4
  2003c0:	3a10      	subs	r2, #16
  2003c2:	d2ed      	bcs.n	2003a0 <memcpy+0x98>
  2003c4:	320c      	adds	r2, #12
  2003c6:	d305      	bcc.n	2003d4 <memcpy+0xcc>
  2003c8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003cc:	f840 3b04 	str.w	r3, [r0], #4
  2003d0:	3a04      	subs	r2, #4
  2003d2:	d2f9      	bcs.n	2003c8 <memcpy+0xc0>
  2003d4:	3204      	adds	r2, #4
  2003d6:	d008      	beq.n	2003ea <memcpy+0xe2>
  2003d8:	07d2      	lsls	r2, r2, #31
  2003da:	bf1c      	itt	ne
  2003dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  2003e0:	f800 3b01 	strbne.w	r3, [r0], #1
  2003e4:	d301      	bcc.n	2003ea <memcpy+0xe2>
  2003e6:	880b      	ldrh	r3, [r1, #0]
  2003e8:	8003      	strh	r3, [r0, #0]
  2003ea:	4660      	mov	r0, ip
  2003ec:	4770      	bx	lr
  2003ee:	bf00      	nop
  2003f0:	2a08      	cmp	r2, #8
  2003f2:	d313      	bcc.n	20041c <memcpy+0x114>
  2003f4:	078b      	lsls	r3, r1, #30
  2003f6:	d08d      	beq.n	200314 <memcpy+0xc>
  2003f8:	f010 0303 	ands.w	r3, r0, #3
  2003fc:	d08a      	beq.n	200314 <memcpy+0xc>
  2003fe:	f1c3 0304 	rsb	r3, r3, #4
  200402:	1ad2      	subs	r2, r2, r3
  200404:	07db      	lsls	r3, r3, #31
  200406:	bf1c      	itt	ne
  200408:	f811 3b01 	ldrbne.w	r3, [r1], #1
  20040c:	f800 3b01 	strbne.w	r3, [r0], #1
  200410:	d380      	bcc.n	200314 <memcpy+0xc>
  200412:	f831 3b02 	ldrh.w	r3, [r1], #2
  200416:	f820 3b02 	strh.w	r3, [r0], #2
  20041a:	e77b      	b.n	200314 <memcpy+0xc>
  20041c:	3a04      	subs	r2, #4
  20041e:	d3d9      	bcc.n	2003d4 <memcpy+0xcc>
  200420:	3a01      	subs	r2, #1
  200422:	f811 3b01 	ldrb.w	r3, [r1], #1
  200426:	f800 3b01 	strb.w	r3, [r0], #1
  20042a:	d2f9      	bcs.n	200420 <memcpy+0x118>
  20042c:	780b      	ldrb	r3, [r1, #0]
  20042e:	7003      	strb	r3, [r0, #0]
  200430:	784b      	ldrb	r3, [r1, #1]
  200432:	7043      	strb	r3, [r0, #1]
  200434:	788b      	ldrb	r3, [r1, #2]
  200436:	7083      	strb	r3, [r0, #2]
  200438:	4660      	mov	r0, ip
  20043a:	4770      	bx	lr

0020043c <__aeabi_drsub>:
  20043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200440:	e002      	b.n	200448 <__adddf3>
  200442:	bf00      	nop

00200444 <__aeabi_dsub>:
  200444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200448 <__adddf3>:
  200448:	b530      	push	{r4, r5, lr}
  20044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200452:	ea94 0f05 	teq	r4, r5
  200456:	bf08      	it	eq
  200458:	ea90 0f02 	teqeq	r0, r2
  20045c:	bf1f      	itttt	ne
  20045e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200462:	ea55 0c02 	orrsne.w	ip, r5, r2
  200466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20046e:	f000 80e2 	beq.w	200636 <__adddf3+0x1ee>
  200472:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20047a:	bfb8      	it	lt
  20047c:	426d      	neglt	r5, r5
  20047e:	dd0c      	ble.n	20049a <__adddf3+0x52>
  200480:	442c      	add	r4, r5
  200482:	ea80 0202 	eor.w	r2, r0, r2
  200486:	ea81 0303 	eor.w	r3, r1, r3
  20048a:	ea82 0000 	eor.w	r0, r2, r0
  20048e:	ea83 0101 	eor.w	r1, r3, r1
  200492:	ea80 0202 	eor.w	r2, r0, r2
  200496:	ea81 0303 	eor.w	r3, r1, r3
  20049a:	2d36      	cmp	r5, #54	; 0x36
  20049c:	bf88      	it	hi
  20049e:	bd30      	pophi	{r4, r5, pc}
  2004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  2004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  2004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  2004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  2004b0:	d002      	beq.n	2004b8 <__adddf3+0x70>
  2004b2:	4240      	negs	r0, r0
  2004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  2004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  2004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  2004c4:	d002      	beq.n	2004cc <__adddf3+0x84>
  2004c6:	4252      	negs	r2, r2
  2004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  2004cc:	ea94 0f05 	teq	r4, r5
  2004d0:	f000 80a7 	beq.w	200622 <__adddf3+0x1da>
  2004d4:	f1a4 0401 	sub.w	r4, r4, #1
  2004d8:	f1d5 0e20 	rsbs	lr, r5, #32
  2004dc:	db0d      	blt.n	2004fa <__adddf3+0xb2>
  2004de:	fa02 fc0e 	lsl.w	ip, r2, lr
  2004e2:	fa22 f205 	lsr.w	r2, r2, r5
  2004e6:	1880      	adds	r0, r0, r2
  2004e8:	f141 0100 	adc.w	r1, r1, #0
  2004ec:	fa03 f20e 	lsl.w	r2, r3, lr
  2004f0:	1880      	adds	r0, r0, r2
  2004f2:	fa43 f305 	asr.w	r3, r3, r5
  2004f6:	4159      	adcs	r1, r3
  2004f8:	e00e      	b.n	200518 <__adddf3+0xd0>
  2004fa:	f1a5 0520 	sub.w	r5, r5, #32
  2004fe:	f10e 0e20 	add.w	lr, lr, #32
  200502:	2a01      	cmp	r2, #1
  200504:	fa03 fc0e 	lsl.w	ip, r3, lr
  200508:	bf28      	it	cs
  20050a:	f04c 0c02 	orrcs.w	ip, ip, #2
  20050e:	fa43 f305 	asr.w	r3, r3, r5
  200512:	18c0      	adds	r0, r0, r3
  200514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  200518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  20051c:	d507      	bpl.n	20052e <__adddf3+0xe6>
  20051e:	f04f 0e00 	mov.w	lr, #0
  200522:	f1dc 0c00 	rsbs	ip, ip, #0
  200526:	eb7e 0000 	sbcs.w	r0, lr, r0
  20052a:	eb6e 0101 	sbc.w	r1, lr, r1
  20052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  200532:	d31b      	bcc.n	20056c <__adddf3+0x124>
  200534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  200538:	d30c      	bcc.n	200554 <__adddf3+0x10c>
  20053a:	0849      	lsrs	r1, r1, #1
  20053c:	ea5f 0030 	movs.w	r0, r0, rrx
  200540:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200544:	f104 0401 	add.w	r4, r4, #1
  200548:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200550:	f080 809a 	bcs.w	200688 <__adddf3+0x240>
  200554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200558:	bf08      	it	eq
  20055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20055e:	f150 0000 	adcs.w	r0, r0, #0
  200562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200566:	ea41 0105 	orr.w	r1, r1, r5
  20056a:	bd30      	pop	{r4, r5, pc}
  20056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200570:	4140      	adcs	r0, r0
  200572:	eb41 0101 	adc.w	r1, r1, r1
  200576:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20057a:	f1a4 0401 	sub.w	r4, r4, #1
  20057e:	d1e9      	bne.n	200554 <__adddf3+0x10c>
  200580:	f091 0f00 	teq	r1, #0
  200584:	bf04      	itt	eq
  200586:	4601      	moveq	r1, r0
  200588:	2000      	moveq	r0, #0
  20058a:	fab1 f381 	clz	r3, r1
  20058e:	bf08      	it	eq
  200590:	3320      	addeq	r3, #32
  200592:	f1a3 030b 	sub.w	r3, r3, #11
  200596:	f1b3 0220 	subs.w	r2, r3, #32
  20059a:	da0c      	bge.n	2005b6 <__adddf3+0x16e>
  20059c:	320c      	adds	r2, #12
  20059e:	dd08      	ble.n	2005b2 <__adddf3+0x16a>
  2005a0:	f102 0c14 	add.w	ip, r2, #20
  2005a4:	f1c2 020c 	rsb	r2, r2, #12
  2005a8:	fa01 f00c 	lsl.w	r0, r1, ip
  2005ac:	fa21 f102 	lsr.w	r1, r1, r2
  2005b0:	e00c      	b.n	2005cc <__adddf3+0x184>
  2005b2:	f102 0214 	add.w	r2, r2, #20
  2005b6:	bfd8      	it	le
  2005b8:	f1c2 0c20 	rsble	ip, r2, #32
  2005bc:	fa01 f102 	lsl.w	r1, r1, r2
  2005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
  2005c4:	bfdc      	itt	le
  2005c6:	ea41 010c 	orrle.w	r1, r1, ip
  2005ca:	4090      	lslle	r0, r2
  2005cc:	1ae4      	subs	r4, r4, r3
  2005ce:	bfa2      	ittt	ge
  2005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  2005d4:	4329      	orrge	r1, r5
  2005d6:	bd30      	popge	{r4, r5, pc}
  2005d8:	ea6f 0404 	mvn.w	r4, r4
  2005dc:	3c1f      	subs	r4, #31
  2005de:	da1c      	bge.n	20061a <__adddf3+0x1d2>
  2005e0:	340c      	adds	r4, #12
  2005e2:	dc0e      	bgt.n	200602 <__adddf3+0x1ba>
  2005e4:	f104 0414 	add.w	r4, r4, #20
  2005e8:	f1c4 0220 	rsb	r2, r4, #32
  2005ec:	fa20 f004 	lsr.w	r0, r0, r4
  2005f0:	fa01 f302 	lsl.w	r3, r1, r2
  2005f4:	ea40 0003 	orr.w	r0, r0, r3
  2005f8:	fa21 f304 	lsr.w	r3, r1, r4
  2005fc:	ea45 0103 	orr.w	r1, r5, r3
  200600:	bd30      	pop	{r4, r5, pc}
  200602:	f1c4 040c 	rsb	r4, r4, #12
  200606:	f1c4 0220 	rsb	r2, r4, #32
  20060a:	fa20 f002 	lsr.w	r0, r0, r2
  20060e:	fa01 f304 	lsl.w	r3, r1, r4
  200612:	ea40 0003 	orr.w	r0, r0, r3
  200616:	4629      	mov	r1, r5
  200618:	bd30      	pop	{r4, r5, pc}
  20061a:	fa21 f004 	lsr.w	r0, r1, r4
  20061e:	4629      	mov	r1, r5
  200620:	bd30      	pop	{r4, r5, pc}
  200622:	f094 0f00 	teq	r4, #0
  200626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  20062a:	bf06      	itte	eq
  20062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  200630:	3401      	addeq	r4, #1
  200632:	3d01      	subne	r5, #1
  200634:	e74e      	b.n	2004d4 <__adddf3+0x8c>
  200636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20063a:	bf18      	it	ne
  20063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200640:	d029      	beq.n	200696 <__adddf3+0x24e>
  200642:	ea94 0f05 	teq	r4, r5
  200646:	bf08      	it	eq
  200648:	ea90 0f02 	teqeq	r0, r2
  20064c:	d005      	beq.n	20065a <__adddf3+0x212>
  20064e:	ea54 0c00 	orrs.w	ip, r4, r0
  200652:	bf04      	itt	eq
  200654:	4619      	moveq	r1, r3
  200656:	4610      	moveq	r0, r2
  200658:	bd30      	pop	{r4, r5, pc}
  20065a:	ea91 0f03 	teq	r1, r3
  20065e:	bf1e      	ittt	ne
  200660:	2100      	movne	r1, #0
  200662:	2000      	movne	r0, #0
  200664:	bd30      	popne	{r4, r5, pc}
  200666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20066a:	d105      	bne.n	200678 <__adddf3+0x230>
  20066c:	0040      	lsls	r0, r0, #1
  20066e:	4149      	adcs	r1, r1
  200670:	bf28      	it	cs
  200672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200676:	bd30      	pop	{r4, r5, pc}
  200678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20067c:	bf3c      	itt	cc
  20067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200682:	bd30      	popcc	{r4, r5, pc}
  200684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200690:	f04f 0000 	mov.w	r0, #0
  200694:	bd30      	pop	{r4, r5, pc}
  200696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20069a:	bf1a      	itte	ne
  20069c:	4619      	movne	r1, r3
  20069e:	4610      	movne	r0, r2
  2006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  2006a4:	bf1c      	itt	ne
  2006a6:	460b      	movne	r3, r1
  2006a8:	4602      	movne	r2, r0
  2006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  2006ae:	bf06      	itte	eq
  2006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  2006b4:	ea91 0f03 	teqeq	r1, r3
  2006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  2006bc:	bd30      	pop	{r4, r5, pc}
  2006be:	bf00      	nop

002006c0 <__aeabi_ui2d>:
  2006c0:	f090 0f00 	teq	r0, #0
  2006c4:	bf04      	itt	eq
  2006c6:	2100      	moveq	r1, #0
  2006c8:	4770      	bxeq	lr
  2006ca:	b530      	push	{r4, r5, lr}
  2006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2006d4:	f04f 0500 	mov.w	r5, #0
  2006d8:	f04f 0100 	mov.w	r1, #0
  2006dc:	e750      	b.n	200580 <__adddf3+0x138>
  2006de:	bf00      	nop

002006e0 <__aeabi_i2d>:
  2006e0:	f090 0f00 	teq	r0, #0
  2006e4:	bf04      	itt	eq
  2006e6:	2100      	moveq	r1, #0
  2006e8:	4770      	bxeq	lr
  2006ea:	b530      	push	{r4, r5, lr}
  2006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2006f8:	bf48      	it	mi
  2006fa:	4240      	negmi	r0, r0
  2006fc:	f04f 0100 	mov.w	r1, #0
  200700:	e73e      	b.n	200580 <__adddf3+0x138>
  200702:	bf00      	nop

00200704 <__aeabi_f2d>:
  200704:	0042      	lsls	r2, r0, #1
  200706:	ea4f 01e2 	mov.w	r1, r2, asr #3
  20070a:	ea4f 0131 	mov.w	r1, r1, rrx
  20070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  200712:	bf1f      	itttt	ne
  200714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  200718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  20071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  200720:	4770      	bxne	lr
  200722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
  200726:	bf08      	it	eq
  200728:	4770      	bxeq	lr
  20072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
  20072e:	bf04      	itt	eq
  200730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
  200734:	4770      	bxeq	lr
  200736:	b530      	push	{r4, r5, lr}
  200738:	f44f 7460 	mov.w	r4, #896	; 0x380
  20073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  200744:	e71c      	b.n	200580 <__adddf3+0x138>
  200746:	bf00      	nop

00200748 <__aeabi_ul2d>:
  200748:	ea50 0201 	orrs.w	r2, r0, r1
  20074c:	bf08      	it	eq
  20074e:	4770      	bxeq	lr
  200750:	b530      	push	{r4, r5, lr}
  200752:	f04f 0500 	mov.w	r5, #0
  200756:	e00a      	b.n	20076e <__aeabi_l2d+0x16>

00200758 <__aeabi_l2d>:
  200758:	ea50 0201 	orrs.w	r2, r0, r1
  20075c:	bf08      	it	eq
  20075e:	4770      	bxeq	lr
  200760:	b530      	push	{r4, r5, lr}
  200762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  200766:	d502      	bpl.n	20076e <__aeabi_l2d+0x16>
  200768:	4240      	negs	r0, r0
  20076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  20076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  200772:	f104 0432 	add.w	r4, r4, #50	; 0x32
  200776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  20077a:	f43f aed8 	beq.w	20052e <__adddf3+0xe6>
  20077e:	f04f 0203 	mov.w	r2, #3
  200782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200786:	bf18      	it	ne
  200788:	3203      	addne	r2, #3
  20078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20078e:	bf18      	it	ne
  200790:	3203      	addne	r2, #3
  200792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  200796:	f1c2 0320 	rsb	r3, r2, #32
  20079a:	fa00 fc03 	lsl.w	ip, r0, r3
  20079e:	fa20 f002 	lsr.w	r0, r0, r2
  2007a2:	fa01 fe03 	lsl.w	lr, r1, r3
  2007a6:	ea40 000e 	orr.w	r0, r0, lr
  2007aa:	fa21 f102 	lsr.w	r1, r1, r2
  2007ae:	4414      	add	r4, r2
  2007b0:	e6bd      	b.n	20052e <__adddf3+0xe6>
  2007b2:	bf00      	nop

002007b4 <__aeabi_dmul>:
  2007b4:	b570      	push	{r4, r5, r6, lr}
  2007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2007c2:	bf1d      	ittte	ne
  2007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2007c8:	ea94 0f0c 	teqne	r4, ip
  2007cc:	ea95 0f0c 	teqne	r5, ip
  2007d0:	f000 f8de 	bleq	200990 <__aeabi_dmul+0x1dc>
  2007d4:	442c      	add	r4, r5
  2007d6:	ea81 0603 	eor.w	r6, r1, r3
  2007da:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  2007de:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  2007e2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  2007e6:	bf18      	it	ne
  2007e8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2007ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2007f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2007f4:	d038      	beq.n	200868 <__aeabi_dmul+0xb4>
  2007f6:	fba0 ce02 	umull	ip, lr, r0, r2
  2007fa:	f04f 0500 	mov.w	r5, #0
  2007fe:	fbe1 e502 	umlal	lr, r5, r1, r2
  200802:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  200806:	fbe0 e503 	umlal	lr, r5, r0, r3
  20080a:	f04f 0600 	mov.w	r6, #0
  20080e:	fbe1 5603 	umlal	r5, r6, r1, r3
  200812:	f09c 0f00 	teq	ip, #0
  200816:	bf18      	it	ne
  200818:	f04e 0e01 	orrne.w	lr, lr, #1
  20081c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  200820:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  200824:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  200828:	d204      	bcs.n	200834 <__aeabi_dmul+0x80>
  20082a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  20082e:	416d      	adcs	r5, r5
  200830:	eb46 0606 	adc.w	r6, r6, r6
  200834:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  200838:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  20083c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  200840:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  200844:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200848:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  20084c:	bf88      	it	hi
  20084e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  200852:	d81e      	bhi.n	200892 <__aeabi_dmul+0xde>
  200854:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200858:	bf08      	it	eq
  20085a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  20085e:	f150 0000 	adcs.w	r0, r0, #0
  200862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200866:	bd70      	pop	{r4, r5, r6, pc}
  200868:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  20086c:	ea46 0101 	orr.w	r1, r6, r1
  200870:	ea40 0002 	orr.w	r0, r0, r2
  200874:	ea81 0103 	eor.w	r1, r1, r3
  200878:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  20087c:	bfc2      	ittt	gt
  20087e:	ebd4 050c 	rsbsgt	r5, r4, ip
  200882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200886:	bd70      	popgt	{r4, r5, r6, pc}
  200888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  20088c:	f04f 0e00 	mov.w	lr, #0
  200890:	3c01      	subs	r4, #1
  200892:	f300 80ab 	bgt.w	2009ec <__aeabi_dmul+0x238>
  200896:	f114 0f36 	cmn.w	r4, #54	; 0x36
  20089a:	bfde      	ittt	le
  20089c:	2000      	movle	r0, #0
  20089e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  2008a2:	bd70      	pople	{r4, r5, r6, pc}
  2008a4:	f1c4 0400 	rsb	r4, r4, #0
  2008a8:	3c20      	subs	r4, #32
  2008aa:	da35      	bge.n	200918 <__aeabi_dmul+0x164>
  2008ac:	340c      	adds	r4, #12
  2008ae:	dc1b      	bgt.n	2008e8 <__aeabi_dmul+0x134>
  2008b0:	f104 0414 	add.w	r4, r4, #20
  2008b4:	f1c4 0520 	rsb	r5, r4, #32
  2008b8:	fa00 f305 	lsl.w	r3, r0, r5
  2008bc:	fa20 f004 	lsr.w	r0, r0, r4
  2008c0:	fa01 f205 	lsl.w	r2, r1, r5
  2008c4:	ea40 0002 	orr.w	r0, r0, r2
  2008c8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  2008cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2008d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2008d4:	fa21 f604 	lsr.w	r6, r1, r4
  2008d8:	eb42 0106 	adc.w	r1, r2, r6
  2008dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2008e0:	bf08      	it	eq
  2008e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2008e6:	bd70      	pop	{r4, r5, r6, pc}
  2008e8:	f1c4 040c 	rsb	r4, r4, #12
  2008ec:	f1c4 0520 	rsb	r5, r4, #32
  2008f0:	fa00 f304 	lsl.w	r3, r0, r4
  2008f4:	fa20 f005 	lsr.w	r0, r0, r5
  2008f8:	fa01 f204 	lsl.w	r2, r1, r4
  2008fc:	ea40 0002 	orr.w	r0, r0, r2
  200900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  200904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  200908:	f141 0100 	adc.w	r1, r1, #0
  20090c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200910:	bf08      	it	eq
  200912:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200916:	bd70      	pop	{r4, r5, r6, pc}
  200918:	f1c4 0520 	rsb	r5, r4, #32
  20091c:	fa00 f205 	lsl.w	r2, r0, r5
  200920:	ea4e 0e02 	orr.w	lr, lr, r2
  200924:	fa20 f304 	lsr.w	r3, r0, r4
  200928:	fa01 f205 	lsl.w	r2, r1, r5
  20092c:	ea43 0302 	orr.w	r3, r3, r2
  200930:	fa21 f004 	lsr.w	r0, r1, r4
  200934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  200938:	fa21 f204 	lsr.w	r2, r1, r4
  20093c:	ea20 0002 	bic.w	r0, r0, r2
  200940:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  200944:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200948:	bf08      	it	eq
  20094a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  20094e:	bd70      	pop	{r4, r5, r6, pc}
  200950:	f094 0f00 	teq	r4, #0
  200954:	d10f      	bne.n	200976 <__aeabi_dmul+0x1c2>
  200956:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  20095a:	0040      	lsls	r0, r0, #1
  20095c:	eb41 0101 	adc.w	r1, r1, r1
  200960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  200964:	bf08      	it	eq
  200966:	3c01      	subeq	r4, #1
  200968:	d0f7      	beq.n	20095a <__aeabi_dmul+0x1a6>
  20096a:	ea41 0106 	orr.w	r1, r1, r6
  20096e:	f095 0f00 	teq	r5, #0
  200972:	bf18      	it	ne
  200974:	4770      	bxne	lr
  200976:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  20097a:	0052      	lsls	r2, r2, #1
  20097c:	eb43 0303 	adc.w	r3, r3, r3
  200980:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  200984:	bf08      	it	eq
  200986:	3d01      	subeq	r5, #1
  200988:	d0f7      	beq.n	20097a <__aeabi_dmul+0x1c6>
  20098a:	ea43 0306 	orr.w	r3, r3, r6
  20098e:	4770      	bx	lr
  200990:	ea94 0f0c 	teq	r4, ip
  200994:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200998:	bf18      	it	ne
  20099a:	ea95 0f0c 	teqne	r5, ip
  20099e:	d00c      	beq.n	2009ba <__aeabi_dmul+0x206>
  2009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  2009a4:	bf18      	it	ne
  2009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  2009aa:	d1d1      	bne.n	200950 <__aeabi_dmul+0x19c>
  2009ac:	ea81 0103 	eor.w	r1, r1, r3
  2009b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2009b4:	f04f 0000 	mov.w	r0, #0
  2009b8:	bd70      	pop	{r4, r5, r6, pc}
  2009ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  2009be:	bf06      	itte	eq
  2009c0:	4610      	moveq	r0, r2
  2009c2:	4619      	moveq	r1, r3
  2009c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  2009c8:	d019      	beq.n	2009fe <__aeabi_dmul+0x24a>
  2009ca:	ea94 0f0c 	teq	r4, ip
  2009ce:	d102      	bne.n	2009d6 <__aeabi_dmul+0x222>
  2009d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  2009d4:	d113      	bne.n	2009fe <__aeabi_dmul+0x24a>
  2009d6:	ea95 0f0c 	teq	r5, ip
  2009da:	d105      	bne.n	2009e8 <__aeabi_dmul+0x234>
  2009dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  2009e0:	bf1c      	itt	ne
  2009e2:	4610      	movne	r0, r2
  2009e4:	4619      	movne	r1, r3
  2009e6:	d10a      	bne.n	2009fe <__aeabi_dmul+0x24a>
  2009e8:	ea81 0103 	eor.w	r1, r1, r3
  2009ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2009f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2009f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2009f8:	f04f 0000 	mov.w	r0, #0
  2009fc:	bd70      	pop	{r4, r5, r6, pc}
  2009fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  200a02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  200a06:	bd70      	pop	{r4, r5, r6, pc}

00200a08 <__aeabi_ddiv>:
  200a08:	b570      	push	{r4, r5, r6, lr}
  200a0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  200a0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  200a12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  200a16:	bf1d      	ittte	ne
  200a18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200a1c:	ea94 0f0c 	teqne	r4, ip
  200a20:	ea95 0f0c 	teqne	r5, ip
  200a24:	f000 f8a7 	bleq	200b76 <__aeabi_ddiv+0x16e>
  200a28:	eba4 0405 	sub.w	r4, r4, r5
  200a2c:	ea81 0e03 	eor.w	lr, r1, r3
  200a30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200a34:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200a38:	f000 8088 	beq.w	200b4c <__aeabi_ddiv+0x144>
  200a3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200a40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  200a44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200a48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200a4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200a50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  200a54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200a58:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200a5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200a60:	429d      	cmp	r5, r3
  200a62:	bf08      	it	eq
  200a64:	4296      	cmpeq	r6, r2
  200a66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200a6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200a6e:	d202      	bcs.n	200a76 <__aeabi_ddiv+0x6e>
  200a70:	085b      	lsrs	r3, r3, #1
  200a72:	ea4f 0232 	mov.w	r2, r2, rrx
  200a76:	1ab6      	subs	r6, r6, r2
  200a78:	eb65 0503 	sbc.w	r5, r5, r3
  200a7c:	085b      	lsrs	r3, r3, #1
  200a7e:	ea4f 0232 	mov.w	r2, r2, rrx
  200a82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  200a86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200a8a:	ebb6 0e02 	subs.w	lr, r6, r2
  200a8e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200a92:	bf22      	ittt	cs
  200a94:	1ab6      	subcs	r6, r6, r2
  200a96:	4675      	movcs	r5, lr
  200a98:	ea40 000c 	orrcs.w	r0, r0, ip
  200a9c:	085b      	lsrs	r3, r3, #1
  200a9e:	ea4f 0232 	mov.w	r2, r2, rrx
  200aa2:	ebb6 0e02 	subs.w	lr, r6, r2
  200aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
  200aaa:	bf22      	ittt	cs
  200aac:	1ab6      	subcs	r6, r6, r2
  200aae:	4675      	movcs	r5, lr
  200ab0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  200ab4:	085b      	lsrs	r3, r3, #1
  200ab6:	ea4f 0232 	mov.w	r2, r2, rrx
  200aba:	ebb6 0e02 	subs.w	lr, r6, r2
  200abe:	eb75 0e03 	sbcs.w	lr, r5, r3
  200ac2:	bf22      	ittt	cs
  200ac4:	1ab6      	subcs	r6, r6, r2
  200ac6:	4675      	movcs	r5, lr
  200ac8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  200acc:	085b      	lsrs	r3, r3, #1
  200ace:	ea4f 0232 	mov.w	r2, r2, rrx
  200ad2:	ebb6 0e02 	subs.w	lr, r6, r2
  200ad6:	eb75 0e03 	sbcs.w	lr, r5, r3
  200ada:	bf22      	ittt	cs
  200adc:	1ab6      	subcs	r6, r6, r2
  200ade:	4675      	movcs	r5, lr
  200ae0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  200ae4:	ea55 0e06 	orrs.w	lr, r5, r6
  200ae8:	d018      	beq.n	200b1c <__aeabi_ddiv+0x114>
  200aea:	ea4f 1505 	mov.w	r5, r5, lsl #4
  200aee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  200af2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  200af6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  200afa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  200afe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  200b02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  200b06:	d1c0      	bne.n	200a8a <__aeabi_ddiv+0x82>
  200b08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  200b0c:	d10b      	bne.n	200b26 <__aeabi_ddiv+0x11e>
  200b0e:	ea41 0100 	orr.w	r1, r1, r0
  200b12:	f04f 0000 	mov.w	r0, #0
  200b16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  200b1a:	e7b6      	b.n	200a8a <__aeabi_ddiv+0x82>
  200b1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  200b20:	bf04      	itt	eq
  200b22:	4301      	orreq	r1, r0
  200b24:	2000      	moveq	r0, #0
  200b26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200b2a:	bf88      	it	hi
  200b2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  200b30:	f63f aeaf 	bhi.w	200892 <__aeabi_dmul+0xde>
  200b34:	ebb5 0c03 	subs.w	ip, r5, r3
  200b38:	bf04      	itt	eq
  200b3a:	ebb6 0c02 	subseq.w	ip, r6, r2
  200b3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  200b42:	f150 0000 	adcs.w	r0, r0, #0
  200b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200b4a:	bd70      	pop	{r4, r5, r6, pc}
  200b4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200b50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  200b54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200b58:	bfc2      	ittt	gt
  200b5a:	ebd4 050c 	rsbsgt	r5, r4, ip
  200b5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  200b62:	bd70      	popgt	{r4, r5, r6, pc}
  200b64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200b68:	f04f 0e00 	mov.w	lr, #0
  200b6c:	3c01      	subs	r4, #1
  200b6e:	e690      	b.n	200892 <__aeabi_dmul+0xde>
  200b70:	ea45 0e06 	orr.w	lr, r5, r6
  200b74:	e68d      	b.n	200892 <__aeabi_dmul+0xde>
  200b76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200b7a:	ea94 0f0c 	teq	r4, ip
  200b7e:	bf08      	it	eq
  200b80:	ea95 0f0c 	teqeq	r5, ip
  200b84:	f43f af3b 	beq.w	2009fe <__aeabi_dmul+0x24a>
  200b88:	ea94 0f0c 	teq	r4, ip
  200b8c:	d10a      	bne.n	200ba4 <__aeabi_ddiv+0x19c>
  200b8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  200b92:	f47f af34 	bne.w	2009fe <__aeabi_dmul+0x24a>
  200b96:	ea95 0f0c 	teq	r5, ip
  200b9a:	f47f af25 	bne.w	2009e8 <__aeabi_dmul+0x234>
  200b9e:	4610      	mov	r0, r2
  200ba0:	4619      	mov	r1, r3
  200ba2:	e72c      	b.n	2009fe <__aeabi_dmul+0x24a>
  200ba4:	ea95 0f0c 	teq	r5, ip
  200ba8:	d106      	bne.n	200bb8 <__aeabi_ddiv+0x1b0>
  200baa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200bae:	f43f aefd 	beq.w	2009ac <__aeabi_dmul+0x1f8>
  200bb2:	4610      	mov	r0, r2
  200bb4:	4619      	mov	r1, r3
  200bb6:	e722      	b.n	2009fe <__aeabi_dmul+0x24a>
  200bb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  200bbc:	bf18      	it	ne
  200bbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200bc2:	f47f aec5 	bne.w	200950 <__aeabi_dmul+0x19c>
  200bc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  200bca:	f47f af0d 	bne.w	2009e8 <__aeabi_dmul+0x234>
  200bce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  200bd2:	f47f aeeb 	bne.w	2009ac <__aeabi_dmul+0x1f8>
  200bd6:	e712      	b.n	2009fe <__aeabi_dmul+0x24a>

00200bd8 <__aeabi_d2iz>:
  200bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  200be0:	d215      	bcs.n	200c0e <__aeabi_d2iz+0x36>
  200be2:	d511      	bpl.n	200c08 <__aeabi_d2iz+0x30>
  200be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  200be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  200bec:	d912      	bls.n	200c14 <__aeabi_d2iz+0x3c>
  200bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  200bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200bfe:	fa23 f002 	lsr.w	r0, r3, r2
  200c02:	bf18      	it	ne
  200c04:	4240      	negne	r0, r0
  200c06:	4770      	bx	lr
  200c08:	f04f 0000 	mov.w	r0, #0
  200c0c:	4770      	bx	lr
  200c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  200c12:	d105      	bne.n	200c20 <__aeabi_d2iz+0x48>
  200c14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  200c18:	bf08      	it	eq
  200c1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200c1e:	4770      	bx	lr
  200c20:	f04f 0000 	mov.w	r0, #0
  200c24:	4770      	bx	lr
  200c26:	bf00      	nop

00200c28 <__aeabi_d2f>:
  200c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  200c30:	bf24      	itt	cs
  200c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  200c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  200c3a:	d90d      	bls.n	200c58 <__aeabi_d2f+0x30>
  200c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  200c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  200c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  200c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  200c50:	bf08      	it	eq
  200c52:	f020 0001 	biceq.w	r0, r0, #1
  200c56:	4770      	bx	lr
  200c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  200c5c:	d121      	bne.n	200ca2 <__aeabi_d2f+0x7a>
  200c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  200c62:	bfbc      	itt	lt
  200c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  200c68:	4770      	bxlt	lr
  200c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  200c72:	f1c2 0218 	rsb	r2, r2, #24
  200c76:	f1c2 0c20 	rsb	ip, r2, #32
  200c7a:	fa10 f30c 	lsls.w	r3, r0, ip
  200c7e:	fa20 f002 	lsr.w	r0, r0, r2
  200c82:	bf18      	it	ne
  200c84:	f040 0001 	orrne.w	r0, r0, #1
  200c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  200c90:	fa03 fc0c 	lsl.w	ip, r3, ip
  200c94:	ea40 000c 	orr.w	r0, r0, ip
  200c98:	fa23 f302 	lsr.w	r3, r3, r2
  200c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  200ca0:	e7cc      	b.n	200c3c <__aeabi_d2f+0x14>
  200ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
  200ca6:	d107      	bne.n	200cb8 <__aeabi_d2f+0x90>
  200ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  200cac:	bf1e      	ittt	ne
  200cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  200cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  200cb6:	4770      	bxne	lr
  200cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  200cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200cc4:	4770      	bx	lr
  200cc6:	bf00      	nop

00200cc8 <__gesf2>:
  200cc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  200ccc:	e006      	b.n	200cdc <__cmpsf2+0x4>
  200cce:	bf00      	nop

00200cd0 <__lesf2>:
  200cd0:	f04f 0c01 	mov.w	ip, #1
  200cd4:	e002      	b.n	200cdc <__cmpsf2+0x4>
  200cd6:	bf00      	nop

00200cd8 <__cmpsf2>:
  200cd8:	f04f 0c01 	mov.w	ip, #1
  200cdc:	f84d cd04 	str.w	ip, [sp, #-4]!
  200ce0:	ea4f 0240 	mov.w	r2, r0, lsl #1
  200ce4:	ea4f 0341 	mov.w	r3, r1, lsl #1
  200ce8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  200cec:	bf18      	it	ne
  200cee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  200cf2:	d011      	beq.n	200d18 <__cmpsf2+0x40>
  200cf4:	b001      	add	sp, #4
  200cf6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  200cfa:	bf18      	it	ne
  200cfc:	ea90 0f01 	teqne	r0, r1
  200d00:	bf58      	it	pl
  200d02:	ebb2 0003 	subspl.w	r0, r2, r3
  200d06:	bf88      	it	hi
  200d08:	17c8      	asrhi	r0, r1, #31
  200d0a:	bf38      	it	cc
  200d0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  200d10:	bf18      	it	ne
  200d12:	f040 0001 	orrne.w	r0, r0, #1
  200d16:	4770      	bx	lr
  200d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  200d1c:	d102      	bne.n	200d24 <__cmpsf2+0x4c>
  200d1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  200d22:	d105      	bne.n	200d30 <__cmpsf2+0x58>
  200d24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  200d28:	d1e4      	bne.n	200cf4 <__cmpsf2+0x1c>
  200d2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  200d2e:	d0e1      	beq.n	200cf4 <__cmpsf2+0x1c>
  200d30:	f85d 0b04 	ldr.w	r0, [sp], #4
  200d34:	4770      	bx	lr
  200d36:	bf00      	nop

00200d38 <__aeabi_cfrcmple>:
  200d38:	4684      	mov	ip, r0
  200d3a:	4608      	mov	r0, r1
  200d3c:	4661      	mov	r1, ip
  200d3e:	e7ff      	b.n	200d40 <__aeabi_cfcmpeq>

00200d40 <__aeabi_cfcmpeq>:
  200d40:	b50f      	push	{r0, r1, r2, r3, lr}
  200d42:	f7ff ffc9 	bl	200cd8 <__cmpsf2>
  200d46:	2800      	cmp	r0, #0
  200d48:	bf48      	it	mi
  200d4a:	f110 0f00 	cmnmi.w	r0, #0
  200d4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00200d50 <__aeabi_fcmpeq>:
  200d50:	f84d ed08 	str.w	lr, [sp, #-8]!
  200d54:	f7ff fff4 	bl	200d40 <__aeabi_cfcmpeq>
  200d58:	bf0c      	ite	eq
  200d5a:	2001      	moveq	r0, #1
  200d5c:	2000      	movne	r0, #0
  200d5e:	f85d fb08 	ldr.w	pc, [sp], #8
  200d62:	bf00      	nop

00200d64 <__aeabi_fcmplt>:
  200d64:	f84d ed08 	str.w	lr, [sp, #-8]!
  200d68:	f7ff ffea 	bl	200d40 <__aeabi_cfcmpeq>
  200d6c:	bf34      	ite	cc
  200d6e:	2001      	movcc	r0, #1
  200d70:	2000      	movcs	r0, #0
  200d72:	f85d fb08 	ldr.w	pc, [sp], #8
  200d76:	bf00      	nop

00200d78 <__aeabi_fcmple>:
  200d78:	f84d ed08 	str.w	lr, [sp, #-8]!
  200d7c:	f7ff ffe0 	bl	200d40 <__aeabi_cfcmpeq>
  200d80:	bf94      	ite	ls
  200d82:	2001      	movls	r0, #1
  200d84:	2000      	movhi	r0, #0
  200d86:	f85d fb08 	ldr.w	pc, [sp], #8
  200d8a:	bf00      	nop

00200d8c <__aeabi_fcmpge>:
  200d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
  200d90:	f7ff ffd2 	bl	200d38 <__aeabi_cfrcmple>
  200d94:	bf94      	ite	ls
  200d96:	2001      	movls	r0, #1
  200d98:	2000      	movhi	r0, #0
  200d9a:	f85d fb08 	ldr.w	pc, [sp], #8
  200d9e:	bf00      	nop

00200da0 <__aeabi_fcmpgt>:
  200da0:	f84d ed08 	str.w	lr, [sp, #-8]!
  200da4:	f7ff ffc8 	bl	200d38 <__aeabi_cfrcmple>
  200da8:	bf34      	ite	cc
  200daa:	2001      	movcc	r0, #1
  200dac:	2000      	movcs	r0, #0
  200dae:	f85d fb08 	ldr.w	pc, [sp], #8
  200db2:	bf00      	nop

00200db4 <__aeabi_f2iz>:
  200db4:	ea4f 0240 	mov.w	r2, r0, lsl #1
  200db8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  200dbc:	d30f      	bcc.n	200dde <__aeabi_f2iz+0x2a>
  200dbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
  200dc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  200dc6:	d90d      	bls.n	200de4 <__aeabi_f2iz+0x30>
  200dc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
  200dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  200dd0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  200dd4:	fa23 f002 	lsr.w	r0, r3, r2
  200dd8:	bf18      	it	ne
  200dda:	4240      	negne	r0, r0
  200ddc:	4770      	bx	lr
  200dde:	f04f 0000 	mov.w	r0, #0
  200de2:	4770      	bx	lr
  200de4:	f112 0f61 	cmn.w	r2, #97	; 0x61
  200de8:	d101      	bne.n	200dee <__aeabi_f2iz+0x3a>
  200dea:	0242      	lsls	r2, r0, #9
  200dec:	d105      	bne.n	200dfa <__aeabi_f2iz+0x46>
  200dee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  200df2:	bf08      	it	eq
  200df4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  200df8:	4770      	bx	lr
  200dfa:	f04f 0000 	mov.w	r0, #0
  200dfe:	4770      	bx	lr

00200e00 <can_lld_set_filters.constprop.22>:
                                uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {

#if STM32_CAN_USE_CAN2
  if(canp == &CAND2) {
  200e00:	4b4c      	ldr	r3, [pc, #304]	; (200f34 <can_lld_set_filters.constprop.22+0x134>)
  200e02:	4298      	cmp	r0, r3
  200e04:	4b4c      	ldr	r3, [pc, #304]	; (200f38 <can_lld_set_filters.constprop.22+0x138>)
static void can_lld_set_filters(CANDriver* canp,
  200e06:	b4f0      	push	{r4, r5, r6, r7}
  if(canp == &CAND2) {
  200e08:	d04b      	beq.n	200ea2 <can_lld_set_filters.constprop.22+0xa2>
  }
#endif

  /* Temporarily enabling CAN clock.*/
#if STM32_CAN_USE_CAN1
  if(canp == &CAND1) {
  200e0a:	4298      	cmp	r0, r3
  200e0c:	d049      	beq.n	200ea2 <can_lld_set_filters.constprop.22+0xa2>
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
  }
#endif

#if STM32_CAN_USE_CAN3
  if(canp == &CAND3) {
  200e0e:	4b4b      	ldr	r3, [pc, #300]	; (200f3c <can_lld_set_filters.constprop.22+0x13c>)
  200e10:	4298      	cmp	r0, r3
  200e12:	d016      	beq.n	200e42 <can_lld_set_filters.constprop.22+0x42>
    }
  }
  else {
    /* Setting up a single default filter that enables everything for both
       CANs.*/
    canp->can->sFilterRegister[0].FR1 = 0;
  200e14:	6a83      	ldr	r3, [r0, #40]	; 0x28
  200e16:	2200      	movs	r2, #0
      canp->can->sFilterRegister[can2sb].FR2 = 0;
    }
#endif
    canp->can->FM1R = 0;
    canp->can->FFA1R = 0;
    canp->can->FS1R = 1;
  200e18:	2101      	movs	r1, #1
    canp->can->sFilterRegister[0].FR1 = 0;
  200e1a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
  200e1e:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
    canp->can->FM1R = 0;
  200e22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
  200e26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
  200e2a:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
  200e2e:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
      canp->can->FA1R |= 1 << can2sb;
    }
#endif
  }
  canp->can->FMR &= ~CAN_FMR_FINIT;
  200e32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  200e36:	f022 0201 	bic.w	r2, r2, #1
  200e3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if STM32_CAN_USE_CAN3
  if(canp == &CAND3) {
    rccDisableCAN3();
  }
#endif
}
  200e3e:	bcf0      	pop	{r4, r5, r6, r7}
  200e40:	4770      	bx	lr
    rccEnableCAN3(true);
  200e42:	4b3f      	ldr	r3, [pc, #252]	; (200f40 <can_lld_set_filters.constprop.22+0x140>)
    canp->can->FS1R = 1;
  200e44:	2501      	movs	r5, #1
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  200e46:	6a82      	ldr	r2, [r0, #40]	; 0x28
    canp->can->sFilterRegister[0].FR1 = 0;
  200e48:	2400      	movs	r4, #0
    rccEnableCAN3(true);
  200e4a:	6c18      	ldr	r0, [r3, #64]	; 0x40
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  200e4c:	493d      	ldr	r1, [pc, #244]	; (200f44 <can_lld_set_filters.constprop.22+0x144>)
    rccEnableCAN3(true);
  200e4e:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
  200e52:	6418      	str	r0, [r3, #64]	; 0x40
  200e54:	6e18      	ldr	r0, [r3, #96]	; 0x60
  200e56:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
  200e5a:	6618      	str	r0, [r3, #96]	; 0x60
  200e5c:	6e18      	ldr	r0, [r3, #96]	; 0x60
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  200e5e:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
  200e62:	4001      	ands	r1, r0
  200e64:	4329      	orrs	r1, r5
  200e66:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    canp->can->sFilterRegister[0].FR1 = 0;
  200e6a:	f8c2 4240 	str.w	r4, [r2, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
  200e6e:	f8c2 4244 	str.w	r4, [r2, #580]	; 0x244
    canp->can->FM1R = 0;
  200e72:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
    canp->can->FFA1R = 0;
  200e76:	f8c2 4214 	str.w	r4, [r2, #532]	; 0x214
    canp->can->FS1R = 1;
  200e7a:	f8c2 520c 	str.w	r5, [r2, #524]	; 0x20c
    canp->can->FA1R = 1;
  200e7e:	f8c2 521c 	str.w	r5, [r2, #540]	; 0x21c
  canp->can->FMR &= ~CAN_FMR_FINIT;
  200e82:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
  200e86:	f021 0101 	bic.w	r1, r1, #1
  200e8a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    rccDisableCAN3();
  200e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  200e90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  200e94:	641a      	str	r2, [r3, #64]	; 0x40
  200e96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  200e98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  200e9c:	661a      	str	r2, [r3, #96]	; 0x60
  200e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  200ea0:	e7cd      	b.n	200e3e <can_lld_set_filters.constprop.22+0x3e>
    rccEnableCAN1(true);
  200ea2:	4a27      	ldr	r2, [pc, #156]	; (200f40 <can_lld_set_filters.constprop.22+0x140>)
    canp->can->FS1R = 1;
  200ea4:	2601      	movs	r6, #1
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  200ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
  200ea8:	f640 6401 	movw	r4, #3585	; 0xe01
    rccEnableCAN1(true);
  200eac:	6c15      	ldr	r5, [r2, #64]	; 0x40
    canp->can->sFilterRegister[0].FR1 = 0;
  200eae:	2100      	movs	r1, #0
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  200eb0:	4f24      	ldr	r7, [pc, #144]	; (200f44 <can_lld_set_filters.constprop.22+0x144>)
    rccEnableCAN1(true);
  200eb2:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
  200eb6:	6415      	str	r5, [r2, #64]	; 0x40
  200eb8:	6e15      	ldr	r5, [r2, #96]	; 0x60
  200eba:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
  200ebe:	6615      	str	r5, [r2, #96]	; 0x60
  200ec0:	6e10      	ldr	r0, [r2, #96]	; 0x60
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | CAN_FMR_FINIT;
  200ec2:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
  200ec6:	4038      	ands	r0, r7
  200ec8:	4330      	orrs	r0, r6
  200eca:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
    canp->can->FMR = (canp->can->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
  200ece:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
  200ed2:	4038      	ands	r0, r7
  200ed4:	4304      	orrs	r4, r0
  200ed6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    canp->can->sFilterRegister[0].FR1 = 0;
  200eda:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
    canp->can->sFilterRegister[0].FR2 = 0;
  200ede:	f8c3 1244 	str.w	r1, [r3, #580]	; 0x244
      canp->can->sFilterRegister[can2sb].FR1 = 0;
  200ee2:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
      canp->can->sFilterRegister[can2sb].FR2 = 0;
  200ee6:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
    canp->can->FM1R = 0;
  200eea:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
    canp->can->FFA1R = 0;
  200eee:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
    canp->can->FS1R = 1;
  200ef2:	f8c3 620c 	str.w	r6, [r3, #524]	; 0x20c
    canp->can->FA1R = 1;
  200ef6:	f8c3 621c 	str.w	r6, [r3, #540]	; 0x21c
      canp->can->FS1R |= 1 << can2sb;
  200efa:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
  200efe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  200f02:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
      canp->can->FA1R |= 1 << can2sb;
  200f06:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
  200f0a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  200f0e:	f8c3 121c 	str.w	r1, [r3, #540]	; 0x21c
  canp->can->FMR &= ~CAN_FMR_FINIT;
  200f12:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
  200f16:	f021 0101 	bic.w	r1, r1, #1
  200f1a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    rccDisableCAN1();
  200f1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
  200f20:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  200f24:	6413      	str	r3, [r2, #64]	; 0x40
  200f26:	6e13      	ldr	r3, [r2, #96]	; 0x60
  200f28:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  200f2c:	6613      	str	r3, [r2, #96]	; 0x60
  200f2e:	6e13      	ldr	r3, [r2, #96]	; 0x60
  200f30:	e785      	b.n	200e3e <can_lld_set_filters.constprop.22+0x3e>
  200f32:	bf00      	nop
  200f34:	2000082c 	.word	0x2000082c
  200f38:	20000800 	.word	0x20000800
  200f3c:	20000858 	.word	0x20000858
  200f40:	40023800 	.word	0x40023800
  200f44:	ffff0000 	.word	0xffff0000
	...

00200f50 <chTMStartMeasurementX.constprop.6>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200f50:	4b01      	ldr	r3, [pc, #4]	; (200f58 <chTMStartMeasurementX.constprop.6+0x8>)
  200f52:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
  200f54:	6083      	str	r3, [r0, #8]
}
  200f56:	4770      	bx	lr
  200f58:	e0001000 	.word	0xe0001000
  200f5c:	00000000 	.word	0x00000000

00200f60 <Thread_GPS>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
  200f60:	4b02      	ldr	r3, [pc, #8]	; (200f6c <Thread_GPS+0xc>)
  200f62:	4a03      	ldr	r2, [pc, #12]	; (200f70 <Thread_GPS+0x10>)
  200f64:	699b      	ldr	r3, [r3, #24]
  200f66:	619a      	str	r2, [r3, #24]
  200f68:	e7fe      	b.n	200f68 <Thread_GPS+0x8>
  200f6a:	bf00      	nop
  200f6c:	20000be4 	.word	0x20000be4
  200f70:	08003894 	.word	0x08003894
	...

00200f80 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
  200f80:	b4f0      	push	{r4, r5, r6, r7}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  200f82:	2320      	movs	r3, #32
  200f84:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200f88:	4d0d      	ldr	r5, [pc, #52]	; (200fc0 <chCoreAllocAlignedWithOffset+0x40>)
  200f8a:	1e4e      	subs	r6, r1, #1
  size = MEM_ALIGN_NEXT(size, align);
  200f8c:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200f8e:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
  200f90:	1983      	adds	r3, r0, r6
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  200f92:	686c      	ldr	r4, [r5, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200f94:	18b8      	adds	r0, r7, r2
  size = MEM_ALIGN_NEXT(size, align);
  200f96:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200f98:	4430      	add	r0, r6
  200f9a:	4008      	ands	r0, r1
  next = p + size;
  200f9c:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  200f9e:	42a3      	cmp	r3, r4
  200fa0:	d807      	bhi.n	200fb2 <chCoreAllocAlignedWithOffset+0x32>
  200fa2:	429f      	cmp	r7, r3
  200fa4:	d805      	bhi.n	200fb2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
  200fa6:	602b      	str	r3, [r5, #0]
  200fa8:	2300      	movs	r3, #0
  200faa:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
  200fae:	bcf0      	pop	{r4, r5, r6, r7}
  200fb0:	4770      	bx	lr
    return NULL;
  200fb2:	2000      	movs	r0, #0
  200fb4:	2300      	movs	r3, #0
  200fb6:	f383 8811 	msr	BASEPRI, r3
}
  200fba:	bcf0      	pop	{r4, r5, r6, r7}
  200fbc:	4770      	bx	lr
  200fbe:	bf00      	nop
  200fc0:	20000d78 	.word	0x20000d78
	...

00200fd0 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
  200fd0:	4a02      	ldr	r2, [pc, #8]	; (200fdc <notify3+0xc>)
  200fd2:	6813      	ldr	r3, [r2, #0]
  200fd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  200fd8:	6013      	str	r3, [r2, #0]
}
  200fda:	4770      	bx	lr
  200fdc:	40004800 	.word	0x40004800

00200fe0 <notify4>:

#if STM32_SERIAL_USE_UART4 || defined(__DOXYGEN__)
static void notify4(io_queue_t *qp) {

  (void)qp;
  UART4->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
  200fe0:	4a02      	ldr	r2, [pc, #8]	; (200fec <notify4+0xc>)
  200fe2:	6813      	ldr	r3, [r2, #0]
  200fe4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  200fe8:	6013      	str	r3, [r2, #0]
}
  200fea:	4770      	bx	lr
  200fec:	40004c00 	.word	0x40004c00

00200ff0 <icuovfcb1>:
  CAN_BTR_TS1(8) | CAN_BTR_BRP(7)
};

static void icuwidthcb1(ICUDriver *icup) {palClearPad (GPIOE, GPIOE_ARD_D5);last_width1 = icuGetWidthX(icup);}
static void icuperiodcb1(ICUDriver *icup) {palSetPad (GPIOE, GPIOE_ARD_D5);last_period1 = icuGetPeriodX(icup);}
static void icuovfcb1(ICUDriver *icup) {(void)icup;}
  200ff0:	4770      	bx	lr
  200ff2:	bf00      	nop
	...

00201000 <icuovfcb3>:
  201000:	4770      	bx	lr
  201002:	bf00      	nop
	...

00201010 <icuperiodcb3>:

static void icuwidthcb3(ICUDriver *icup) {last_width3 = icuGetWidthX(icup);}
static void icuperiodcb3(ICUDriver *icup) {last_period3 = icuGetPeriodX(icup);}
  201010:	6943      	ldr	r3, [r0, #20]
  201012:	681b      	ldr	r3, [r3, #0]
  201014:	4770      	bx	lr
  201016:	bf00      	nop
	...

00201020 <icuwidthcb3>:
static void icuwidthcb3(ICUDriver *icup) {last_width3 = icuGetWidthX(icup);}
  201020:	6903      	ldr	r3, [r0, #16]
  201022:	681b      	ldr	r3, [r3, #0]
  201024:	4770      	bx	lr
  201026:	bf00      	nop
	...

00201030 <icuperiodcb1>:
static void icuperiodcb1(ICUDriver *icup) {palSetPad (GPIOE, GPIOE_ARD_D5);last_period1 = icuGetPeriodX(icup);}
  201030:	6943      	ldr	r3, [r0, #20]
  201032:	f44f 6100 	mov.w	r1, #2048	; 0x800
  201036:	4a02      	ldr	r2, [pc, #8]	; (201040 <icuperiodcb1+0x10>)
  201038:	8311      	strh	r1, [r2, #24]
  20103a:	681b      	ldr	r3, [r3, #0]
  20103c:	4770      	bx	lr
  20103e:	bf00      	nop
  201040:	40021000 	.word	0x40021000
	...

00201050 <icuwidthcb1>:
static void icuwidthcb1(ICUDriver *icup) {palClearPad (GPIOE, GPIOE_ARD_D5);last_width1 = icuGetWidthX(icup);}
  201050:	6903      	ldr	r3, [r0, #16]
  201052:	f44f 6100 	mov.w	r1, #2048	; 0x800
  201056:	4a02      	ldr	r2, [pc, #8]	; (201060 <icuwidthcb1+0x10>)
  201058:	8351      	strh	r1, [r2, #26]
  20105a:	681b      	ldr	r3, [r3, #0]
  20105c:	4770      	bx	lr
  20105e:	bf00      	nop
  201060:	40021000 	.word	0x40021000
	...

00201070 <_port_irq_epilogue>:
  201070:	2320      	movs	r3, #32
  201072:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  201076:	4b0f      	ldr	r3, [pc, #60]	; (2010b4 <_port_irq_epilogue+0x44>)
  201078:	685b      	ldr	r3, [r3, #4]
  20107a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  20107e:	d102      	bne.n	201086 <_port_irq_epilogue+0x16>
  201080:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
  201084:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  201086:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
  20108a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  20108e:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  201092:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  201096:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  20109a:	4a07      	ldr	r2, [pc, #28]	; (2010b8 <_port_irq_epilogue+0x48>)
  20109c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  20109e:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
  2010a0:	6889      	ldr	r1, [r1, #8]
  2010a2:	6892      	ldr	r2, [r2, #8]
  2010a4:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  2010a6:	bf8c      	ite	hi
  2010a8:	4a04      	ldrhi	r2, [pc, #16]	; (2010bc <_port_irq_epilogue+0x4c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  2010aa:	4a05      	ldrls	r2, [pc, #20]	; (2010c0 <_port_irq_epilogue+0x50>)
  2010ac:	f843 2c08 	str.w	r2, [r3, #-8]
  2010b0:	4770      	bx	lr
  2010b2:	bf00      	nop
  2010b4:	e000ed00 	.word	0xe000ed00
  2010b8:	20000be4 	.word	0x20000be4
  2010bc:	00200301 	.word	0x00200301
  2010c0:	00200304 	.word	0x00200304
	...

002010d0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
  2010d0:	b4f0      	push	{r4, r5, r6, r7}
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2010d2:	4d0a      	ldr	r5, [pc, #40]	; (2010fc <chCoreAllocAlignedI+0x2c>)
  size = MEM_ALIGN_NEXT(size, align);
  2010d4:	1e4b      	subs	r3, r1, #1
  2010d6:	424e      	negs	r6, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2010d8:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
  2010da:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  2010dc:	686c      	ldr	r4, [r5, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2010de:	1e7a      	subs	r2, r7, #1
  size = MEM_ALIGN_NEXT(size, align);
  2010e0:	4033      	ands	r3, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2010e2:	1850      	adds	r0, r2, r1
  2010e4:	4030      	ands	r0, r6
  next = p + size;
  2010e6:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  2010e8:	42a3      	cmp	r3, r4
  2010ea:	d804      	bhi.n	2010f6 <chCoreAllocAlignedI+0x26>
  2010ec:	429f      	cmp	r7, r3
  2010ee:	d802      	bhi.n	2010f6 <chCoreAllocAlignedI+0x26>
  ch_memcore.nextmem = next;
  2010f0:	602b      	str	r3, [r5, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
  2010f2:	bcf0      	pop	{r4, r5, r6, r7}
  2010f4:	4770      	bx	lr
    return NULL;
  2010f6:	2000      	movs	r0, #0
  2010f8:	bcf0      	pop	{r4, r5, r6, r7}
  2010fa:	4770      	bx	lr
  2010fc:	20000d78 	.word	0x20000d78

00201100 <chTMStopMeasurementX>:
  201100:	4b0f      	ldr	r3, [pc, #60]	; (201140 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  201102:	6882      	ldr	r2, [r0, #8]
  201104:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201106:	490f      	ldr	r1, [pc, #60]	; (201144 <chTMStopMeasurementX+0x44>)
  tmp->last = (now - tmp->last) - offset;
  201108:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  20110a:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  20110c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  201110:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  tmp->n++;
  201112:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  201114:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  201116:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  201118:	6083      	str	r3, [r0, #8]
  tmp->n++;
  20111a:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  20111c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  201120:	eb14 0b03 	adds.w	fp, r4, r3
  201124:	f145 0c00 	adc.w	ip, r5, #0
  if (tmp->last > tmp->worst) {
  201128:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  20112a:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  20112c:	bf88      	it	hi
  20112e:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  201130:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  201132:	e9c0 bc04 	strd	fp, ip, [r0, #16]
    tmp->best = tmp->last;
  201136:	bf38      	it	cc
  201138:	6003      	strcc	r3, [r0, #0]
}
  20113a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
  20113e:	4770      	bx	lr
  201140:	e0001000 	.word	0xe0001000
  201144:	20000be4 	.word	0x20000be4
	...

00201150 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  201150:	2320      	movs	r3, #32
  201152:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
  201156:	f890 3020 	ldrb.w	r3, [r0, #32]
  20115a:	2b07      	cmp	r3, #7
  20115c:	d80e      	bhi.n	20117c <wakeup+0x2c>
  20115e:	e8df f003 	tbb	[pc, r3]
  201162:	0d28      	.short	0x0d28
  201164:	0408240d 	.word	0x0408240d
  201168:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
  20116a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20116c:	6893      	ldr	r3, [r2, #8]
  20116e:	3301      	adds	r3, #1
  201170:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  201172:	e9d0 2300 	ldrd	r2, r3, [r0]
  201176:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  201178:	6802      	ldr	r2, [r0, #0]
  20117a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20117c:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
  20117e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  201180:	4b0e      	ldr	r3, [pc, #56]	; (2011bc <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  201182:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  201186:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
  201188:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  20118c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20118e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201190:	689a      	ldr	r2, [r3, #8]
  201192:	428a      	cmp	r2, r1
  201194:	d2fb      	bcs.n	20118e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  201196:	685a      	ldr	r2, [r3, #4]
  201198:	2100      	movs	r1, #0
  20119a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
  20119e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  2011a0:	6058      	str	r0, [r3, #4]
  2011a2:	f381 8811 	msr	BASEPRI, r1
}
  2011a6:	bc10      	pop	{r4}
  2011a8:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  2011aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2011ac:	2200      	movs	r2, #0
  2011ae:	601a      	str	r2, [r3, #0]
  2011b0:	e7e4      	b.n	20117c <wakeup+0x2c>
  2011b2:	2300      	movs	r3, #0
  2011b4:	f383 8811 	msr	BASEPRI, r3
  2011b8:	4770      	bx	lr
  2011ba:	bf00      	nop
  2011bc:	20000be4 	.word	0x20000be4

002011c0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  2011c0:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
  2011c2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
  2011c4:	4b07      	ldr	r3, [pc, #28]	; (2011e4 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
  2011c6:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
  2011c8:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
  2011cc:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  2011ce:	689a      	ldr	r2, [r3, #8]
  2011d0:	4282      	cmp	r2, r0
  2011d2:	d2fb      	bcs.n	2011cc <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
  2011d4:	685a      	ldr	r2, [r3, #4]
}
  2011d6:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
  2011d8:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
  2011dc:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
  2011de:	6059      	str	r1, [r3, #4]
}
  2011e0:	4770      	bx	lr
  2011e2:	bf00      	nop
  2011e4:	20000be4 	.word	0x20000be4
	...

002011f0 <chThdDequeueAllI.constprop.13>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
  2011f0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
  2011f2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
  2011f4:	4298      	cmp	r0, r3
  2011f6:	d00b      	beq.n	201210 <chThdDequeueAllI.constprop.13+0x20>
  2011f8:	4604      	mov	r4, r0

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  2011fa:	2500      	movs	r5, #0
  tqp->next             = tp->queue.next;
  2011fc:	681a      	ldr	r2, [r3, #0]
  (void) chSchReadyI(tp);
  2011fe:	4618      	mov	r0, r3
  201200:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201202:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
  201204:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201206:	f7ff ffdb 	bl	2011c0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
  20120a:	6823      	ldr	r3, [r4, #0]
  20120c:	42a3      	cmp	r3, r4
  20120e:	d1f5      	bne.n	2011fc <chThdDequeueAllI.constprop.13+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
  201210:	bd38      	pop	{r3, r4, r5, pc}
  201212:	bf00      	nop
	...

00201220 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  201220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  201222:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  201224:	42a0      	cmp	r0, r4
  201226:	d021      	beq.n	20126c <chEvtBroadcastFlagsI+0x4c>
  201228:	460d      	mov	r5, r1
  20122a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  20122c:	2600      	movs	r6, #0
  20122e:	e004      	b.n	20123a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  201230:	2a0b      	cmp	r2, #11
  201232:	d01c      	beq.n	20126e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
  201234:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201236:	42a7      	cmp	r7, r4
  201238:	d018      	beq.n	20126c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
  20123a:	68e3      	ldr	r3, [r4, #12]
  20123c:	432b      	orrs	r3, r5
  20123e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  201240:	b115      	cbz	r5, 201248 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
  201242:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  201244:	421d      	tst	r5, r3
  201246:	d0f5      	beq.n	201234 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
  201248:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
  20124c:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  20124e:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  201252:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  201254:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  201256:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  201258:	d1ea      	bne.n	201230 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  20125a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  20125c:	4213      	tst	r3, r2
  20125e:	d0e9      	beq.n	201234 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
  201260:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  201262:	f7ff ffad 	bl	2011c0 <chSchReadyI>
    elp = elp->next;
  201266:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201268:	42a7      	cmp	r7, r4
  20126a:	d1e6      	bne.n	20123a <chEvtBroadcastFlagsI+0x1a>
}
  20126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  20126e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  201270:	ea32 0303 	bics.w	r3, r2, r3
  201274:	d1de      	bne.n	201234 <chEvtBroadcastFlagsI+0x14>
  201276:	e7f3      	b.n	201260 <chEvtBroadcastFlagsI+0x40>
	...

00201280 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  201280:	e7fe      	b.n	201280 <_idle_thread>
  201282:	bf00      	nop
	...

00201290 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
  201290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
  201294:	6d46      	ldr	r6, [r0, #84]	; 0x54
static void serve_interrupt(SerialDriver *sdp) {
  201296:	4604      	mov	r4, r0
  uint32_t cr1 = u->CR1;
  201298:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20129a:	69f5      	ldr	r5, [r6, #28]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  20129c:	0728      	lsls	r0, r5, #28
  u->ICR = isr;
  20129e:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  2012a0:	d153      	bne.n	20134a <serve_interrupt+0xba>
  if (isr & USART_ISR_LBDF) {
  2012a2:	05ea      	lsls	r2, r5, #23
  2012a4:	d445      	bmi.n	201332 <serve_interrupt+0xa2>
  if (isr & USART_ISR_RXNE) {
  2012a6:	06ab      	lsls	r3, r5, #26
  2012a8:	d414      	bmi.n	2012d4 <serve_interrupt+0x44>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
  2012aa:	0638      	lsls	r0, r7, #24
  2012ac:	d501      	bpl.n	2012b2 <serve_interrupt+0x22>
  2012ae:	0629      	lsls	r1, r5, #24
  2012b0:	d467      	bmi.n	201382 <serve_interrupt+0xf2>
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
  2012b2:	067a      	lsls	r2, r7, #25
  2012b4:	d50c      	bpl.n	2012d0 <serve_interrupt+0x40>
  2012b6:	066b      	lsls	r3, r5, #25
  2012b8:	d50a      	bpl.n	2012d0 <serve_interrupt+0x40>
  2012ba:	2320      	movs	r3, #32
  2012bc:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
  2012c0:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
  2012c4:	429a      	cmp	r2, r3
  2012c6:	f000 8091 	beq.w	2013ec <serve_interrupt+0x15c>
  2012ca:	2300      	movs	r3, #0
  2012cc:	f383 8811 	msr	BASEPRI, r3
}
  2012d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  2012d4:	2320      	movs	r3, #32
  2012d6:	f383 8811 	msr	BASEPRI, r3
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2012da:	6a72      	ldr	r2, [r6, #36]	; 0x24
  2012dc:	f894 805c 	ldrb.w	r8, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
  2012e0:	6963      	ldr	r3, [r4, #20]
  2012e2:	ea08 0802 	and.w	r8, r8, r2
  2012e6:	2b00      	cmp	r3, #0
  2012e8:	d072      	beq.n	2013d0 <serve_interrupt+0x140>
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
  2012ea:	6a23      	ldr	r3, [r4, #32]
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  2012ec:	f104 010c 	add.w	r1, r4, #12
  2012f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  2012f2:	4293      	cmp	r3, r2
  2012f4:	d071      	beq.n	2013da <serve_interrupt+0x14a>
    iqp->q_counter++;
  2012f6:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
  2012f8:	1c58      	adds	r0, r3, #1
    iqp->q_counter++;
  2012fa:	3201      	adds	r2, #1
    *iqp->q_wrptr++ = b;
  2012fc:	6220      	str	r0, [r4, #32]
    iqp->q_counter++;
  2012fe:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
  201300:	f883 8000 	strb.w	r8, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
  201304:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
  201308:	429a      	cmp	r2, r3
  20130a:	d301      	bcc.n	201310 <serve_interrupt+0x80>
      iqp->q_wrptr = iqp->q_buffer;
  20130c:	69a3      	ldr	r3, [r4, #24]
  20130e:	6223      	str	r3, [r4, #32]
  201310:	68e3      	ldr	r3, [r4, #12]
  if (queue_notempty(tqp)) {
  201312:	4299      	cmp	r1, r3
  201314:	d009      	beq.n	20132a <serve_interrupt+0x9a>
  tqp->next             = tp->queue.next;
  201316:	681a      	ldr	r2, [r3, #0]
  tp->u.rdymsg = msg;
  201318:	f04f 0c00 	mov.w	ip, #0
  (void) chSchReadyI(tp);
  20131c:	4618      	mov	r0, r3
  20131e:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  201320:	6051      	str	r1, [r2, #4]
  tp->u.rdymsg = msg;
  201322:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201326:	f7ff ff4b 	bl	2011c0 <chSchReadyI>
  20132a:	2300      	movs	r3, #0
  20132c:	f383 8811 	msr	BASEPRI, r3
  201330:	e7bb      	b.n	2012aa <serve_interrupt+0x1a>
  201332:	2320      	movs	r3, #32
  201334:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  201338:	f44f 7100 	mov.w	r1, #512	; 0x200
  20133c:	1d20      	adds	r0, r4, #4
  20133e:	f7ff ff6f 	bl	201220 <chEvtBroadcastFlagsI>
  201342:	2300      	movs	r3, #0
  201344:	f383 8811 	msr	BASEPRI, r3
  201348:	e7ad      	b.n	2012a6 <serve_interrupt+0x16>
    sts |= SD_OVERRUN_ERROR;
  20134a:	f015 0f08 	tst.w	r5, #8
  20134e:	bf0c      	ite	eq
  201350:	2100      	moveq	r1, #0
  201352:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
  201354:	07ea      	lsls	r2, r5, #31
    sts |= SD_PARITY_ERROR;
  201356:	bf48      	it	mi
  201358:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
  20135c:	07ab      	lsls	r3, r5, #30
  20135e:	f04f 0320 	mov.w	r3, #32
    sts |= SD_FRAMING_ERROR;
  201362:	bf48      	it	mi
  201364:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
  201368:	0768      	lsls	r0, r5, #29
    sts |= SD_NOISE_ERROR;
  20136a:	bf48      	it	mi
  20136c:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
  201370:	f383 8811 	msr	BASEPRI, r3
  201374:	1d20      	adds	r0, r4, #4
  201376:	f7ff ff53 	bl	201220 <chEvtBroadcastFlagsI>
  20137a:	2300      	movs	r3, #0
  20137c:	f383 8811 	msr	BASEPRI, r3
  201380:	e78f      	b.n	2012a2 <serve_interrupt+0x12>
  201382:	2320      	movs	r3, #32
  201384:	f383 8811 	msr	BASEPRI, r3
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
  201388:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b = oqGetI(&sdp->oqueue);
  20138a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  20138e:	6c62      	ldr	r2, [r4, #68]	; 0x44
  201390:	429a      	cmp	r2, r3
  201392:	d037      	beq.n	201404 <serve_interrupt+0x174>
    uint8_t b;

    oqp->q_counter++;
  201394:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
  201396:	1c58      	adds	r0, r3, #1
    if (oqp->q_rdptr >= oqp->q_top) {
  201398:	6c21      	ldr	r1, [r4, #64]	; 0x40
    oqp->q_counter++;
  20139a:	3201      	adds	r2, #1
    b = *oqp->q_rdptr++;
  20139c:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
  20139e:	4288      	cmp	r0, r1
    oqp->q_counter++;
  2013a0:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
  2013a2:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
  2013a6:	d301      	bcc.n	2013ac <serve_interrupt+0x11c>
      oqp->q_rdptr = oqp->q_buffer;
  2013a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  2013aa:	64a3      	str	r3, [r4, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
  2013ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
  2013ae:	459c      	cmp	ip, r3
  2013b0:	d008      	beq.n	2013c4 <serve_interrupt+0x134>
  tqp->next             = tp->queue.next;
  2013b2:	681a      	ldr	r2, [r3, #0]
  tp->u.rdymsg = msg;
  2013b4:	2100      	movs	r1, #0
  (void) chSchReadyI(tp);
  2013b6:	4618      	mov	r0, r3
  2013b8:	6322      	str	r2, [r4, #48]	; 0x30
  tqp->next->queue.prev = (thread_t *)tqp;
  2013ba:	f8c2 c004 	str.w	ip, [r2, #4]
  tp->u.rdymsg = msg;
  2013be:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2013c0:	f7ff fefe 	bl	2011c0 <chSchReadyI>
      u->TDR = b;
  2013c4:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  2013c8:	2300      	movs	r3, #0
  2013ca:	f383 8811 	msr	BASEPRI, r3
  2013ce:	e770      	b.n	2012b2 <serve_interrupt+0x22>
  2013d0:	2104      	movs	r1, #4
  2013d2:	1860      	adds	r0, r4, r1
  2013d4:	f7ff ff24 	bl	201220 <chEvtBroadcastFlagsI>
  2013d8:	e787      	b.n	2012ea <serve_interrupt+0x5a>
  if (!iqIsFullI(iqp)) {
  2013da:	6962      	ldr	r2, [r4, #20]
  2013dc:	2a00      	cmp	r2, #0
  2013de:	d08a      	beq.n	2012f6 <serve_interrupt+0x66>
  2013e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  2013e4:	1d20      	adds	r0, r4, #4
  2013e6:	f7ff ff1b 	bl	201220 <chEvtBroadcastFlagsI>
  2013ea:	e79e      	b.n	20132a <serve_interrupt+0x9a>
    if (oqIsEmptyI(&sdp->oqueue)) {
  2013ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  2013ee:	2b00      	cmp	r3, #0
  2013f0:	f43f af6b 	beq.w	2012ca <serve_interrupt+0x3a>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
  2013f4:	f027 0740 	bic.w	r7, r7, #64	; 0x40
  2013f8:	1d20      	adds	r0, r4, #4
  2013fa:	2110      	movs	r1, #16
  2013fc:	f7ff ff10 	bl	201220 <chEvtBroadcastFlagsI>
  201400:	6037      	str	r7, [r6, #0]
  201402:	e762      	b.n	2012ca <serve_interrupt+0x3a>
  if (!oqIsEmptyI(oqp)) {
  201404:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  201406:	2a00      	cmp	r2, #0
  201408:	d0c4      	beq.n	201394 <serve_interrupt+0x104>
  20140a:	2108      	movs	r1, #8
  20140c:	1d20      	adds	r0, r4, #4
  20140e:	f7ff ff07 	bl	201220 <chEvtBroadcastFlagsI>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
  201412:	f027 0380 	bic.w	r3, r7, #128	; 0x80
  201416:	6033      	str	r3, [r6, #0]
  201418:	e7d6      	b.n	2013c8 <serve_interrupt+0x138>
  20141a:	bf00      	nop
  20141c:	0000      	movs	r0, r0
	...

00201420 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
  201420:	6983      	ldr	r3, [r0, #24]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  201422:	b570      	push	{r4, r5, r6, lr}
  sr  = pwmp->tim->SR;
  201424:	691a      	ldr	r2, [r3, #16]
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  201426:	4605      	mov	r5, r0
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  201428:	68dc      	ldr	r4, [r3, #12]
  20142a:	4014      	ands	r4, r2
  20142c:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  20142e:	07a6      	lsls	r6, r4, #30
  pwmp->tim->SR = ~sr;
  201430:	ea6f 0202 	mvn.w	r2, r2
  201434:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  201436:	d503      	bpl.n	201440 <pwm_lld_serve_interrupt+0x20>
      (pwmp->config->channels[0].callback != NULL))
  201438:	6843      	ldr	r3, [r0, #4]
  20143a:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  20143c:	b103      	cbz	r3, 201440 <pwm_lld_serve_interrupt+0x20>
    pwmp->config->channels[0].callback(pwmp);
  20143e:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  201440:	0760      	lsls	r0, r4, #29
  201442:	d504      	bpl.n	20144e <pwm_lld_serve_interrupt+0x2e>
      (pwmp->config->channels[1].callback != NULL))
  201444:	686b      	ldr	r3, [r5, #4]
  201446:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  201448:	b10b      	cbz	r3, 20144e <pwm_lld_serve_interrupt+0x2e>
    pwmp->config->channels[1].callback(pwmp);
  20144a:	4628      	mov	r0, r5
  20144c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  20144e:	0721      	lsls	r1, r4, #28
  201450:	d504      	bpl.n	20145c <pwm_lld_serve_interrupt+0x3c>
      (pwmp->config->channels[2].callback != NULL))
  201452:	686b      	ldr	r3, [r5, #4]
  201454:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  201456:	b10b      	cbz	r3, 20145c <pwm_lld_serve_interrupt+0x3c>
    pwmp->config->channels[2].callback(pwmp);
  201458:	4628      	mov	r0, r5
  20145a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  20145c:	06e2      	lsls	r2, r4, #27
  20145e:	d504      	bpl.n	20146a <pwm_lld_serve_interrupt+0x4a>
      (pwmp->config->channels[3].callback != NULL))
  201460:	686b      	ldr	r3, [r5, #4]
  201462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  201464:	b10b      	cbz	r3, 20146a <pwm_lld_serve_interrupt+0x4a>
    pwmp->config->channels[3].callback(pwmp);
  201466:	4628      	mov	r0, r5
  201468:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  20146a:	07e3      	lsls	r3, r4, #31
  20146c:	d506      	bpl.n	20147c <pwm_lld_serve_interrupt+0x5c>
  20146e:	686b      	ldr	r3, [r5, #4]
  201470:	689b      	ldr	r3, [r3, #8]
  201472:	b11b      	cbz	r3, 20147c <pwm_lld_serve_interrupt+0x5c>
    pwmp->config->callback(pwmp);
  201474:	4628      	mov	r0, r5
}
  201476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->callback(pwmp);
  20147a:	4718      	bx	r3
}
  20147c:	bd70      	pop	{r4, r5, r6, pc}
  20147e:	bf00      	nop

00201480 <pwm_lld_start>:
void pwm_lld_start(PWMDriver *pwmp) {
  201480:	b4f0      	push	{r4, r5, r6, r7}
  if (pwmp->state == PWM_STOP) {
  201482:	7802      	ldrb	r2, [r0, #0]
  201484:	6983      	ldr	r3, [r0, #24]
  201486:	2a01      	cmp	r2, #1
  201488:	d058      	beq.n	20153c <pwm_lld_start+0xbc>
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
  20148a:	2200      	movs	r2, #0
  20148c:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  20148e:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  201490:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
  201492:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
  201494:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
  201496:	7c01      	ldrb	r1, [r0, #16]
  201498:	2904      	cmp	r1, #4
  20149a:	d84c      	bhi.n	201536 <pwm_lld_start+0xb6>
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  20149c:	2200      	movs	r2, #0
  20149e:	625a      	str	r2, [r3, #36]	; 0x24
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  2014a0:	6841      	ldr	r1, [r0, #4]
  2014a2:	6944      	ldr	r4, [r0, #20]
  2014a4:	680e      	ldr	r6, [r1, #0]
  pwmp->tim->ARR  = pwmp->period - 1;
  2014a6:	6885      	ldr	r5, [r0, #8]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2014a8:	68ca      	ldr	r2, [r1, #12]
  pwmp->tim->ARR  = pwmp->period - 1;
  2014aa:	3d01      	subs	r5, #1
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2014ac:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  2014b0:	fbb4 f0f6 	udiv	r0, r4, r6
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2014b4:	2a01      	cmp	r2, #1
  pwmp->tim->CR2  = pwmp->config->cr2;
  2014b6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  2014b8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
  pwmp->tim->PSC  = psc;
  2014bc:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
  2014be:	62dd      	str	r5, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
  2014c0:	605c      	str	r4, [r3, #4]
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
  2014c2:	d048      	beq.n	201556 <pwm_lld_start+0xd6>
  2014c4:	2a02      	cmp	r2, #2
  2014c6:	d134      	bne.n	201532 <pwm_lld_start+0xb2>
    ccer |= STM32_TIM_CCER_CC1E;
  2014c8:	f042 0201 	orr.w	r2, r2, #1
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  2014cc:	6948      	ldr	r0, [r1, #20]
  2014ce:	f000 000f 	and.w	r0, r0, #15
  2014d2:	2801      	cmp	r0, #1
  2014d4:	d02a      	beq.n	20152c <pwm_lld_start+0xac>
  2014d6:	2802      	cmp	r0, #2
  2014d8:	d026      	beq.n	201528 <pwm_lld_start+0xa8>
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  2014da:	69c8      	ldr	r0, [r1, #28]
  2014dc:	f000 000f 	and.w	r0, r0, #15
  2014e0:	2801      	cmp	r0, #1
  2014e2:	d01e      	beq.n	201522 <pwm_lld_start+0xa2>
  2014e4:	2802      	cmp	r0, #2
  2014e6:	d01a      	beq.n	20151e <pwm_lld_start+0x9e>
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
  2014e8:	6a48      	ldr	r0, [r1, #36]	; 0x24
  2014ea:	f000 000f 	and.w	r0, r0, #15
  2014ee:	2801      	cmp	r0, #1
  2014f0:	d003      	beq.n	2014fa <pwm_lld_start+0x7a>
  2014f2:	2802      	cmp	r0, #2
  2014f4:	d103      	bne.n	2014fe <pwm_lld_start+0x7e>
    ccer |= STM32_TIM_CCER_CC4P;
  2014f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    ccer |= STM32_TIM_CCER_CC4E;
  2014fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  2014fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  201500:	2501      	movs	r5, #1
  pwmp->tim->CCER  = ccer;
  201502:	621a      	str	r2, [r3, #32]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  201504:	2400      	movs	r4, #0
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
  201506:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  20150a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  20150e:	2285      	movs	r2, #133	; 0x85
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  201510:	615d      	str	r5, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  201512:	611c      	str	r4, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
  201514:	60d9      	str	r1, [r3, #12]
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
  201516:	6458      	str	r0, [r3, #68]	; 0x44
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
  201518:	601a      	str	r2, [r3, #0]
}
  20151a:	bcf0      	pop	{r4, r5, r6, r7}
  20151c:	4770      	bx	lr
    ccer |= STM32_TIM_CCER_CC3P;
  20151e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    ccer |= STM32_TIM_CCER_CC3E;
  201522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  201526:	e7df      	b.n	2014e8 <pwm_lld_start+0x68>
    ccer |= STM32_TIM_CCER_CC2P;
  201528:	f042 0220 	orr.w	r2, r2, #32
    ccer |= STM32_TIM_CCER_CC2E;
  20152c:	f042 0210 	orr.w	r2, r2, #16
  201530:	e7d3      	b.n	2014da <pwm_lld_start+0x5a>
  ccer = 0;
  201532:	2200      	movs	r2, #0
  201534:	e7ca      	b.n	2014cc <pwm_lld_start+0x4c>
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
  201536:	659a      	str	r2, [r3, #88]	; 0x58
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
  201538:	65da      	str	r2, [r3, #92]	; 0x5c
  20153a:	e7af      	b.n	20149c <pwm_lld_start+0x1c>
    if (&PWMD8 == pwmp) {
  20153c:	4a2a      	ldr	r2, [pc, #168]	; (2015e8 <pwm_lld_start+0x168>)
  20153e:	4290      	cmp	r0, r2
  201540:	d00b      	beq.n	20155a <pwm_lld_start+0xda>
    if (&PWMD9 == pwmp) {
  201542:	4a2a      	ldr	r2, [pc, #168]	; (2015ec <pwm_lld_start+0x16c>)
  201544:	4290      	cmp	r0, r2
  201546:	d030      	beq.n	2015aa <pwm_lld_start+0x12a>
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  201548:	f646 0268 	movw	r2, #26728	; 0x6868
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  20154c:	4928      	ldr	r1, [pc, #160]	; (2015f0 <pwm_lld_start+0x170>)
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
  20154e:	619a      	str	r2, [r3, #24]
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
  201550:	61da      	str	r2, [r3, #28]
    pwmp->tim->CCMR3 = STM32_TIM_CCMR3_OC5M(6) | STM32_TIM_CCMR3_OC5PE |
  201552:	6559      	str	r1, [r3, #84]	; 0x54
  201554:	e7a4      	b.n	2014a0 <pwm_lld_start+0x20>
  ccer = 0;
  201556:	2200      	movs	r2, #0
  201558:	e7b6      	b.n	2014c8 <pwm_lld_start+0x48>
      rccEnableTIM8(true);
  20155a:	4a26      	ldr	r2, [pc, #152]	; (2015f4 <pwm_lld_start+0x174>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20155c:	2570      	movs	r5, #112	; 0x70
  20155e:	4926      	ldr	r1, [pc, #152]	; (2015f8 <pwm_lld_start+0x178>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201560:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  201564:	6c54      	ldr	r4, [r2, #68]	; 0x44
  201566:	f44f 4780 	mov.w	r7, #16384	; 0x4000
      pwmp->clock = STM32_TIMCLK2;
  20156a:	f8df c090 	ldr.w	ip, [pc, #144]	; 2015fc <pwm_lld_start+0x17c>
      rccEnableTIM8(true);
  20156e:	f044 0402 	orr.w	r4, r4, #2
  201572:	6454      	str	r4, [r2, #68]	; 0x44
  201574:	6e54      	ldr	r4, [r2, #100]	; 0x64
  201576:	f044 0402 	orr.w	r4, r4, #2
  20157a:	6654      	str	r4, [r2, #100]	; 0x64
  20157c:	6e54      	ldr	r4, [r2, #100]	; 0x64
      rccResetTIM8();
  20157e:	6a54      	ldr	r4, [r2, #36]	; 0x24
  201580:	f044 0402 	orr.w	r4, r4, #2
  201584:	6254      	str	r4, [r2, #36]	; 0x24
  201586:	6a54      	ldr	r4, [r2, #36]	; 0x24
  201588:	f024 0402 	bic.w	r4, r4, #2
  20158c:	6254      	str	r4, [r2, #36]	; 0x24
  20158e:	6a52      	ldr	r2, [r2, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201590:	f881 532c 	strb.w	r5, [r1, #812]	; 0x32c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201594:	f8c1 6184 	str.w	r6, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201598:	604e      	str	r6, [r1, #4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20159a:	f881 532e 	strb.w	r5, [r1, #814]	; 0x32e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20159e:	f8c1 7184 	str.w	r7, [r1, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2015a2:	604f      	str	r7, [r1, #4]
      pwmp->clock = STM32_TIMCLK2;
  2015a4:	f8c0 c014 	str.w	ip, [r0, #20]
  2015a8:	e7ce      	b.n	201548 <pwm_lld_start+0xc8>
      rccEnableTIM9(true);
  2015aa:	4a12      	ldr	r2, [pc, #72]	; (2015f4 <pwm_lld_start+0x174>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2015ac:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2015b0:	4911      	ldr	r1, [pc, #68]	; (2015f8 <pwm_lld_start+0x178>)
  2015b2:	2670      	movs	r6, #112	; 0x70
  2015b4:	6c54      	ldr	r4, [r2, #68]	; 0x44
      pwmp->clock = STM32_TIMCLK2;
  2015b6:	4f11      	ldr	r7, [pc, #68]	; (2015fc <pwm_lld_start+0x17c>)
      rccEnableTIM9(true);
  2015b8:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
  2015bc:	6454      	str	r4, [r2, #68]	; 0x44
  2015be:	6e54      	ldr	r4, [r2, #100]	; 0x64
  2015c0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
  2015c4:	6654      	str	r4, [r2, #100]	; 0x64
  2015c6:	6e54      	ldr	r4, [r2, #100]	; 0x64
      rccResetTIM9();
  2015c8:	6a54      	ldr	r4, [r2, #36]	; 0x24
  2015ca:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
  2015ce:	6254      	str	r4, [r2, #36]	; 0x24
  2015d0:	6a54      	ldr	r4, [r2, #36]	; 0x24
  2015d2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  2015d6:	6254      	str	r4, [r2, #36]	; 0x24
  2015d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
  2015da:	f881 6318 	strb.w	r6, [r1, #792]	; 0x318
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2015de:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2015e2:	600d      	str	r5, [r1, #0]
      pwmp->clock = STM32_TIMCLK2;
  2015e4:	6147      	str	r7, [r0, #20]
  2015e6:	e7af      	b.n	201548 <pwm_lld_start+0xc8>
  2015e8:	20000a80 	.word	0x20000a80
  2015ec:	20000a9c 	.word	0x20000a9c
  2015f0:	01016868 	.word	0x01016868
  2015f4:	40023800 	.word	0x40023800
  2015f8:	e000e100 	.word	0xe000e100
  2015fc:	05b8d800 	.word	0x05b8d800

00201600 <pwm_lld_init>:
void pwm_lld_init(void) {
  201600:	b430      	push	{r4, r5}
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  201602:	4a0a      	ldr	r2, [pc, #40]	; (20162c <pwm_lld_init+0x2c>)
  PWMD8.channels = STM32_TIM8_CHANNELS;
  201604:	2106      	movs	r1, #6
  PWMD8.tim = STM32_TIM8;
  201606:	4c0a      	ldr	r4, [pc, #40]	; (201630 <pwm_lld_init+0x30>)
  201608:	2001      	movs	r0, #1
  20160a:	4b0a      	ldr	r3, [pc, #40]	; (201634 <pwm_lld_init+0x34>)
  PWMD9.channels = STM32_TIM9_CHANNELS;
  20160c:	2502      	movs	r5, #2
  PWMD8.channels = STM32_TIM8_CHANNELS;
  20160e:	7411      	strb	r1, [r2, #16]
  pwmp->config   = NULL;
  201610:	2100      	movs	r1, #0
  PWMD8.tim = STM32_TIM8;
  201612:	6194      	str	r4, [r2, #24]
  PWMD9.tim = STM32_TIM9;
  201614:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
  pwmp->state    = PWM_STOP;
  201618:	7010      	strb	r0, [r2, #0]
  20161a:	7018      	strb	r0, [r3, #0]
  PWMD9.channels = STM32_TIM9_CHANNELS;
  20161c:	741d      	strb	r5, [r3, #16]
  PWMD9.tim = STM32_TIM9;
  20161e:	619c      	str	r4, [r3, #24]
  pwmp->config   = NULL;
  201620:	6051      	str	r1, [r2, #4]
  pwmp->enabled  = 0;
  201622:	60d1      	str	r1, [r2, #12]
  pwmp->config   = NULL;
  201624:	6059      	str	r1, [r3, #4]
  pwmp->enabled  = 0;
  201626:	60d9      	str	r1, [r3, #12]
}
  201628:	bc30      	pop	{r4, r5}
  20162a:	4770      	bx	lr
  20162c:	20000a80 	.word	0x20000a80
  201630:	40010400 	.word	0x40010400
  201634:	20000a9c 	.word	0x20000a9c
	...

00201640 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  201640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr;

  sr  = icup->tim->SR;
  201642:	68c3      	ldr	r3, [r0, #12]
void icu_lld_serve_interrupt(ICUDriver *icup) {
  201644:	4604      	mov	r4, r0
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  icup->tim->SR = ~sr;
  if (icup->config->channel == ICU_CHANNEL_1) {
  201646:	6841      	ldr	r1, [r0, #4]
  sr  = icup->tim->SR;
  201648:	691a      	ldr	r2, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  20164a:	68dd      	ldr	r5, [r3, #12]
  20164c:	4015      	ands	r5, r2
  20164e:	b2ea      	uxtb	r2, r5
  201650:	f005 0702 	and.w	r7, r5, #2
  201654:	f005 0604 	and.w	r6, r5, #4
  icup->tim->SR = ~sr;
  201658:	43d2      	mvns	r2, r2
  20165a:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
  20165c:	7d0b      	ldrb	r3, [r1, #20]
  20165e:	b96b      	cbnz	r3, 20167c <icu_lld_serve_interrupt+0x3c>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  201660:	b34e      	cbz	r6, 2016b6 <icu_lld_serve_interrupt+0x76>
      _icu_isr_invoke_width_cb(icup);
  201662:	7803      	ldrb	r3, [r0, #0]
  201664:	2b04      	cmp	r3, #4
  201666:	d023      	beq.n	2016b0 <icu_lld_serve_interrupt+0x70>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  201668:	b977      	cbnz	r7, 201688 <icu_lld_serve_interrupt+0x48>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
      _icu_isr_invoke_width_cb(icup);
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
      _icu_isr_invoke_period_cb(icup);
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
  20166a:	07eb      	lsls	r3, r5, #31
  20166c:	d505      	bpl.n	20167a <icu_lld_serve_interrupt+0x3a>
    _icu_isr_invoke_overflow_cb(icup);
  20166e:	6863      	ldr	r3, [r4, #4]
  201670:	4620      	mov	r0, r4
  201672:	691b      	ldr	r3, [r3, #16]
  201674:	4798      	blx	r3
  201676:	2303      	movs	r3, #3
  201678:	7023      	strb	r3, [r4, #0]
}
  20167a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  20167c:	b157      	cbz	r7, 201694 <icu_lld_serve_interrupt+0x54>
      _icu_isr_invoke_width_cb(icup);
  20167e:	7803      	ldrb	r3, [r0, #0]
  201680:	2b04      	cmp	r3, #4
  201682:	d004      	beq.n	20168e <icu_lld_serve_interrupt+0x4e>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  201684:	2e00      	cmp	r6, #0
  201686:	d0f0      	beq.n	20166a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
  201688:	2304      	movs	r3, #4
  20168a:	7023      	strb	r3, [r4, #0]
  20168c:	e7ed      	b.n	20166a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_width_cb(icup);
  20168e:	688b      	ldr	r3, [r1, #8]
  201690:	b1d3      	cbz	r3, 2016c8 <icu_lld_serve_interrupt+0x88>
  201692:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  201694:	2e00      	cmp	r6, #0
  201696:	d0e8      	beq.n	20166a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
  201698:	7823      	ldrb	r3, [r4, #0]
  20169a:	2b04      	cmp	r3, #4
  20169c:	d1f4      	bne.n	201688 <icu_lld_serve_interrupt+0x48>
  20169e:	6861      	ldr	r1, [r4, #4]
  2016a0:	68cb      	ldr	r3, [r1, #12]
  2016a2:	2b00      	cmp	r3, #0
  2016a4:	d0f0      	beq.n	201688 <icu_lld_serve_interrupt+0x48>
  2016a6:	4620      	mov	r0, r4
  2016a8:	4798      	blx	r3
  2016aa:	2304      	movs	r3, #4
  2016ac:	7023      	strb	r3, [r4, #0]
  2016ae:	e7dc      	b.n	20166a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_width_cb(icup);
  2016b0:	688b      	ldr	r3, [r1, #8]
  2016b2:	b133      	cbz	r3, 2016c2 <icu_lld_serve_interrupt+0x82>
  2016b4:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  2016b6:	2f00      	cmp	r7, #0
  2016b8:	d0d7      	beq.n	20166a <icu_lld_serve_interrupt+0x2a>
      _icu_isr_invoke_period_cb(icup);
  2016ba:	7823      	ldrb	r3, [r4, #0]
  2016bc:	2b04      	cmp	r3, #4
  2016be:	d1e3      	bne.n	201688 <icu_lld_serve_interrupt+0x48>
  2016c0:	e7ed      	b.n	20169e <icu_lld_serve_interrupt+0x5e>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  2016c2:	2f00      	cmp	r7, #0
  2016c4:	d0d1      	beq.n	20166a <icu_lld_serve_interrupt+0x2a>
  2016c6:	e7eb      	b.n	2016a0 <icu_lld_serve_interrupt+0x60>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  2016c8:	2e00      	cmp	r6, #0
  2016ca:	d0ce      	beq.n	20166a <icu_lld_serve_interrupt+0x2a>
  2016cc:	e7e8      	b.n	2016a0 <icu_lld_serve_interrupt+0x60>
  2016ce:	bf00      	nop

002016d0 <icu_lld_start>:
  if (icup->state == ICU_STOP) {
  2016d0:	7802      	ldrb	r2, [r0, #0]
  2016d2:	68c3      	ldr	r3, [r0, #12]
  2016d4:	2a01      	cmp	r2, #1
void icu_lld_start(ICUDriver *icup) {
  2016d6:	b4f0      	push	{r4, r5, r6, r7}
  if (icup->state == ICU_STOP) {
  2016d8:	d03a      	beq.n	201750 <icu_lld_start+0x80>
    icup->tim->CR1    = 0;                  /* Timer disabled.              */
  2016da:	2200      	movs	r2, #0
  2016dc:	601a      	str	r2, [r3, #0]
    icup->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
  2016de:	635a      	str	r2, [r3, #52]	; 0x34
    icup->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
  2016e0:	639a      	str	r2, [r3, #56]	; 0x38
    icup->tim->CNT    = 0;                  /* Counter reset to zero.       */
  2016e2:	625a      	str	r2, [r3, #36]	; 0x24
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2016e4:	6841      	ldr	r1, [r0, #4]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  2016e6:	2400      	movs	r4, #0
  psc = (icup->clock / icup->config->frequency) - 1;
  2016e8:	6882      	ldr	r2, [r0, #8]
  icup->tim->ARR  = 0xFFFF;
  2016ea:	f64f 75ff 	movw	r5, #65535	; 0xffff
  psc = (icup->clock / icup->config->frequency) - 1;
  2016ee:	684e      	ldr	r6, [r1, #4]
  icup->tim->SR   = 0;                      /* Clear eventual pending IRQs. */
  2016f0:	611c      	str	r4, [r3, #16]
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2016f2:	698c      	ldr	r4, [r1, #24]
  psc = (icup->clock / icup->config->frequency) - 1;
  2016f4:	fbb2 f2f6 	udiv	r2, r2, r6
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2016f8:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  psc = (icup->clock / icup->config->frequency) - 1;
  2016fc:	3a01      	subs	r2, #1
  icup->tim->DIER = icup->config->dier &    /* DMA-related DIER settings.   */
  2016fe:	60dc      	str	r4, [r3, #12]
  icup->tim->PSC  = psc;
  201700:	629a      	str	r2, [r3, #40]	; 0x28
  icup->tim->ARR  = 0xFFFF;
  201702:	62dd      	str	r5, [r3, #44]	; 0x2c
  if (icup->config->channel == ICU_CHANNEL_1) {
  201704:	7d0c      	ldrb	r4, [r1, #20]
  201706:	780a      	ldrb	r2, [r1, #0]
  201708:	b96c      	cbnz	r4, 201726 <icu_lld_start+0x56>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
  20170a:	f240 2401 	movw	r4, #513	; 0x201
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
  20170e:	2154      	movs	r1, #84	; 0x54
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(1) | STM32_TIM_CCMR1_CC2S(2);
  201710:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(5) | STM32_TIM_SMCR_SMS(4);
  201712:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  201714:	b1ca      	cbz	r2, 20174a <icu_lld_start+0x7a>
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  201716:	2213      	movs	r2, #19
  201718:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[1];
  20171a:	f103 0238 	add.w	r2, r3, #56	; 0x38
    icup->pccrp = &icup->tim->CCR[0];
  20171e:	3334      	adds	r3, #52	; 0x34
  201720:	e9c0 2304 	strd	r2, r3, [r0, #16]
  201724:	e00c      	b.n	201740 <icu_lld_start+0x70>
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
  201726:	f44f 7481 	mov.w	r4, #258	; 0x102
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
  20172a:	2164      	movs	r1, #100	; 0x64
    icup->tim->CCMR1 = STM32_TIM_CCMR1_CC1S(2) | STM32_TIM_CCMR1_CC2S(1);
  20172c:	619c      	str	r4, [r3, #24]
    icup->tim->SMCR  = STM32_TIM_SMCR_TS(6) | STM32_TIM_SMCR_SMS(4);
  20172e:	6099      	str	r1, [r3, #8]
    if (icup->config->mode == ICU_INPUT_ACTIVE_HIGH)
  201730:	b142      	cbz	r2, 201744 <icu_lld_start+0x74>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  201732:	2231      	movs	r2, #49	; 0x31
  201734:	621a      	str	r2, [r3, #32]
    icup->wccrp = &icup->tim->CCR[0];
  201736:	f103 0234 	add.w	r2, r3, #52	; 0x34
    icup->pccrp = &icup->tim->CCR[1];
  20173a:	3338      	adds	r3, #56	; 0x38
  20173c:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
  201740:	bcf0      	pop	{r4, r5, r6, r7}
  201742:	4770      	bx	lr
      icup->tim->CCER = STM32_TIM_CCER_CC1E | STM32_TIM_CCER_CC1P |
  201744:	2213      	movs	r2, #19
  201746:	621a      	str	r2, [r3, #32]
  201748:	e7f5      	b.n	201736 <icu_lld_start+0x66>
      icup->tim->CCER = STM32_TIM_CCER_CC1E |
  20174a:	2231      	movs	r2, #49	; 0x31
  20174c:	621a      	str	r2, [r3, #32]
  20174e:	e7e4      	b.n	20171a <icu_lld_start+0x4a>
    if (&ICUD1 == icup) {
  201750:	4a26      	ldr	r2, [pc, #152]	; (2017ec <icu_lld_start+0x11c>)
  201752:	4290      	cmp	r0, r2
  201754:	d021      	beq.n	20179a <icu_lld_start+0xca>
    if (&ICUD3 == icup) {
  201756:	4a26      	ldr	r2, [pc, #152]	; (2017f0 <icu_lld_start+0x120>)
  201758:	4290      	cmp	r0, r2
  20175a:	d1c3      	bne.n	2016e4 <icu_lld_start+0x14>
      rccEnableTIM3(true);
  20175c:	4a25      	ldr	r2, [pc, #148]	; (2017f4 <icu_lld_start+0x124>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20175e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201762:	4925      	ldr	r1, [pc, #148]	; (2017f8 <icu_lld_start+0x128>)
  201764:	2670      	movs	r6, #112	; 0x70
  201766:	6c14      	ldr	r4, [r2, #64]	; 0x40
     icup->clock = STM32_TIMCLK1;
  201768:	4f24      	ldr	r7, [pc, #144]	; (2017fc <icu_lld_start+0x12c>)
      rccEnableTIM3(true);
  20176a:	f044 0402 	orr.w	r4, r4, #2
  20176e:	6414      	str	r4, [r2, #64]	; 0x40
  201770:	6e14      	ldr	r4, [r2, #96]	; 0x60
  201772:	f044 0402 	orr.w	r4, r4, #2
  201776:	6614      	str	r4, [r2, #96]	; 0x60
  201778:	6e14      	ldr	r4, [r2, #96]	; 0x60
      rccResetTIM3();
  20177a:	6a14      	ldr	r4, [r2, #32]
  20177c:	f044 0402 	orr.w	r4, r4, #2
  201780:	6214      	str	r4, [r2, #32]
  201782:	6a14      	ldr	r4, [r2, #32]
  201784:	f024 0402 	bic.w	r4, r4, #2
  201788:	6214      	str	r4, [r2, #32]
  20178a:	6a12      	ldr	r2, [r2, #32]
  20178c:	f881 631d 	strb.w	r6, [r1, #797]	; 0x31d
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201790:	f8c1 5180 	str.w	r5, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201794:	600d      	str	r5, [r1, #0]
     icup->clock = STM32_TIMCLK1;
  201796:	6087      	str	r7, [r0, #8]
  201798:	e7a4      	b.n	2016e4 <icu_lld_start+0x14>
      rccEnableTIM1(true);
  20179a:	4a16      	ldr	r2, [pc, #88]	; (2017f4 <icu_lld_start+0x124>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20179c:	2570      	movs	r5, #112	; 0x70
  20179e:	4916      	ldr	r1, [pc, #88]	; (2017f8 <icu_lld_start+0x128>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2017a0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
  2017a4:	6c54      	ldr	r4, [r2, #68]	; 0x44
  2017a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
      icup->clock = STM32_TIMCLK2;
  2017aa:	f8df c050 	ldr.w	ip, [pc, #80]	; 2017fc <icu_lld_start+0x12c>
      rccEnableTIM1(true);
  2017ae:	f044 0401 	orr.w	r4, r4, #1
  2017b2:	6454      	str	r4, [r2, #68]	; 0x44
  2017b4:	6e54      	ldr	r4, [r2, #100]	; 0x64
  2017b6:	f044 0401 	orr.w	r4, r4, #1
  2017ba:	6654      	str	r4, [r2, #100]	; 0x64
  2017bc:	6e54      	ldr	r4, [r2, #100]	; 0x64
      rccResetTIM1();
  2017be:	6a54      	ldr	r4, [r2, #36]	; 0x24
  2017c0:	f044 0401 	orr.w	r4, r4, #1
  2017c4:	6254      	str	r4, [r2, #36]	; 0x24
  2017c6:	6a54      	ldr	r4, [r2, #36]	; 0x24
  2017c8:	f024 0401 	bic.w	r4, r4, #1
  2017cc:	6254      	str	r4, [r2, #36]	; 0x24
  2017ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2017d0:	f881 5319 	strb.w	r5, [r1, #793]	; 0x319
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2017d4:	f8c1 6180 	str.w	r6, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2017d8:	600e      	str	r6, [r1, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2017da:	f881 531b 	strb.w	r5, [r1, #795]	; 0x31b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2017de:	f8c1 7180 	str.w	r7, [r1, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2017e2:	600f      	str	r7, [r1, #0]
      icup->clock = STM32_TIMCLK2;
  2017e4:	f8c0 c008 	str.w	ip, [r0, #8]
  2017e8:	e77c      	b.n	2016e4 <icu_lld_start+0x14>
  2017ea:	bf00      	nop
  2017ec:	20000a50 	.word	0x20000a50
  2017f0:	20000a68 	.word	0x20000a68
  2017f4:	40023800 	.word	0x40023800
  2017f8:	e000e100 	.word	0xe000e100
  2017fc:	05b8d800 	.word	0x05b8d800

00201800 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  201800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201804:	f002 0803 	and.w	r8, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  201808:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  20180c:	2500      	movs	r5, #0
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  20180e:	09d2      	lsrs	r2, r2, #7
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
  201810:	f04f 0b01 	mov.w	fp, #1
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201814:	4647      	mov	r7, r8
      m2 = 3 << (bit * 2);
  201816:	f04f 0a03 	mov.w	sl, #3
      m4 = 15 << ((bit & 7) * 4);
  20181a:	f04f 090f 	mov.w	r9, #15
  20181e:	e013      	b.n	201848 <_pal_lld_setgroupmode+0x48>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
  201820:	6806      	ldr	r6, [r0, #0]
        if (bit < 8)
  201822:	2d07      	cmp	r5, #7
        port->MODER   = (port->MODER & ~m2) | moder;
  201824:	ea03 0306 	and.w	r3, r3, r6
  201828:	ea43 0307 	orr.w	r3, r3, r7
  20182c:	6003      	str	r3, [r0, #0]
        if (bit < 8)
  20182e:	d842      	bhi.n	2018b6 <_pal_lld_setgroupmode+0xb6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201830:	6a03      	ldr	r3, [r0, #32]
  201832:	ea03 0e0e 	and.w	lr, r3, lr
  201836:	ea4e 0404 	orr.w	r4, lr, r4
  20183a:	6204      	str	r4, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
  20183c:	0849      	lsrs	r1, r1, #1
  20183e:	d038      	beq.n	2018b2 <_pal_lld_setgroupmode+0xb2>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
  201840:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
    moder <<= 2;
    bit++;
  201844:	3501      	adds	r5, #1
    moder <<= 2;
  201846:	00bf      	lsls	r7, r7, #2
    if ((mask & 1) != 0) {
  201848:	07cb      	lsls	r3, r1, #31
  20184a:	d5f7      	bpl.n	20183c <_pal_lld_setgroupmode+0x3c>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20184c:	f8d0 e004 	ldr.w	lr, [r0, #4]
      m1 = 1 << bit;
  201850:	fa0b f605 	lsl.w	r6, fp, r5
      m2 = 3 << (bit * 2);
  201854:	006b      	lsls	r3, r5, #1
      altrmask = altr << ((bit & 7) * 4);
  201856:	f005 0407 	and.w	r4, r5, #7
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20185a:	ea2e 0606 	bic.w	r6, lr, r6
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  20185e:	f1b8 0f02 	cmp.w	r8, #2
      m2 = 3 << (bit * 2);
  201862:	fa0a f303 	lsl.w	r3, sl, r3
      altrmask = altr << ((bit & 7) * 4);
  201866:	ea4f 0484 	mov.w	r4, r4, lsl #2
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  20186a:	6046      	str	r6, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20186c:	ea6f 0303 	mvn.w	r3, r3
  201870:	6886      	ldr	r6, [r0, #8]
      m4 = 15 << ((bit & 7) * 4);
  201872:	fa09 fe04 	lsl.w	lr, r9, r4
      altrmask = altr << ((bit & 7) * 4);
  201876:	fa02 f404 	lsl.w	r4, r2, r4
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  20187a:	ea06 0603 	and.w	r6, r6, r3
  20187e:	ea6f 0e0e 	mvn.w	lr, lr
  201882:	ea46 060c 	orr.w	r6, r6, ip
  201886:	6086      	str	r6, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  201888:	68c6      	ldr	r6, [r0, #12]
  20188a:	ea06 0603 	and.w	r6, r6, r3
  20188e:	60c6      	str	r6, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  201890:	d1c6      	bne.n	201820 <_pal_lld_setgroupmode+0x20>
        if (bit < 8)
  201892:	2d07      	cmp	r5, #7
  201894:	d816      	bhi.n	2018c4 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201896:	6a06      	ldr	r6, [r0, #32]
  201898:	ea06 0e0e 	and.w	lr, r6, lr
  20189c:	ea4e 0404 	orr.w	r4, lr, r4
  2018a0:	6204      	str	r4, [r0, #32]
        port->MODER   = (port->MODER & ~m2) | moder;
  2018a2:	6804      	ldr	r4, [r0, #0]
    if (!mask)
  2018a4:	0849      	lsrs	r1, r1, #1
        port->MODER   = (port->MODER & ~m2) | moder;
  2018a6:	ea03 0304 	and.w	r3, r3, r4
  2018aa:	ea43 0307 	orr.w	r3, r3, r7
  2018ae:	6003      	str	r3, [r0, #0]
    if (!mask)
  2018b0:	d1c6      	bne.n	201840 <_pal_lld_setgroupmode+0x40>
  }
}
  2018b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2018b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  2018b8:	ea03 0e0e 	and.w	lr, r3, lr
  2018bc:	ea4e 0404 	orr.w	r4, lr, r4
  2018c0:	6244      	str	r4, [r0, #36]	; 0x24
  2018c2:	e7bb      	b.n	20183c <_pal_lld_setgroupmode+0x3c>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  2018c4:	6a46      	ldr	r6, [r0, #36]	; 0x24
  2018c6:	ea06 0e0e 	and.w	lr, r6, lr
  2018ca:	ea4e 0404 	orr.w	r4, lr, r4
  2018ce:	6244      	str	r4, [r0, #36]	; 0x24
  2018d0:	e7e7      	b.n	2018a2 <_pal_lld_setgroupmode+0xa2>
  2018d2:	bf00      	nop
	...

002018e0 <can_lld_init>:
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {

  canp->state       = CAN_STOP;
  2018e0:	4851      	ldr	r0, [pc, #324]	; (201a28 <can_lld_init+0x148>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2018e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
void can_lld_init(void) {

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
  CAND1.can = CAN1;
  2018e6:	f8df c154 	ldr.w	ip, [pc, #340]	; 201a3c <can_lld_init+0x15c>
  2018ea:	4950      	ldr	r1, [pc, #320]	; (201a2c <can_lld_init+0x14c>)
void can_lld_init(void) {
  2018ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2018f0:	4b4f      	ldr	r3, [pc, #316]	; (201a30 <can_lld_init+0x150>)
  2018f2:	25b0      	movs	r5, #176	; 0xb0
  2018f4:	2601      	movs	r6, #1
  tqp->next = (thread_t *)tqp;
  2018f6:	f100 0e08 	add.w	lr, r0, #8
  CAND1.can = CAN1;
  2018fa:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2018fe:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  201902:	7006      	strb	r6, [r0, #0]
  201904:	f44f 1700 	mov.w	r7, #2097152	; 0x200000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201908:	f883 5313 	strb.w	r5, [r3, #787]	; 0x313
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20190c:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
  201910:	f8c0 e008 	str.w	lr, [r0, #8]
  201914:	f04f 0904 	mov.w	r9, #4
  201918:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  tqp->prev = (thread_t *)tqp;
  20191c:	f8c0 e00c 	str.w	lr, [r0, #12]
  tqp->next = (thread_t *)tqp;
  201920:	f100 0e10 	add.w	lr, r0, #16
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201924:	601a      	str	r2, [r3, #0]
  canp->config      = NULL;
  201926:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201928:	f883 5314 	strb.w	r5, [r3, #788]	; 0x314
  canp->state       = CAN_STOP;
  20192c:	4c41      	ldr	r4, [pc, #260]	; (201a34 <can_lld_init+0x154>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20192e:	f8c3 8180 	str.w	r8, [r3, #384]	; 0x180
  201932:	f8c0 e010 	str.w	lr, [r0, #16]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201936:	f8c3 8000 	str.w	r8, [r3]
  20193a:	f101 0808 	add.w	r8, r1, #8
  tqp->prev = (thread_t *)tqp;
  20193e:	f8c0 e014 	str.w	lr, [r0, #20]
  tqp->next = (thread_t *)tqp;
  201942:	f101 0e10 	add.w	lr, r1, #16
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201946:	f883 5315 	strb.w	r5, [r3, #789]	; 0x315
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20194a:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  canp->config      = NULL;
  20194e:	6042      	str	r2, [r0, #4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201950:	601f      	str	r7, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201952:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201956:	f883 5316 	strb.w	r5, [r3, #790]	; 0x316
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
  osalEventObjectInit(&canp->wakeup_event);
#endif
#else /* CAN_ENFORCE_USE_CALLBACKS == TRUE */
  canp->rxfull_cb   = NULL;
  20195a:	6182      	str	r2, [r0, #24]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20195c:	f8c3 c180 	str.w	ip, [r3, #384]	; 0x180
  canp->txempty_cb  = NULL;
  201960:	61c2      	str	r2, [r0, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201962:	f8c3 c000 	str.w	ip, [r3]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201966:	f04f 0c02 	mov.w	ip, #2
  canp->state       = CAN_STOP;
  20196a:	700e      	strb	r6, [r1, #0]
  canp->config      = NULL;
  20196c:	604a      	str	r2, [r1, #4]
  canp->error_cb    = NULL;
  20196e:	620a      	str	r2, [r1, #32]
#if CAN_USE_SLEEP_MODE == TRUE
  canp->wakeup_cb   = NULL;
  201970:	e9c0 2208 	strd	r2, r2, [r0, #32]
  canp->txempty_cb  = NULL;
  201974:	e9c1 2206 	strd	r2, r2, [r1, #24]
  tqp->prev = (thread_t *)tqp;
  201978:	e9c1 8802 	strd	r8, r8, [r1, #8]
  20197c:	e9c1 ee04 	strd	lr, lr, [r1, #16]
  tqp->next = (thread_t *)tqp;
  201980:	f104 0808 	add.w	r8, r4, #8
#endif

#if STM32_CAN_USE_CAN2
  /* Driver initialization.*/
  canObjectInit(&CAND2);
  CAND2.can = CAN2;
  201984:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 201a40 <can_lld_init+0x160>
  canp->wakeup_cb   = NULL;
  201988:	624a      	str	r2, [r1, #36]	; 0x24
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20198a:	f883 533f 	strb.w	r5, [r3, #831]	; 0x33f
  20198e:	f8c1 e028 	str.w	lr, [r1, #40]	; 0x28
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201992:	f44f 7e80 	mov.w	lr, #256	; 0x100
  201996:	f8c3 7184 	str.w	r7, [r3, #388]	; 0x184
  20199a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  canp->config      = NULL;
  20199e:	6062      	str	r2, [r4, #4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019a0:	605f      	str	r7, [r3, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019a2:	f44f 7700 	mov.w	r7, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019a6:	f883 5340 	strb.w	r5, [r3, #832]	; 0x340
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019aa:	f8c3 6188 	str.w	r6, [r3, #392]	; 0x188
  canp->rxfull_cb   = NULL;
  2019ae:	61a2      	str	r2, [r4, #24]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019b0:	609e      	str	r6, [r3, #8]
  canp->txempty_cb  = NULL;
  2019b2:	61e2      	str	r2, [r4, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019b4:	f883 5341 	strb.w	r5, [r3, #833]	; 0x341
  canp->error_cb    = NULL;
  2019b8:	6222      	str	r2, [r4, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019ba:	f8c3 c188 	str.w	ip, [r3, #392]	; 0x188
  canp->wakeup_cb   = NULL;
  2019be:	6262      	str	r2, [r4, #36]	; 0x24
  2019c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019c4:	f8c3 c008 	str.w	ip, [r3, #8]
  2019c8:	f104 0c10 	add.w	ip, r4, #16
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019cc:	f883 5342 	strb.w	r5, [r3, #834]	; 0x342
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019d0:	f8c3 9188 	str.w	r9, [r3, #392]	; 0x188
  2019d4:	f8c4 8008 	str.w	r8, [r4, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019d8:	f8c3 9008 	str.w	r9, [r3, #8]
  canp->state       = CAN_STOP;
  2019dc:	7026      	strb	r6, [r4, #0]
#endif

#if STM32_CAN_USE_CAN3
  /* Driver initialization.*/
  canObjectInit(&CAND3);
  CAND3.can = CAN3;
  2019de:	4e16      	ldr	r6, [pc, #88]	; (201a38 <can_lld_init+0x158>)
  tqp->prev = (thread_t *)tqp;
  2019e0:	f8c4 800c 	str.w	r8, [r4, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019e4:	f883 5368 	strb.w	r5, [r3, #872]	; 0x368
  2019e8:	62a6      	str	r6, [r4, #40]	; 0x28
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019ea:	f8c3 e18c 	str.w	lr, [r3, #396]	; 0x18c
  tqp->next = (thread_t *)tqp;
  2019ee:	f8c4 c010 	str.w	ip, [r4, #16]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2019f2:	f8c3 e00c 	str.w	lr, [r3, #12]
  tqp->prev = (thread_t *)tqp;
  2019f6:	f8c4 c014 	str.w	ip, [r4, #20]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2019fa:	f883 5369 	strb.w	r5, [r3, #873]	; 0x369
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2019fe:	f8c3 718c 	str.w	r7, [r3, #396]	; 0x18c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201a02:	60df      	str	r7, [r3, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201a04:	f883 536a 	strb.w	r5, [r3, #874]	; 0x36a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201a08:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201a0c:	60d9      	str	r1, [r3, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  201a0e:	f883 536b 	strb.w	r5, [r3, #875]	; 0x36b
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  201a12:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  201a16:	60da      	str	r2, [r3, #12]
#endif
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(&CAND1, STM32_CAN_MAX_FILTERS / 2, 0, NULL);
  201a18:	f7ff f9f2 	bl	200e00 <can_lld_set_filters.constprop.22>
  can_lld_set_filters(&CAND1, STM32_CAN_MAX_FILTERS, 0, NULL);
#endif

#if STM32_HAS_CAN3
#if STM32_CAN_USE_CAN3
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
  201a1c:	4620      	mov	r0, r4
#endif
#endif
}
  201a1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  can_lld_set_filters(&CAND3, STM32_CAN3_MAX_FILTERS, 0, NULL);
  201a22:	f7ff b9ed 	b.w	200e00 <can_lld_set_filters.constprop.22>
  201a26:	bf00      	nop
  201a28:	20000800 	.word	0x20000800
  201a2c:	2000082c 	.word	0x2000082c
  201a30:	e000e100 	.word	0xe000e100
  201a34:	20000858 	.word	0x20000858
  201a38:	40003400 	.word	0x40003400
  201a3c:	40006400 	.word	0x40006400
  201a40:	40006800 	.word	0x40006800
	...

00201a50 <can_lld_sce_handler>:
  msr = canp->can->MSR;
  201a50:	6a83      	ldr	r3, [r0, #40]	; 0x28
static void can_lld_sce_handler(CANDriver *canp) {
  201a52:	b570      	push	{r4, r5, r6, lr}
  msr = canp->can->MSR;
  201a54:	685d      	ldr	r5, [r3, #4]
static void can_lld_sce_handler(CANDriver *canp) {
  201a56:	4604      	mov	r4, r0
  if (msr & CAN_MSR_WKUI) {
  201a58:	072a      	lsls	r2, r5, #28
  canp->can->MSR = msr;
  201a5a:	605d      	str	r5, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
  201a5c:	d509      	bpl.n	201a72 <can_lld_sce_handler+0x22>
    canp->state = CAN_READY;
  201a5e:	2203      	movs	r2, #3
    _can_wakeup_isr(canp);
  201a60:	6a46      	ldr	r6, [r0, #36]	; 0x24
    canp->state = CAN_READY;
  201a62:	7002      	strb	r2, [r0, #0]
    canp->can->MCR &= ~CAN_MCR_SLEEP;
  201a64:	681a      	ldr	r2, [r3, #0]
  201a66:	f022 0202 	bic.w	r2, r2, #2
  201a6a:	601a      	str	r2, [r3, #0]
    _can_wakeup_isr(canp);
  201a6c:	b10e      	cbz	r6, 201a72 <can_lld_sce_handler+0x22>
  201a6e:	2100      	movs	r1, #0
  201a70:	47b0      	blx	r6
  if (msr & CAN_MSR_ERRI) {
  201a72:	076b      	lsls	r3, r5, #29
  201a74:	d508      	bpl.n	201a88 <can_lld_sce_handler+0x38>
    uint32_t esr = canp->can->ESR;
  201a76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
  201a78:	6a23      	ldr	r3, [r4, #32]
    uint32_t esr = canp->can->ESR;
  201a7a:	6991      	ldr	r1, [r2, #24]
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
  201a7c:	b123      	cbz	r3, 201a88 <can_lld_sce_handler+0x38>
  201a7e:	4620      	mov	r0, r4
  201a80:	0409      	lsls	r1, r1, #16
}
  201a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _can_error_isr(canp, flags | (eventflags_t)(esr << 16U));
  201a86:	4718      	bx	r3
}
  201a88:	bd70      	pop	{r4, r5, r6, pc}
  201a8a:	bf00      	nop
  201a8c:	0000      	movs	r0, r0
	...

00201a90 <can_lld_rx1_handler>:
  rf1r = canp->can->RF1R;
  201a90:	6a83      	ldr	r3, [r0, #40]	; 0x28
static void can_lld_rx1_handler(CANDriver *canp) {
  201a92:	b570      	push	{r4, r5, r6, lr}
  rf1r = canp->can->RF1R;
  201a94:	691d      	ldr	r5, [r3, #16]
static void can_lld_rx1_handler(CANDriver *canp) {
  201a96:	4604      	mov	r4, r0
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
  201a98:	07aa      	lsls	r2, r5, #30
  201a9a:	d011      	beq.n	201ac0 <can_lld_rx1_handler+0x30>
    canp->can->IER &= ~CAN_IER_FMPIE1;
  201a9c:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
  201a9e:	6986      	ldr	r6, [r0, #24]
    canp->can->IER &= ~CAN_IER_FMPIE1;
  201aa0:	f022 0210 	bic.w	r2, r2, #16
  201aa4:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(2U));
  201aa6:	b10e      	cbz	r6, 201aac <can_lld_rx1_handler+0x1c>
  201aa8:	2102      	movs	r1, #2
  201aaa:	47b0      	blx	r6
  201aac:	2320      	movs	r3, #32
  201aae:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
  201ab2:	f104 0010 	add.w	r0, r4, #16
  201ab6:	f7ff fb9b 	bl	2011f0 <chThdDequeueAllI.constprop.13>
  201aba:	2300      	movs	r3, #0
  201abc:	f383 8811 	msr	BASEPRI, r3
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
  201ac0:	06eb      	lsls	r3, r5, #27
  201ac2:	d508      	bpl.n	201ad6 <can_lld_rx1_handler+0x46>
    canp->can->RF1R = CAN_RF1R_FOVR1;
  201ac4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  201ac6:	2110      	movs	r1, #16
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
  201ac8:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF1R = CAN_RF1R_FOVR1;
  201aca:	6111      	str	r1, [r2, #16]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
  201acc:	b11b      	cbz	r3, 201ad6 <can_lld_rx1_handler+0x46>
  201ace:	4620      	mov	r0, r4
}
  201ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
  201ad4:	4718      	bx	r3
}
  201ad6:	bd70      	pop	{r4, r5, r6, pc}
	...

00201ae0 <can_lld_rx0_handler>:
  rf0r = canp->can->RF0R;
  201ae0:	6a83      	ldr	r3, [r0, #40]	; 0x28
static void can_lld_rx0_handler(CANDriver *canp) {
  201ae2:	b570      	push	{r4, r5, r6, lr}
  rf0r = canp->can->RF0R;
  201ae4:	68dd      	ldr	r5, [r3, #12]
static void can_lld_rx0_handler(CANDriver *canp) {
  201ae6:	4604      	mov	r4, r0
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
  201ae8:	07aa      	lsls	r2, r5, #30
  201aea:	d011      	beq.n	201b10 <can_lld_rx0_handler+0x30>
    canp->can->IER &= ~CAN_IER_FMPIE0;
  201aec:	695a      	ldr	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
  201aee:	6986      	ldr	r6, [r0, #24]
    canp->can->IER &= ~CAN_IER_FMPIE0;
  201af0:	f022 0202 	bic.w	r2, r2, #2
  201af4:	615a      	str	r2, [r3, #20]
    _can_rx_full_isr(canp, CAN_MAILBOX_TO_MASK(1U));
  201af6:	b10e      	cbz	r6, 201afc <can_lld_rx0_handler+0x1c>
  201af8:	2101      	movs	r1, #1
  201afa:	47b0      	blx	r6
  201afc:	2320      	movs	r3, #32
  201afe:	f383 8811 	msr	BASEPRI, r3
  201b02:	f104 0010 	add.w	r0, r4, #16
  201b06:	f7ff fb73 	bl	2011f0 <chThdDequeueAllI.constprop.13>
  201b0a:	2300      	movs	r3, #0
  201b0c:	f383 8811 	msr	BASEPRI, r3
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
  201b10:	06eb      	lsls	r3, r5, #27
  201b12:	d508      	bpl.n	201b26 <can_lld_rx0_handler+0x46>
    canp->can->RF0R = CAN_RF0R_FOVR0;
  201b14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  201b16:	2110      	movs	r1, #16
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
  201b18:	6a23      	ldr	r3, [r4, #32]
    canp->can->RF0R = CAN_RF0R_FOVR0;
  201b1a:	60d1      	str	r1, [r2, #12]
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
  201b1c:	b11b      	cbz	r3, 201b26 <can_lld_rx0_handler+0x46>
  201b1e:	4620      	mov	r0, r4
}
  201b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _can_error_isr(canp, CAN_OVERFLOW_ERROR);
  201b24:	4718      	bx	r3
}
  201b26:	bd70      	pop	{r4, r5, r6, pc}
	...

00201b30 <can_lld_tx_handler>:
  tsr = canp->can->TSR;
  201b30:	6a82      	ldr	r2, [r0, #40]	; 0x28
  201b32:	6893      	ldr	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
  201b34:	f013 0101 	ands.w	r1, r3, #1
static void can_lld_tx_handler(CANDriver *canp) {
  201b38:	b510      	push	{r4, lr}
  201b3a:	4604      	mov	r4, r0
  canp->can->TSR = tsr;
  201b3c:	6093      	str	r3, [r2, #8]
  if ((tsr & CAN_TSR_RQCP0) != 0U) {
  201b3e:	d005      	beq.n	201b4c <can_lld_tx_handler+0x1c>
      flags |= CAN_MAILBOX_TO_MASK(1U);
  201b40:	f013 0f0c 	tst.w	r3, #12
  201b44:	bf14      	ite	ne
  201b46:	f44f 3180 	movne.w	r1, #65536	; 0x10000
  201b4a:	2101      	moveq	r1, #1
  if ((tsr & CAN_TSR_RQCP1) != 0U) {
  201b4c:	05d8      	lsls	r0, r3, #23
  201b4e:	d506      	bpl.n	201b5e <can_lld_tx_handler+0x2e>
    if ((tsr & (CAN_TSR_ALST1 | CAN_TSR_TERR1)) != 0U) {
  201b50:	f413 6f40 	tst.w	r3, #3072	; 0xc00
      flags |= CAN_MAILBOX_TO_MASK(2U) << 16U;
  201b54:	bf14      	ite	ne
  201b56:	f441 3100 	orrne.w	r1, r1, #131072	; 0x20000
      flags |= CAN_MAILBOX_TO_MASK(2U);
  201b5a:	f041 0102 	orreq.w	r1, r1, #2
  if ((tsr & CAN_TSR_RQCP2) != 0U) {
  201b5e:	03da      	lsls	r2, r3, #15
  201b60:	d506      	bpl.n	201b70 <can_lld_tx_handler+0x40>
    if ((tsr & (CAN_TSR_ALST2 | CAN_TSR_TERR2)) != 0U) {
  201b62:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
      flags |= CAN_MAILBOX_TO_MASK(3U) << 16U;
  201b66:	bf14      	ite	ne
  201b68:	f441 2180 	orrne.w	r1, r1, #262144	; 0x40000
      flags |= CAN_MAILBOX_TO_MASK(3U);
  201b6c:	f041 0104 	orreq.w	r1, r1, #4
  _can_tx_empty_isr(canp, flags);
  201b70:	69e3      	ldr	r3, [r4, #28]
  201b72:	b10b      	cbz	r3, 201b78 <can_lld_tx_handler+0x48>
  201b74:	4620      	mov	r0, r4
  201b76:	4798      	blx	r3
  201b78:	2320      	movs	r3, #32
  201b7a:	f383 8811 	msr	BASEPRI, r3
  201b7e:	f104 0008 	add.w	r0, r4, #8
  201b82:	f7ff fb35 	bl	2011f0 <chThdDequeueAllI.constprop.13>
  201b86:	2300      	movs	r3, #0
  201b88:	f383 8811 	msr	BASEPRI, r3
}
  201b8c:	bd10      	pop	{r4, pc}
  201b8e:	bf00      	nop

00201b90 <_ctl>:
}
  201b90:	2000      	movs	r0, #0
  201b92:	4770      	bx	lr
	...

00201ba0 <chSchWakeupS.constprop.11>:
  thread_t *otp = currp;
  201ba0:	4b15      	ldr	r3, [pc, #84]	; (201bf8 <chSchWakeupS.constprop.11+0x58>)
  if (ntp->prio <= otp->prio) {
  201ba2:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  201ba4:	b470      	push	{r4, r5, r6}
  thread_t *otp = currp;
  201ba6:	699d      	ldr	r5, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  201ba8:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
  201baa:	2600      	movs	r6, #0
  if (ntp->prio <= otp->prio) {
  201bac:	68a8      	ldr	r0, [r5, #8]
  ntp->u.rdymsg = msg;
  201bae:	6266      	str	r6, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
  201bb0:	4281      	cmp	r1, r0
  201bb2:	d80c      	bhi.n	201bce <chSchWakeupS.constprop.11+0x2e>
  tp->state = CH_STATE_READY;
  201bb4:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
  201bb8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201bba:	689a      	ldr	r2, [r3, #8]
  201bbc:	4291      	cmp	r1, r2
  201bbe:	d9fb      	bls.n	201bb8 <chSchWakeupS.constprop.11+0x18>
  tp->queue.prev             = cp->queue.prev;
  201bc0:	685a      	ldr	r2, [r3, #4]
  201bc2:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
  201bc6:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201bc8:	605c      	str	r4, [r3, #4]
}
  201bca:	bc70      	pop	{r4, r5, r6}
  201bcc:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
  201bce:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
  201bd0:	f885 6020 	strb.w	r6, [r5, #32]
    cp = cp->queue.next;
  201bd4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  201bd6:	6891      	ldr	r1, [r2, #8]
  201bd8:	4288      	cmp	r0, r1
  201bda:	d9fb      	bls.n	201bd4 <chSchWakeupS.constprop.11+0x34>
  tp->queue.prev             = cp->queue.prev;
  201bdc:	6850      	ldr	r0, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  201bde:	2601      	movs	r6, #1
  tp->queue.next             = cp;
  201be0:	602a      	str	r2, [r5, #0]
    chSysSwitch(ntp, otp);
  201be2:	4629      	mov	r1, r5
  tp->queue.prev             = cp->queue.prev;
  201be4:	6068      	str	r0, [r5, #4]
  tp->queue.prev->queue.next = tp;
  201be6:	6005      	str	r5, [r0, #0]
    chSysSwitch(ntp, otp);
  201be8:	4620      	mov	r0, r4
  cp->queue.prev             = tp;
  201bea:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  201bec:	f884 6020 	strb.w	r6, [r4, #32]
    currp = ntp;
  201bf0:	619c      	str	r4, [r3, #24]
}
  201bf2:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
  201bf4:	f7fe bb74 	b.w	2002e0 <_port_switch>
  201bf8:	20000be4 	.word	0x20000be4
  201bfc:	00000000 	.word	0x00000000

00201c00 <chSchGoSleepS>:
  thread_t *otp = currp;
  201c00:	4b08      	ldr	r3, [pc, #32]	; (201c24 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  201c02:	681a      	ldr	r2, [r3, #0]
  201c04:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  201c06:	b430      	push	{r4, r5}
  otp->state = newstate;
  201c08:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  201c0c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  201c0e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  201c10:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  201c12:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  201c14:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  201c16:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  201c1a:	619a      	str	r2, [r3, #24]
}
  201c1c:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201c1e:	f7fe bb5f 	b.w	2002e0 <_port_switch>
  201c22:	bf00      	nop
  201c24:	20000be4 	.word	0x20000be4
	...

00201c30 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != timeout) {
  201c30:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
  201c32:	b5f0      	push	{r4, r5, r6, r7, lr}
  201c34:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
  201c36:	d04c      	beq.n	201cd2 <chSchGoSleepTimeoutS+0xa2>
    chVTDoSetI(&vt, timeout, wakeup, currp);
  201c38:	4c41      	ldr	r4, [pc, #260]	; (201d40 <chSchGoSleepTimeoutS+0x110>)
  201c3a:	2902      	cmp	r1, #2

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  201c3c:	4a41      	ldr	r2, [pc, #260]	; (201d44 <chSchGoSleepTimeoutS+0x114>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  201c3e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201c42:	4625      	mov	r5, r4
  vtp->par = par;
  201c44:	69a3      	ldr	r3, [r4, #24]
  vtp->func = vtfunc;
  201c46:	9204      	str	r2, [sp, #16]
  201c48:	bf38      	it	cc
  201c4a:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201c4c:	f855 2f1c 	ldr.w	r2, [r5, #28]!
  201c50:	4607      	mov	r7, r0
  vtp->par = par;
  201c52:	9305      	str	r3, [sp, #20]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201c54:	42aa      	cmp	r2, r5
  201c56:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
  201c5a:	d05b      	beq.n	201d14 <chSchGoSleepTimeoutS+0xe4>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
  201c5c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  201c5e:	6890      	ldr	r0, [r2, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
  201c60:	1b9b      	subs	r3, r3, r6
  201c62:	1859      	adds	r1, r3, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
  201c64:	d32f      	bcc.n	201cc6 <chSchGoSleepTimeoutS+0x96>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
  201c66:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
  201c68:	1a09      	subs	r1, r1, r0
  201c6a:	6890      	ldr	r0, [r2, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  201c6c:	4281      	cmp	r1, r0
  201c6e:	d904      	bls.n	201c7a <chSchGoSleepTimeoutS+0x4a>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
  201c70:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
  201c72:	1a09      	subs	r1, r1, r0
  while (p->delta < delta) {
  201c74:	6890      	ldr	r0, [r2, #8]
  201c76:	4288      	cmp	r0, r1
  201c78:	d3fa      	bcc.n	201c70 <chSchGoSleepTimeoutS+0x40>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  201c7a:	6853      	ldr	r3, [r2, #4]
  vtp->prev->next = vtp;
  201c7c:	ae01      	add	r6, sp, #4
  vtp->next = p;
  201c7e:	9201      	str	r2, [sp, #4]
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
  201c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
  201c84:	9302      	str	r3, [sp, #8]
  vtp->prev->next = vtp;
  201c86:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
  201c88:	6056      	str	r6, [r2, #4]
  vtp->delta = delta;
  201c8a:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
  201c8c:	6893      	ldr	r3, [r2, #8]
  201c8e:	1a59      	subs	r1, r3, r1
  201c90:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
  201c92:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
  201c94:	4638      	mov	r0, r7
  201c96:	f7ff ffb3 	bl	201c00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  201c9a:	9b04      	ldr	r3, [sp, #16]
  201c9c:	b17b      	cbz	r3, 201cbe <chSchGoSleepTimeoutS+0x8e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
  201c9e:	69e2      	ldr	r2, [r4, #28]
  201ca0:	9b01      	ldr	r3, [sp, #4]
  201ca2:	42b2      	cmp	r2, r6
  201ca4:	d01c      	beq.n	201ce0 <chSchGoSleepTimeoutS+0xb0>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
  201ca6:	9a02      	ldr	r2, [sp, #8]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
  201ca8:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
  201caa:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
  201cac:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  201cae:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
  201cb0:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
  201cb2:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  201cb4:	d003      	beq.n	201cbe <chSchGoSleepTimeoutS+0x8e>
      vtp->next->delta += vtp->delta;
  201cb6:	689a      	ldr	r2, [r3, #8]
  201cb8:	9903      	ldr	r1, [sp, #12]
  201cba:	440a      	add	r2, r1
  201cbc:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
  201cbe:	69a3      	ldr	r3, [r4, #24]
}
  201cc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201cc2:	b007      	add	sp, #28
  201cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
  201cc6:	4281      	cmp	r1, r0
  201cc8:	d2d0      	bcs.n	201c6c <chSchGoSleepTimeoutS+0x3c>
  return systime + (systime_t)interval;
  201cca:	440e      	add	r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  201ccc:	f8cc 6034 	str.w	r6, [ip, #52]	; 0x34
  201cd0:	e7cc      	b.n	201c6c <chSchGoSleepTimeoutS+0x3c>
  201cd2:	4c1b      	ldr	r4, [pc, #108]	; (201d40 <chSchGoSleepTimeoutS+0x110>)
    chSchGoSleepS(newstate);
  201cd4:	f7ff ff94 	bl	201c00 <chSchGoSleepS>
  return currp->u.rdymsg;
  201cd8:	69a3      	ldr	r3, [r4, #24]
}
  201cda:	6a58      	ldr	r0, [r3, #36]	; 0x24
  201cdc:	b007      	add	sp, #28
  201cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
  201ce0:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201ce2:	42ab      	cmp	r3, r5
  ch.vtlist.next = vtp->next;
  201ce4:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  201ce6:	605d      	str	r5, [r3, #4]
  vtp->func = NULL;
  201ce8:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  201cea:	d024      	beq.n	201d36 <chSchGoSleepTimeoutS+0x106>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
  201cec:	689a      	ldr	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
  201cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  201cf2:	9d03      	ldr	r5, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
  201cf4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
  201cf6:	442a      	add	r2, r5
  201cf8:	609a      	str	r2, [r3, #8]
  201cfa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
  201cfc:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
  201cfe:	429a      	cmp	r2, r3
  201d00:	d9dd      	bls.n	201cbe <chSchGoSleepTimeoutS+0x8e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
  201d02:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
  201d04:	2801      	cmp	r0, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  201d06:	bf98      	it	ls
  201d08:	1c9a      	addls	r2, r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  201d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
  201d0e:	440a      	add	r2, r1
  201d10:	635a      	str	r2, [r3, #52]	; 0x34
  201d12:	e7d4      	b.n	201cbe <chSchGoSleepTimeoutS+0x8e>
      ch.vtlist.lasttime = now;
  201d14:	62a3      	str	r3, [r4, #40]	; 0x28
  201d16:	1858      	adds	r0, r3, r1
      ch.vtlist.next = vtp;
  201d18:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
  201d1a:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  201d1c:	2302      	movs	r3, #2
      vtp->delta = delay;
  201d1e:	9103      	str	r1, [sp, #12]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
  201d20:	e9cd 5501 	strd	r5, r5, [sp, #4]
      ch.vtlist.prev = vtp;
  201d24:	e9c4 6607 	strd	r6, r6, [r4, #28]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  201d28:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  201d2c:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  201d30:	f8cc 300c 	str.w	r3, [ip, #12]
  201d34:	e7ae      	b.n	201c94 <chSchGoSleepTimeoutS+0x64>
  STM32_ST_TIM->DIER = 0;
  201d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  201d3a:	60da      	str	r2, [r3, #12]
  201d3c:	e7bf      	b.n	201cbe <chSchGoSleepTimeoutS+0x8e>
  201d3e:	bf00      	nop
  201d40:	20000be4 	.word	0x20000be4
  201d44:	00201151 	.word	0x00201151
	...

00201d50 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
  201d50:	b161      	cbz	r1, 201d6c <chThdEnqueueTimeoutS+0x1c>
  201d52:	4602      	mov	r2, r0
  queue_insert(currp, tqp);
  201d54:	4b07      	ldr	r3, [pc, #28]	; (201d74 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201d56:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
  201d58:	699b      	ldr	r3, [r3, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
  201d5a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
  201d5c:	6854      	ldr	r4, [r2, #4]
  201d5e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
  201d62:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
  201d64:	6053      	str	r3, [r2, #4]
}
  201d66:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  201d68:	f7ff bf62 	b.w	201c30 <chSchGoSleepTimeoutS>
}
  201d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  201d70:	4770      	bx	lr
  201d72:	bf00      	nop
  201d74:	20000be4 	.word	0x20000be4
	...

00201d80 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
  201d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  201d82:	4604      	mov	r4, r0
  201d84:	460f      	mov	r7, r1
  201d86:	4616      	mov	r6, r2
  201d88:	2320      	movs	r3, #32
  201d8a:	f383 8811 	msr	BASEPRI, r3
  201d8e:	e003      	b.n	201d98 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
  201d90:	f7ff ffde 	bl	201d50 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201d94:	2800      	cmp	r0, #0
  201d96:	db19      	blt.n	201dcc <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
  201d98:	68a5      	ldr	r5, [r4, #8]
  201d9a:	4631      	mov	r1, r6
  201d9c:	4620      	mov	r0, r4
  201d9e:	2d00      	cmp	r5, #0
  201da0:	d0f6      	beq.n	201d90 <oqPutTimeout+0x10>
  *oqp->q_wrptr++ = b;
  201da2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
  201da4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201da6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
  201da8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
  201daa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
  201dac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
  201dae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  201db0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
  201db4:	429a      	cmp	r2, r3
  201db6:	d301      	bcc.n	201dbc <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
  201db8:	68e3      	ldr	r3, [r4, #12]
  201dba:	6163      	str	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
  201dbc:	69e3      	ldr	r3, [r4, #28]
  201dbe:	b10b      	cbz	r3, 201dc4 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
  201dc0:	4620      	mov	r0, r4
  201dc2:	4798      	blx	r3
  201dc4:	2000      	movs	r0, #0
  201dc6:	f380 8811 	msr	BASEPRI, r0
}
  201dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201dcc:	f385 8811 	msr	BASEPRI, r5
  201dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  201dd2:	bf00      	nop
	...

00201de0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  201de0:	3030      	adds	r0, #48	; 0x30
  201de2:	f7ff bfcd 	b.w	201d80 <oqPutTimeout>
  201de6:	bf00      	nop
	...

00201df0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  201df0:	3030      	adds	r0, #48	; 0x30
  201df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  201df6:	f7ff bfc3 	b.w	201d80 <oqPutTimeout>
  201dfa:	bf00      	nop
  201dfc:	0000      	movs	r0, r0
	...

00201e00 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
  201e00:	b570      	push	{r4, r5, r6, lr}
  201e02:	2320      	movs	r3, #32
  201e04:	4604      	mov	r4, r0
  201e06:	460e      	mov	r6, r1
  201e08:	f383 8811 	msr	BASEPRI, r3
  201e0c:	e003      	b.n	201e16 <iqGetTimeout+0x16>
  201e0e:	f7ff ff9f 	bl	201d50 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
  201e12:	2800      	cmp	r0, #0
  201e14:	db19      	blt.n	201e4a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
  201e16:	68a5      	ldr	r5, [r4, #8]
  201e18:	4631      	mov	r1, r6
  201e1a:	4620      	mov	r0, r4
  201e1c:	2d00      	cmp	r5, #0
  201e1e:	d0f6      	beq.n	201e0e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
  201e20:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
  201e22:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201e24:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201e26:	6920      	ldr	r0, [r4, #16]
  iqp->q_counter--;
  201e28:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
  201e2a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
  201e2c:	61a2      	str	r2, [r4, #24]
  iqp->q_counter--;
  201e2e:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  201e30:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
  201e32:	d301      	bcc.n	201e38 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
  201e34:	68e3      	ldr	r3, [r4, #12]
  201e36:	61a3      	str	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
  201e38:	69e3      	ldr	r3, [r4, #28]
  201e3a:	b10b      	cbz	r3, 201e40 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
  201e3c:	4620      	mov	r0, r4
  201e3e:	4798      	blx	r3
  201e40:	2300      	movs	r3, #0
  201e42:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
  201e46:	4628      	mov	r0, r5
}
  201e48:	bd70      	pop	{r4, r5, r6, pc}
  201e4a:	f385 8811 	msr	BASEPRI, r5
  201e4e:	bd70      	pop	{r4, r5, r6, pc}

00201e50 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201e50:	300c      	adds	r0, #12
  201e52:	f7ff bfd5 	b.w	201e00 <iqGetTimeout>
  201e56:	bf00      	nop
	...

00201e60 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201e60:	300c      	adds	r0, #12
  201e62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  201e66:	f7ff bfcb 	b.w	201e00 <iqGetTimeout>
  201e6a:	bf00      	nop
  201e6c:	0000      	movs	r0, r0
	...

00201e70 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  201e70:	b40e      	push	{r1, r2, r3}
  201e72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201e76:	b08e      	sub	sp, #56	; 0x38
  201e78:	4605      	mov	r5, r0
  int n = 0;
  201e7a:	f04f 0b00 	mov.w	fp, #0
    c = *fmt++;
  201e7e:	211b      	movs	r1, #27
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  201e80:	af18      	add	r7, sp, #96	; 0x60
    c = *fmt++;
  201e82:	f8df a400 	ldr.w	sl, [pc, #1024]	; 202284 <chprintf.constprop.0+0x414>
  va_start(ap, fmt);
  201e86:	9707      	str	r7, [sp, #28]
  201e88:	e001      	b.n	201e8e <chprintf.constprop.0+0x1e>
    if (c != '%') {
  201e8a:	2925      	cmp	r1, #37	; 0x25
  201e8c:	d011      	beq.n	201eb2 <chprintf.constprop.0+0x42>
      streamPut(chp, (uint8_t)c);
  201e8e:	682b      	ldr	r3, [r5, #0]
  201e90:	4628      	mov	r0, r5
      n++;
  201e92:	f10b 0b01 	add.w	fp, fp, #1
      streamPut(chp, (uint8_t)c);
  201e96:	68db      	ldr	r3, [r3, #12]
  201e98:	4798      	blx	r3
      n++;
  201e9a:	4653      	mov	r3, sl
    c = *fmt++;
  201e9c:	7819      	ldrb	r1, [r3, #0]
  201e9e:	f10a 0a01 	add.w	sl, sl, #1
    if (c == 0)
  201ea2:	2900      	cmp	r1, #0
  201ea4:	d1f1      	bne.n	201e8a <chprintf.constprop.0+0x1a>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  201ea6:	4658      	mov	r0, fp
  201ea8:	b00e      	add	sp, #56	; 0x38
  201eaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201eae:	b003      	add	sp, #12
  201eb0:	4770      	bx	lr
    if (*fmt == '-') {
  201eb2:	785a      	ldrb	r2, [r3, #1]
  201eb4:	2a2d      	cmp	r2, #45	; 0x2d
  201eb6:	f000 817b 	beq.w	2021b0 <chprintf.constprop.0+0x340>
    left_align = FALSE;
  201eba:	2300      	movs	r3, #0
  201ebc:	9300      	str	r3, [sp, #0]
    if (*fmt == '0') {
  201ebe:	f89a 8000 	ldrb.w	r8, [sl]
    width = 0;
  201ec2:	2400      	movs	r4, #0
    if (*fmt == '0') {
  201ec4:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  201ec8:	bf0c      	ite	eq
  201eca:	f10a 0a01 	addeq.w	sl, sl, #1
    filler = ' ';
  201ece:	f04f 0820 	movne.w	r8, #32
  201ed2:	e003      	b.n	201edc <chprintf.constprop.0+0x6c>
        c = va_arg(ap, int);
  201ed4:	783b      	ldrb	r3, [r7, #0]
  201ed6:	3704      	adds	r7, #4
      width = width * 10 + c;
  201ed8:	eb03 0442 	add.w	r4, r3, r2, lsl #1
      c = *fmt++;
  201edc:	f81a 1b01 	ldrb.w	r1, [sl], #1
      width = width * 10 + c;
  201ee0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  201ee4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  201ee8:	b2db      	uxtb	r3, r3
  201eea:	2b09      	cmp	r3, #9
  201eec:	d9f4      	bls.n	201ed8 <chprintf.constprop.0+0x68>
      else if (c == '*')
  201eee:	292a      	cmp	r1, #42	; 0x2a
  201ef0:	d0f0      	beq.n	201ed4 <chprintf.constprop.0+0x64>
    if (c == '.') {
  201ef2:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
  201ef4:	f04f 0300 	mov.w	r3, #0
    if (c == '.') {
  201ef8:	f000 80a3 	beq.w	202042 <chprintf.constprop.0+0x1d2>
    if (c == 'l' || c == 'L') {
  201efc:	f001 02df 	and.w	r2, r1, #223	; 0xdf
  201f00:	f89a 0000 	ldrb.w	r0, [sl]
  201f04:	2a4c      	cmp	r2, #76	; 0x4c
  201f06:	f040 80a8 	bne.w	20205a <chprintf.constprop.0+0x1ea>
      if (*fmt)
  201f0a:	2800      	cmp	r0, #0
  201f0c:	f040 80d5 	bne.w	2020ba <chprintf.constprop.0+0x24a>
    switch (c) {
  201f10:	2964      	cmp	r1, #100	; 0x64
  201f12:	f000 81a5 	beq.w	202260 <chprintf.constprop.0+0x3f0>
  201f16:	f240 80d4 	bls.w	2020c2 <chprintf.constprop.0+0x252>
  201f1a:	296f      	cmp	r1, #111	; 0x6f
  201f1c:	f000 8187 	beq.w	20222e <chprintf.constprop.0+0x3be>
  201f20:	f200 80a6 	bhi.w	202070 <chprintf.constprop.0+0x200>
  201f24:	2966      	cmp	r1, #102	; 0x66
  201f26:	f040 81b9 	bne.w	20229c <chprintf.constprop.0+0x42c>
      f = (float) va_arg(ap, double);
  201f2a:	f107 0907 	add.w	r9, r7, #7
  201f2e:	9304      	str	r3, [sp, #16]
  201f30:	f029 0907 	bic.w	r9, r9, #7
  201f34:	f109 0308 	add.w	r3, r9, #8
  201f38:	e9d9 0100 	ldrd	r0, r1, [r9]
  201f3c:	9301      	str	r3, [sp, #4]
  201f3e:	f7fe fe73 	bl	200c28 <__aeabi_d2f>
      if (f < 0) {
  201f42:	2100      	movs	r1, #0
      f = (float) va_arg(ap, double);
  201f44:	4607      	mov	r7, r0
      if (f < 0) {
  201f46:	f7fe ff0d 	bl	200d64 <__aeabi_fcmplt>
  201f4a:	9b04      	ldr	r3, [sp, #16]
  201f4c:	2800      	cmp	r0, #0
  201f4e:	f040 819b 	bne.w	202288 <chprintf.constprop.0+0x418>
    p = tmpbuf;
  201f52:	f10d 0920 	add.w	r9, sp, #32
  201f56:	464e      	mov	r6, r9
      p = ftoa(p, f, precision);
  201f58:	4638      	mov	r0, r7
  201f5a:	9304      	str	r3, [sp, #16]
  201f5c:	f7fe fbd2 	bl	200704 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
  201f60:	9b04      	ldr	r3, [sp, #16]
  201f62:	1e5a      	subs	r2, r3, #1
    precision = FLOAT_PRECISION;
  201f64:	2a09      	cmp	r2, #9
  precision = pow10[precision - 1];
  201f66:	4ac5      	ldr	r2, [pc, #788]	; (20227c <chprintf.constprop.0+0x40c>)
    precision = FLOAT_PRECISION;
  201f68:	bf28      	it	cs
  201f6a:	2309      	movcs	r3, #9
  precision = pow10[precision - 1];
  201f6c:	3b01      	subs	r3, #1
  201f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      p = ftoa(p, f, precision);
  201f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
  l = (long)num;
  201f76:	4638      	mov	r0, r7
  precision = pow10[precision - 1];
  201f78:	9305      	str	r3, [sp, #20]
  l = (long)num;
  201f7a:	f7fe ff1b 	bl	200db4 <__aeabi_f2iz>
  q = p + MAX_FILLER;
  201f7e:	f106 0c0b 	add.w	ip, r6, #11
  l = (long)num;
  201f82:	4686      	mov	lr, r0
    i = (int)(l % radix);
  201f84:	270a      	movs	r7, #10
  l = num;
  201f86:	4602      	mov	r2, r0
  q = p + MAX_FILLER;
  201f88:	4663      	mov	r3, ip
    i = (int)(l % radix);
  201f8a:	fbb2 f0f7 	udiv	r0, r2, r7
  201f8e:	fb07 2110 	mls	r1, r7, r0, r2
  } while ((ll /= radix) != 0);
  201f92:	4602      	mov	r2, r0
    i += '0';
  201f94:	3130      	adds	r1, #48	; 0x30
    *--q = i;
  201f96:	f803 1d01 	strb.w	r1, [r3, #-1]!
  } while ((ll /= radix) != 0);
  201f9a:	2800      	cmp	r0, #0
  201f9c:	d1f5      	bne.n	201f8a <chprintf.constprop.0+0x11a>
  i = (int)(p + MAX_FILLER - q);
  201f9e:	ebac 0c03 	sub.w	ip, ip, r3
  201fa2:	1e72      	subs	r2, r6, #1
  201fa4:	eb03 000c 	add.w	r0, r3, ip
    *p++ = *q++;
  201fa8:	f813 1b01 	ldrb.w	r1, [r3], #1
  while (--i);
  201fac:	4283      	cmp	r3, r0
    *p++ = *q++;
  201fae:	f802 1f01 	strb.w	r1, [r2, #1]!
  while (--i);
  201fb2:	d1f9      	bne.n	201fa8 <chprintf.constprop.0+0x138>
  201fb4:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
  *p++ = '.';
  201fb8:	232e      	movs	r3, #46	; 0x2e
  l = (long)((num - l) * precision);
  201fba:	4670      	mov	r0, lr
  201fbc:	18b7      	adds	r7, r6, r2
  *p++ = '.';
  201fbe:	f806 300c 	strb.w	r3, [r6, ip]
  201fc2:	9704      	str	r7, [sp, #16]
  l = (long)((num - l) * precision);
  201fc4:	f7fe fb8c 	bl	2006e0 <__aeabi_i2d>
  201fc8:	4602      	mov	r2, r0
  201fca:	460b      	mov	r3, r1
  201fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  201fd0:	f7fe fa38 	bl	200444 <__aeabi_dsub>
  201fd4:	9e05      	ldr	r6, [sp, #20]
  201fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  201fda:	4630      	mov	r0, r6
  201fdc:	f7fe fb70 	bl	2006c0 <__aeabi_ui2d>
  201fe0:	4602      	mov	r2, r0
  201fe2:	460b      	mov	r3, r1
  201fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  201fe8:	f7fe fbe4 	bl	2007b4 <__aeabi_dmul>
  201fec:	f7fe fdf4 	bl	200bd8 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
  201ff0:	f04f 0c0a 	mov.w	ip, #10
  q = p + MAX_FILLER;
  201ff4:	f107 030d 	add.w	r3, r7, #13
  return long_to_string_with_divisor(p, l, 10, precision / 10);
  201ff8:	fbb6 f7fc 	udiv	r7, r6, ip
  q = p + MAX_FILLER;
  201ffc:	461a      	mov	r2, r3
  return long_to_string_with_divisor(p, l, 10, precision / 10);
  201ffe:	2f00      	cmp	r7, #0
  202000:	bf08      	it	eq
  202002:	4607      	moveq	r7, r0
    i = (int)(l % radix);
  202004:	fbb0 f6fc 	udiv	r6, r0, ip
  } while ((ll /= radix) != 0);
  202008:	fbb7 f7fc 	udiv	r7, r7, ip
    i = (int)(l % radix);
  20200c:	fb0c 0116 	mls	r1, ip, r6, r0
    l /= radix;
  202010:	4630      	mov	r0, r6
    i += '0';
  202012:	3130      	adds	r1, #48	; 0x30
    *--q = i;
  202014:	f802 1d01 	strb.w	r1, [r2, #-1]!
  } while ((ll /= radix) != 0);
  202018:	2f00      	cmp	r7, #0
  20201a:	d1f3      	bne.n	202004 <chprintf.constprop.0+0x194>
  i = (int)(p + MAX_FILLER - q);
  20201c:	1a9b      	subs	r3, r3, r2
  20201e:	9904      	ldr	r1, [sp, #16]
  202020:	18d7      	adds	r7, r2, r3
  202022:	3101      	adds	r1, #1
    *p++ = *q++;
  202024:	f812 0b01 	ldrb.w	r0, [r2], #1
  while (--i);
  202028:	4297      	cmp	r7, r2
    *p++ = *q++;
  20202a:	f801 0f01 	strb.w	r0, [r1, #1]!
  while (--i);
  20202e:	d1f9      	bne.n	202024 <chprintf.constprop.0+0x1b4>
  202030:	3302      	adds	r3, #2
  202032:	9a04      	ldr	r2, [sp, #16]
  202034:	441a      	add	r2, r3
  202036:	4617      	mov	r7, r2
  202038:	e058      	b.n	2020ec <chprintf.constprop.0+0x27c>
          c = va_arg(ap, int);
  20203a:	783a      	ldrb	r2, [r7, #0]
  20203c:	3704      	adds	r7, #4
        precision += c;
  20203e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
        c = *fmt++;
  202042:	f81a 1b01 	ldrb.w	r1, [sl], #1
        precision *= 10;
  202046:	eb03 0083 	add.w	r0, r3, r3, lsl #2
        if (c >= '0' && c <= '9')
  20204a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
  20204e:	b2d2      	uxtb	r2, r2
  202050:	2a09      	cmp	r2, #9
  202052:	d9f4      	bls.n	20203e <chprintf.constprop.0+0x1ce>
        else if (c == '*')
  202054:	292a      	cmp	r1, #42	; 0x2a
  202056:	d0f0      	beq.n	20203a <chprintf.constprop.0+0x1ca>
  202058:	e750      	b.n	201efc <chprintf.constprop.0+0x8c>
      is_long = (c >= 'A') && (c <= 'Z');
  20205a:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
    switch (c) {
  20205e:	2964      	cmp	r1, #100	; 0x64
      is_long = (c >= 'A') && (c <= 'Z');
  202060:	b2d2      	uxtb	r2, r2
    switch (c) {
  202062:	d070      	beq.n	202146 <chprintf.constprop.0+0x2d6>
  202064:	d968      	bls.n	202138 <chprintf.constprop.0+0x2c8>
  202066:	296f      	cmp	r1, #111	; 0x6f
  202068:	f000 80e1 	beq.w	20222e <chprintf.constprop.0+0x3be>
  20206c:	f240 80ed 	bls.w	20224a <chprintf.constprop.0+0x3da>
  202070:	2975      	cmp	r1, #117	; 0x75
  202072:	f000 80d9 	beq.w	202228 <chprintf.constprop.0+0x3b8>
  202076:	2978      	cmp	r1, #120	; 0x78
  202078:	f000 80b1 	beq.w	2021de <chprintf.constprop.0+0x36e>
  20207c:	2973      	cmp	r1, #115	; 0x73
  20207e:	f040 808d 	bne.w	20219c <chprintf.constprop.0+0x32c>
      if ((s = va_arg(ap, char *)) == 0)
  202082:	1d3a      	adds	r2, r7, #4
        precision = 32767;
  202084:	f647 71ff 	movw	r1, #32767	; 0x7fff
      if ((s = va_arg(ap, char *)) == 0)
  202088:	f8d7 9000 	ldr.w	r9, [r7]
  20208c:	9201      	str	r2, [sp, #4]
        precision = 32767;
  20208e:	2b00      	cmp	r3, #0
  202090:	bf08      	it	eq
  202092:	460b      	moveq	r3, r1
        s = "(null)";
  202094:	4a7a      	ldr	r2, [pc, #488]	; (202280 <chprintf.constprop.0+0x410>)
  202096:	f1b9 0f00 	cmp.w	r9, #0
  20209a:	bf08      	it	eq
  20209c:	4691      	moveq	r9, r2
        precision = 32767;
  20209e:	4649      	mov	r1, r9
  2020a0:	444b      	add	r3, r9
  2020a2:	e001      	b.n	2020a8 <chprintf.constprop.0+0x238>
      for (p = s; *p && (--precision >= 0); p++)
  2020a4:	2800      	cmp	r0, #0
  2020a6:	db05      	blt.n	2020b4 <chprintf.constprop.0+0x244>
  2020a8:	780a      	ldrb	r2, [r1, #0]
  2020aa:	460f      	mov	r7, r1
  2020ac:	3101      	adds	r1, #1
  2020ae:	1a58      	subs	r0, r3, r1
  2020b0:	2a00      	cmp	r2, #0
  2020b2:	d1f7      	bne.n	2020a4 <chprintf.constprop.0+0x234>
      filler = ' ';
  2020b4:	f04f 0820 	mov.w	r8, #32
  2020b8:	e018      	b.n	2020ec <chprintf.constprop.0+0x27c>
  2020ba:	f10a 0a01 	add.w	sl, sl, #1
      if (*fmt)
  2020be:	4601      	mov	r1, r0
  2020c0:	e726      	b.n	201f10 <chprintf.constprop.0+0xa0>
    switch (c) {
  2020c2:	294f      	cmp	r1, #79	; 0x4f
  2020c4:	f000 80b3 	beq.w	20222e <chprintf.constprop.0+0x3be>
  2020c8:	f240 80c6 	bls.w	202258 <chprintf.constprop.0+0x3e8>
  2020cc:	2958      	cmp	r1, #88	; 0x58
  2020ce:	f000 8086 	beq.w	2021de <chprintf.constprop.0+0x36e>
  2020d2:	2963      	cmp	r1, #99	; 0x63
  2020d4:	d160      	bne.n	202198 <chprintf.constprop.0+0x328>
      *p++ = va_arg(ap, int);
  2020d6:	683b      	ldr	r3, [r7, #0]
  2020d8:	1d3a      	adds	r2, r7, #4
  2020da:	f10d 0938 	add.w	r9, sp, #56	; 0x38
      filler = ' ';
  2020de:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  2020e2:	f10d 0721 	add.w	r7, sp, #33	; 0x21
  2020e6:	9201      	str	r2, [sp, #4]
  2020e8:	f809 3d18 	strb.w	r3, [r9, #-24]!
    i = (int)(p - s);
  2020ec:	eba7 0709 	sub.w	r7, r7, r9
    if (left_align == FALSE)
  2020f0:	9a00      	ldr	r2, [sp, #0]
    if ((width -= i) < 0)
  2020f2:	1be3      	subs	r3, r4, r7
  2020f4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    if (left_align == FALSE)
  2020f8:	2a00      	cmp	r2, #0
  2020fa:	d157      	bne.n	2021ac <chprintf.constprop.0+0x33c>
    if (width < 0) {
  2020fc:	2b00      	cmp	r3, #0
      width = -width;
  2020fe:	f1c4 0600 	rsb	r6, r4, #0
    if (width < 0) {
  202102:	dc5a      	bgt.n	2021ba <chprintf.constprop.0+0x34a>
    while (--i >= 0) {
  202104:	2f00      	cmp	r7, #0
  202106:	dd0a      	ble.n	20211e <chprintf.constprop.0+0x2ae>
  202108:	eb09 0407 	add.w	r4, r9, r7
      streamPut(chp, (uint8_t)*s++);
  20210c:	682b      	ldr	r3, [r5, #0]
  20210e:	4628      	mov	r0, r5
  202110:	f819 1b01 	ldrb.w	r1, [r9], #1
  202114:	68db      	ldr	r3, [r3, #12]
  202116:	4798      	blx	r3
    while (--i >= 0) {
  202118:	45a1      	cmp	r9, r4
  20211a:	d1f7      	bne.n	20210c <chprintf.constprop.0+0x29c>
  20211c:	44bb      	add	fp, r7
    while (width) {
  20211e:	b146      	cbz	r6, 202132 <chprintf.constprop.0+0x2c2>
  202120:	4634      	mov	r4, r6
      streamPut(chp, (uint8_t)filler);
  202122:	682b      	ldr	r3, [r5, #0]
  202124:	4641      	mov	r1, r8
  202126:	4628      	mov	r0, r5
  202128:	68db      	ldr	r3, [r3, #12]
  20212a:	4798      	blx	r3
    while (width) {
  20212c:	3c01      	subs	r4, #1
  20212e:	d1f8      	bne.n	202122 <chprintf.constprop.0+0x2b2>
  202130:	44b3      	add	fp, r6
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  202132:	9f01      	ldr	r7, [sp, #4]
  202134:	4653      	mov	r3, sl
  202136:	e6b1      	b.n	201e9c <chprintf.constprop.0+0x2c>
    switch (c) {
  202138:	294f      	cmp	r1, #79	; 0x4f
  20213a:	d078      	beq.n	20222e <chprintf.constprop.0+0x3be>
  20213c:	d8c6      	bhi.n	2020cc <chprintf.constprop.0+0x25c>
  20213e:	2944      	cmp	r1, #68	; 0x44
  202140:	d001      	beq.n	202146 <chprintf.constprop.0+0x2d6>
  202142:	2949      	cmp	r1, #73	; 0x49
  202144:	d12a      	bne.n	20219c <chprintf.constprop.0+0x32c>
  202146:	463b      	mov	r3, r7
      if (is_long)
  202148:	2a19      	cmp	r2, #25
  20214a:	f853 1b04 	ldr.w	r1, [r3], #4
  20214e:	9301      	str	r3, [sp, #4]
  202150:	f240 8087 	bls.w	202262 <chprintf.constprop.0+0x3f2>
      if (l < 0) {
  202154:	2900      	cmp	r1, #0
  202156:	f2c0 8087 	blt.w	202268 <chprintf.constprop.0+0x3f8>
    p = tmpbuf;
  20215a:	f10d 0920 	add.w	r9, sp, #32
  20215e:	46ce      	mov	lr, r9
  q = p + MAX_FILLER;
  202160:	f10e 030b 	add.w	r3, lr, #11
    i = (int)(l % radix);
  202164:	f04f 0c0a 	mov.w	ip, #10
  q = p + MAX_FILLER;
  202168:	461a      	mov	r2, r3
    i = (int)(l % radix);
  20216a:	fbb1 f6fc 	udiv	r6, r1, ip
  20216e:	fb0c 1016 	mls	r0, ip, r6, r1
  } while ((ll /= radix) != 0);
  202172:	4631      	mov	r1, r6
    i += '0';
  202174:	3030      	adds	r0, #48	; 0x30
    *--q = i;
  202176:	f802 0d01 	strb.w	r0, [r2, #-1]!
  } while ((ll /= radix) != 0);
  20217a:	2e00      	cmp	r6, #0
  20217c:	d1f5      	bne.n	20216a <chprintf.constprop.0+0x2fa>
  i = (int)(p + MAX_FILLER - q);
  20217e:	1a9f      	subs	r7, r3, r2
  202180:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
  202184:	eb02 0c07 	add.w	ip, r2, r7
    *p++ = *q++;
  202188:	f812 3b01 	ldrb.w	r3, [r2], #1
  while (--i);
  20218c:	4562      	cmp	r2, ip
    *p++ = *q++;
  20218e:	f801 3f01 	strb.w	r3, [r1, #1]!
  while (--i);
  202192:	d1f9      	bne.n	202188 <chprintf.constprop.0+0x318>
  202194:	4477      	add	r7, lr
  202196:	e7a9      	b.n	2020ec <chprintf.constprop.0+0x27c>
    switch (c) {
  202198:	2955      	cmp	r1, #85	; 0x55
  20219a:	d045      	beq.n	202228 <chprintf.constprop.0+0x3b8>
      *p++ = c;
  20219c:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  2021a0:	9701      	str	r7, [sp, #4]
  2021a2:	f10d 0721 	add.w	r7, sp, #33	; 0x21
  2021a6:	f809 1d18 	strb.w	r1, [r9, #-24]!
  2021aa:	e79f      	b.n	2020ec <chprintf.constprop.0+0x27c>
    if (left_align == FALSE)
  2021ac:	4626      	mov	r6, r4
  2021ae:	e7a9      	b.n	202104 <chprintf.constprop.0+0x294>
      fmt++;
  2021b0:	f103 0a02 	add.w	sl, r3, #2
      left_align = TRUE;
  2021b4:	2301      	movs	r3, #1
  2021b6:	9300      	str	r3, [sp, #0]
  2021b8:	e681      	b.n	201ebe <chprintf.constprop.0+0x4e>
      if (*s == '-' && filler == '0') {
  2021ba:	f899 3000 	ldrb.w	r3, [r9]
  2021be:	2b2d      	cmp	r3, #45	; 0x2d
  2021c0:	d102      	bne.n	2021c8 <chprintf.constprop.0+0x358>
  2021c2:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  2021c6:	d035      	beq.n	202234 <chprintf.constprop.0+0x3c4>
        streamPut(chp, (uint8_t)filler);
  2021c8:	682b      	ldr	r3, [r5, #0]
  2021ca:	4641      	mov	r1, r8
  2021cc:	4628      	mov	r0, r5
  2021ce:	68db      	ldr	r3, [r3, #12]
  2021d0:	4798      	blx	r3
      } while (++width != 0);
  2021d2:	3601      	adds	r6, #1
  2021d4:	d1f8      	bne.n	2021c8 <chprintf.constprop.0+0x358>
    while (--i >= 0) {
  2021d6:	2f00      	cmp	r7, #0
  2021d8:	44a3      	add	fp, r4
  2021da:	dc95      	bgt.n	202108 <chprintf.constprop.0+0x298>
  2021dc:	e7a9      	b.n	202132 <chprintf.constprop.0+0x2c2>
      c = 16;
  2021de:	f04f 0c10 	mov.w	ip, #16
  2021e2:	463b      	mov	r3, r7
  q = p + MAX_FILLER;
  2021e4:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
  2021e8:	f853 0b04 	ldr.w	r0, [r3], #4
  2021ec:	9301      	str	r3, [sp, #4]
  2021ee:	463b      	mov	r3, r7
    i = (int)(l % radix);
  2021f0:	fbb0 f2fc 	udiv	r2, r0, ip
  2021f4:	fb0c 0612 	mls	r6, ip, r2, r0
    l /= radix;
  2021f8:	4610      	mov	r0, r2
    i += '0';
  2021fa:	f106 0130 	add.w	r1, r6, #48	; 0x30
    if (i > '9')
  2021fe:	2939      	cmp	r1, #57	; 0x39
      i += 'A' - '0' - 10;
  202200:	bfc8      	it	gt
  202202:	f106 0137 	addgt.w	r1, r6, #55	; 0x37
    *--q = i;
  202206:	f803 1d01 	strb.w	r1, [r3, #-1]!
  } while ((ll /= radix) != 0);
  20220a:	2a00      	cmp	r2, #0
  20220c:	d1f0      	bne.n	2021f0 <chprintf.constprop.0+0x380>
  i = (int)(p + MAX_FILLER - q);
  20220e:	1aff      	subs	r7, r7, r3
  202210:	f10d 0920 	add.w	r9, sp, #32
  202214:	19d8      	adds	r0, r3, r7
  202216:	464a      	mov	r2, r9
    *p++ = *q++;
  202218:	f813 1b01 	ldrb.w	r1, [r3], #1
  while (--i);
  20221c:	4298      	cmp	r0, r3
    *p++ = *q++;
  20221e:	f802 1b01 	strb.w	r1, [r2], #1
  while (--i);
  202222:	d1f9      	bne.n	202218 <chprintf.constprop.0+0x3a8>
  202224:	444f      	add	r7, r9
  202226:	e761      	b.n	2020ec <chprintf.constprop.0+0x27c>
      c = 10;
  202228:	f04f 0c0a 	mov.w	ip, #10
  20222c:	e7d9      	b.n	2021e2 <chprintf.constprop.0+0x372>
      c = 8;
  20222e:	f04f 0c08 	mov.w	ip, #8
  202232:	e7d6      	b.n	2021e2 <chprintf.constprop.0+0x372>
        streamPut(chp, (uint8_t)*s++);
  202234:	682b      	ldr	r3, [r5, #0]
  202236:	212d      	movs	r1, #45	; 0x2d
  202238:	4628      	mov	r0, r5
  20223a:	3f01      	subs	r7, #1
  20223c:	68db      	ldr	r3, [r3, #12]
  20223e:	f10b 0b01 	add.w	fp, fp, #1
  202242:	f109 0901 	add.w	r9, r9, #1
  202246:	4798      	blx	r3
  202248:	e7be      	b.n	2021c8 <chprintf.constprop.0+0x358>
    switch (c) {
  20224a:	2966      	cmp	r1, #102	; 0x66
  20224c:	f43f ae6d 	beq.w	201f2a <chprintf.constprop.0+0xba>
  202250:	2969      	cmp	r1, #105	; 0x69
  202252:	f43f af78 	beq.w	202146 <chprintf.constprop.0+0x2d6>
  202256:	e7a1      	b.n	20219c <chprintf.constprop.0+0x32c>
  202258:	2944      	cmp	r1, #68	; 0x44
  20225a:	d001      	beq.n	202260 <chprintf.constprop.0+0x3f0>
  20225c:	2949      	cmp	r1, #73	; 0x49
  20225e:	d19d      	bne.n	20219c <chprintf.constprop.0+0x32c>
  202260:	1d3b      	adds	r3, r7, #4
        l = va_arg(ap, long);
  202262:	9301      	str	r3, [sp, #4]
  202264:	6839      	ldr	r1, [r7, #0]
  202266:	e775      	b.n	202154 <chprintf.constprop.0+0x2e4>
        *p++ = '-';
  202268:	232d      	movs	r3, #45	; 0x2d
        l = -l;
  20226a:	4249      	negs	r1, r1
        *p++ = '-';
  20226c:	f10d 0e21 	add.w	lr, sp, #33	; 0x21
  202270:	f10d 0920 	add.w	r9, sp, #32
  202274:	f88d 3020 	strb.w	r3, [sp, #32]
  202278:	e772      	b.n	202160 <chprintf.constprop.0+0x2f0>
  20227a:	bf00      	nop
  20227c:	0800399c 	.word	0x0800399c
  202280:	08003984 	.word	0x08003984
  202284:	08003979 	.word	0x08003979
        *p++ = '-';
  202288:	222d      	movs	r2, #45	; 0x2d
        f = -f;
  20228a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
        *p++ = '-';
  20228e:	f10d 0621 	add.w	r6, sp, #33	; 0x21
  202292:	f10d 0920 	add.w	r9, sp, #32
  202296:	f88d 2020 	strb.w	r2, [sp, #32]
  20229a:	e65d      	b.n	201f58 <chprintf.constprop.0+0xe8>
    switch (c) {
  20229c:	2969      	cmp	r1, #105	; 0x69
  20229e:	f47f af7d 	bne.w	20219c <chprintf.constprop.0+0x32c>
  2022a2:	e7dd      	b.n	202260 <chprintf.constprop.0+0x3f0>
	...

002022b0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  2022b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2022b4:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
  2022b6:	f8d0 901c 	ldr.w	r9, [r0, #28]
  2022ba:	f04f 0a20 	mov.w	sl, #32
                      size_t n, sysinterval_t timeout) {
  2022be:	e9cd 3202 	strd	r3, r2, [sp, #8]
  2022c2:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
  2022c6:	b332      	cbz	r2, 202316 <oqWriteTimeout+0x66>
  2022c8:	4604      	mov	r4, r0
  2022ca:	460f      	mov	r7, r1
  2022cc:	4616      	mov	r6, r2
  2022ce:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
  2022d2:	68a2      	ldr	r2, [r4, #8]
  2022d4:	4296      	cmp	r6, r2
  2022d6:	d925      	bls.n	202324 <oqWriteTimeout+0x74>
    n = oqGetEmptyI(oqp);
  2022d8:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  2022da:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  2022de:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
  2022e2:	45a8      	cmp	r8, r5
  2022e4:	d825      	bhi.n	202332 <oqWriteTimeout+0x82>
  else if (n > s1) {
  2022e6:	d33e      	bcc.n	202366 <oqWriteTimeout+0xb6>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  2022e8:	462a      	mov	r2, r5
  2022ea:	4639      	mov	r1, r7
  2022ec:	f7fe f80c 	bl	200308 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
  2022f0:	68e2      	ldr	r2, [r4, #12]
  2022f2:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
  2022f4:	68a2      	ldr	r2, [r4, #8]
  2022f6:	1b52      	subs	r2, r2, r5
  2022f8:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
  2022fa:	b335      	cbz	r5, 20234a <oqWriteTimeout+0x9a>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
  2022fc:	f1b9 0f00 	cmp.w	r9, #0
  202300:	d001      	beq.n	202306 <oqWriteTimeout+0x56>
        nfy(oqp);
  202302:	4620      	mov	r0, r4
  202304:	47c8      	blx	r9
  202306:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
  20230a:	1b76      	subs	r6, r6, r5
      bp += done;
  20230c:	442f      	add	r7, r5
  20230e:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
  202312:	2e00      	cmp	r6, #0
  202314:	d1dd      	bne.n	2022d2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
  202316:	9803      	ldr	r0, [sp, #12]
  202318:	2300      	movs	r3, #0
  20231a:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
  20231e:	b005      	add	sp, #20
  202320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  202324:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
  202328:	4635      	mov	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  20232a:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
  20232e:	45a8      	cmp	r8, r5
  202330:	d9d9      	bls.n	2022e6 <oqWriteTimeout+0x36>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  202332:	462a      	mov	r2, r5
  202334:	4639      	mov	r1, r7
  202336:	f7fd ffe7 	bl	200308 <memcpy>
    oqp->q_wrptr += n;
  20233a:	6962      	ldr	r2, [r4, #20]
  20233c:	442a      	add	r2, r5
  20233e:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
  202340:	68a2      	ldr	r2, [r4, #8]
  202342:	1b52      	subs	r2, r2, r5
  202344:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
  202346:	2d00      	cmp	r5, #0
  202348:	d1d8      	bne.n	2022fc <oqWriteTimeout+0x4c>
  20234a:	9902      	ldr	r1, [sp, #8]
  20234c:	4620      	mov	r0, r4
  20234e:	f7ff fcff 	bl	201d50 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  202352:	2800      	cmp	r0, #0
  202354:	d0bd      	beq.n	2022d2 <oqWriteTimeout+0x22>
  202356:	9b03      	ldr	r3, [sp, #12]
  202358:	1b98      	subs	r0, r3, r6
  20235a:	2300      	movs	r3, #0
  20235c:	f383 8811 	msr	BASEPRI, r3
}
  202360:	b005      	add	sp, #20
  202362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
  202366:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
  20236a:	4642      	mov	r2, r8
  20236c:	4639      	mov	r1, r7
    s2 = n - s1;
  20236e:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
  202370:	f7fd ffca 	bl	200308 <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
  202374:	eb07 0108 	add.w	r1, r7, r8
  202378:	f8dd 8004 	ldr.w	r8, [sp, #4]
  20237c:	68e0      	ldr	r0, [r4, #12]
  20237e:	4642      	mov	r2, r8
  202380:	f7fd ffc2 	bl	200308 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
  202384:	68e2      	ldr	r2, [r4, #12]
  202386:	4643      	mov	r3, r8
  202388:	18d3      	adds	r3, r2, r3
  20238a:	6163      	str	r3, [r4, #20]
  20238c:	e7b2      	b.n	2022f4 <oqWriteTimeout+0x44>
  20238e:	bf00      	nop

00202390 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  202390:	3030      	adds	r0, #48	; 0x30
  202392:	f7ff bf8d 	b.w	2022b0 <oqWriteTimeout>
  202396:	bf00      	nop
	...

002023a0 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  2023a0:	3030      	adds	r0, #48	; 0x30
  2023a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  2023a6:	f7ff bf83 	b.w	2022b0 <oqWriteTimeout>
  2023aa:	bf00      	nop
  2023ac:	0000      	movs	r0, r0
	...

002023b0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
  2023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2023b4:	b085      	sub	sp, #20
  qnotify_t nfy = iqp->q_notify;
  2023b6:	f8d0 901c 	ldr.w	r9, [r0, #28]
  2023ba:	f04f 0a20 	mov.w	sl, #32
                     size_t n, sysinterval_t timeout) {
  2023be:	e9cd 3202 	strd	r3, r2, [sp, #8]
  2023c2:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
  2023c6:	b332      	cbz	r2, 202416 <iqReadTimeout+0x66>
  2023c8:	4604      	mov	r4, r0
  2023ca:	460f      	mov	r7, r1
  2023cc:	4616      	mov	r6, r2
  2023ce:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
  2023d2:	68a2      	ldr	r2, [r4, #8]
  2023d4:	4296      	cmp	r6, r2
  2023d6:	d925      	bls.n	202424 <iqReadTimeout+0x74>
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  2023d8:	69a1      	ldr	r1, [r4, #24]
  2023da:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
  2023dc:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  2023de:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
  2023e2:	45a8      	cmp	r8, r5
  2023e4:	d825      	bhi.n	202432 <iqReadTimeout+0x82>
  else if (n > s1) {
  2023e6:	d33e      	bcc.n	202466 <iqReadTimeout+0xb6>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  2023e8:	462a      	mov	r2, r5
  2023ea:	4638      	mov	r0, r7
  2023ec:	f7fd ff8c 	bl	200308 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
  2023f0:	68e2      	ldr	r2, [r4, #12]
  2023f2:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
  2023f4:	68a2      	ldr	r2, [r4, #8]
  2023f6:	1b52      	subs	r2, r2, r5
  2023f8:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
  2023fa:	b335      	cbz	r5, 20244a <iqReadTimeout+0x9a>
      if (nfy != NULL) {
  2023fc:	f1b9 0f00 	cmp.w	r9, #0
  202400:	d001      	beq.n	202406 <iqReadTimeout+0x56>
        nfy(iqp);
  202402:	4620      	mov	r0, r4
  202404:	47c8      	blx	r9
  202406:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
  20240a:	1b76      	subs	r6, r6, r5
      bp += done;
  20240c:	442f      	add	r7, r5
  20240e:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
  202412:	2e00      	cmp	r6, #0
  202414:	d1dd      	bne.n	2023d2 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
  202416:	9803      	ldr	r0, [sp, #12]
  202418:	2300      	movs	r3, #0
  20241a:	f383 8811 	msr	BASEPRI, r3
}
  20241e:	b005      	add	sp, #20
  202420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  202424:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
  202426:	4635      	mov	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  202428:	6922      	ldr	r2, [r4, #16]
  20242a:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
  20242e:	45a8      	cmp	r8, r5
  202430:	d9d9      	bls.n	2023e6 <iqReadTimeout+0x36>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  202432:	462a      	mov	r2, r5
  202434:	4638      	mov	r0, r7
  202436:	f7fd ff67 	bl	200308 <memcpy>
    iqp->q_rdptr += n;
  20243a:	69a2      	ldr	r2, [r4, #24]
  20243c:	442a      	add	r2, r5
  20243e:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
  202440:	68a2      	ldr	r2, [r4, #8]
  202442:	1b52      	subs	r2, r2, r5
  202444:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
  202446:	2d00      	cmp	r5, #0
  202448:	d1d8      	bne.n	2023fc <iqReadTimeout+0x4c>
  20244a:	9902      	ldr	r1, [sp, #8]
  20244c:	4620      	mov	r0, r4
  20244e:	f7ff fc7f 	bl	201d50 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
  202452:	2800      	cmp	r0, #0
  202454:	d0bd      	beq.n	2023d2 <iqReadTimeout+0x22>
  202456:	9b03      	ldr	r3, [sp, #12]
  202458:	1b98      	subs	r0, r3, r6
  20245a:	2300      	movs	r3, #0
  20245c:	f383 8811 	msr	BASEPRI, r3
}
  202460:	b005      	add	sp, #20
  202462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
  202466:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  20246a:	4642      	mov	r2, r8
  20246c:	4638      	mov	r0, r7
    s2 = n - s1;
  20246e:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  202470:	f7fd ff4a 	bl	200308 <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  202474:	eb07 0008 	add.w	r0, r7, r8
  202478:	f8dd 8004 	ldr.w	r8, [sp, #4]
  20247c:	68e1      	ldr	r1, [r4, #12]
  20247e:	4642      	mov	r2, r8
  202480:	f7fd ff42 	bl	200308 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
  202484:	68e2      	ldr	r2, [r4, #12]
  202486:	4643      	mov	r3, r8
  202488:	18d3      	adds	r3, r2, r3
  20248a:	61a3      	str	r3, [r4, #24]
  20248c:	e7b2      	b.n	2023f4 <iqReadTimeout+0x44>
  20248e:	bf00      	nop

00202490 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  202490:	300c      	adds	r0, #12
  202492:	f7ff bf8d 	b.w	2023b0 <iqReadTimeout>
  202496:	bf00      	nop
	...

002024a0 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  2024a0:	300c      	adds	r0, #12
  2024a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  2024a6:	f7ff bf83 	b.w	2023b0 <iqReadTimeout>
  2024aa:	bf00      	nop
  2024ac:	0000      	movs	r0, r0
	...

002024b0 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  2024b0:	4b23      	ldr	r3, [pc, #140]	; (202540 <main+0x90>)
  rccResetAHB2(~0);
  2024b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  2024b6:	4923      	ldr	r1, [pc, #140]	; (202544 <main+0x94>)
  rccResetAHB2(~0);
  2024b8:	2200      	movs	r2, #0
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  2024ba:	691d      	ldr	r5, [r3, #16]
  PWR->CR1 |= PWR_CR1_DBP;
  2024bc:	4822      	ldr	r0, [pc, #136]	; (202548 <main+0x98>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  2024be:	4329      	orrs	r1, r5
/*
 *============================================================================*
 *                                  MAIN
 *============================================================================*
 */
int main(void) {
  2024c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  2024c4:	6119      	str	r1, [r3, #16]
  2024c6:	b08b      	sub	sp, #44	; 0x2c
  2024c8:	6919      	ldr	r1, [r3, #16]
  2024ca:	f3c1 010a 	ubfx	r1, r1, #0, #11
  2024ce:	6119      	str	r1, [r3, #16]
  2024d0:	6919      	ldr	r1, [r3, #16]
  rccResetAHB2(~0);
  2024d2:	6959      	ldr	r1, [r3, #20]
  2024d4:	615c      	str	r4, [r3, #20]
  2024d6:	6959      	ldr	r1, [r3, #20]
  2024d8:	615a      	str	r2, [r3, #20]
  2024da:	6959      	ldr	r1, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2024dc:	6a19      	ldr	r1, [r3, #32]
  2024de:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
  2024e2:	6219      	str	r1, [r3, #32]
  2024e4:	6a19      	ldr	r1, [r3, #32]
  2024e6:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
  2024ea:	6219      	str	r1, [r3, #32]
  2024ec:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
  2024ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
  2024f0:	625c      	str	r4, [r3, #36]	; 0x24
  2024f2:	6a59      	ldr	r1, [r3, #36]	; 0x24
  2024f4:	625a      	str	r2, [r3, #36]	; 0x24
  2024f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  2024f8:	6801      	ldr	r1, [r0, #0]
  2024fa:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  2024fe:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  202500:	6f19      	ldr	r1, [r3, #112]	; 0x70
  202502:	f401 7140 	and.w	r1, r1, #768	; 0x300
  202506:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  20250a:	d003      	beq.n	202514 <main+0x64>
    RCC->BDCR = RCC_BDCR_BDRST;
  20250c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  202510:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  202512:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  202514:	4b0a      	ldr	r3, [pc, #40]	; (202540 <main+0x90>)
  202516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  202518:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  20251a:	f042 0219 	orr.w	r2, r2, #25
  20251e:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  202520:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  202522:	0798      	lsls	r0, r3, #30
  202524:	d5fc      	bpl.n	202520 <main+0x70>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  202526:	4908      	ldr	r1, [pc, #32]	; (202548 <main+0x98>)
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  202528:	f04f 0b00 	mov.w	fp, #0
  20252c:	4a07      	ldr	r2, [pc, #28]	; (20254c <main+0x9c>)
  20252e:	684b      	ldr	r3, [r1, #4]
    _stm32_dma_streams[i].stream->CR = 0U;
  202530:	465c      	mov	r4, fp
  202532:	4807      	ldr	r0, [pc, #28]	; (202550 <main+0xa0>)
  202534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  202538:	4d06      	ldr	r5, [pc, #24]	; (202554 <main+0xa4>)
  20253a:	604b      	str	r3, [r1, #4]
  20253c:	e00e      	b.n	20255c <main+0xac>
  20253e:	bf00      	nop
  202540:	40023800 	.word	0x40023800
  202544:	fffff800 	.word	0xfffff800
  202548:	40007000 	.word	0x40007000
  20254c:	080038a4 	.word	0x080038a4
  202550:	40026010 	.word	0x40026010
  202554:	20000d9c 	.word	0x20000d9c
  202558:	f852 0c0c 	ldr.w	r0, [r2, #-12]
  20255c:	6004      	str	r4, [r0, #0]
  20255e:	320c      	adds	r2, #12
    dma_isr_redir[i].dma_func = NULL;
  202560:	f845 403b 	str.w	r4, [r5, fp, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  202564:	f10b 0b01 	add.w	fp, fp, #1
  202568:	f1bb 0f10 	cmp.w	fp, #16
  20256c:	d1f4      	bne.n	202558 <main+0xa8>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20256e:	4ec9      	ldr	r6, [pc, #804]	; (202894 <main+0x3e4>)
  202570:	2360      	movs	r3, #96	; 0x60
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  202572:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  202576:	f8df e380 	ldr.w	lr, [pc, #896]	; 2028f8 <main+0x448>
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  20257a:	f8df c380 	ldr.w	ip, [pc, #896]	; 2028fc <main+0x44c>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20257e:	2280      	movs	r2, #128	; 0x80
  202580:	2740      	movs	r7, #64	; 0x40
  DMA1->LIFCR = 0xFFFFFFFFU;
  202582:	f8ce 1008 	str.w	r1, [lr, #8]
  202586:	f44f 7080 	mov.w	r0, #256	; 0x100
  DMA1->HIFCR = 0xFFFFFFFFU;
  20258a:	f8ce 100c 	str.w	r1, [lr, #12]
  20258e:	f44f 7500 	mov.w	r5, #512	; 0x200
  DMA2->LIFCR = 0xFFFFFFFFU;
  202592:	f8cc 1008 	str.w	r1, [ip, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
  202596:	f8cc 100c 	str.w	r1, [ip, #12]
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
  20259a:	f04f 0801 	mov.w	r8, #1
  20259e:	9103      	str	r1, [sp, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025a0:	f886 3306 	strb.w	r3, [r6, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025a4:	f8c6 7180 	str.w	r7, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025a8:	6037      	str	r7, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025aa:	f886 3307 	strb.w	r3, [r6, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025ae:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025b2:	6032      	str	r2, [r6, #0]
  2025b4:	9201      	str	r2, [sp, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025ba:	f886 3308 	strb.w	r3, [r6, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025be:	f8c6 0180 	str.w	r0, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025c2:	6030      	str	r0, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025c4:	f886 3309 	strb.w	r3, [r6, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025c8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025cc:	6035      	str	r5, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025ce:	f886 330a 	strb.w	r3, [r6, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025d2:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025d6:	6032      	str	r2, [r6, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025dc:	f886 3317 	strb.w	r3, [r6, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025e0:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025e4:	6032      	str	r2, [r6, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025e6:	f886 3328 	strb.w	r3, [r6, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025ea:	f8c6 0184 	str.w	r0, [r6, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025ee:	6070      	str	r0, [r6, #4]
  can_lld_init();
  2025f0:	f7ff f976 	bl	2018e0 <can_lld_init>
  2025f4:	f8df a308 	ldr.w	sl, [pc, #776]	; 202900 <main+0x450>
  2025f8:	f8df 9308 	ldr.w	r9, [pc, #776]	; 202904 <main+0x454>
  ICUD1.tim = STM32_TIM1;
  2025fc:	4ba6      	ldr	r3, [pc, #664]	; (202898 <main+0x3e8>)
  ICUD3.tim = STM32_TIM3;
  2025fe:	4aa7      	ldr	r2, [pc, #668]	; (20289c <main+0x3ec>)
  sdp->vmt = &vmt;
  202600:	4fa7      	ldr	r7, [pc, #668]	; (2028a0 <main+0x3f0>)
  oqp->q_buffer  = bp;
  202602:	4da8      	ldr	r5, [pc, #672]	; (2028a4 <main+0x3f4>)
  ICUD1.tim = STM32_TIM1;
  202604:	f8ca 300c 	str.w	r3, [sl, #12]
  ICUD3.tim = STM32_TIM3;
  202608:	f8c9 200c 	str.w	r2, [r9, #12]
  icup->config = NULL;
  20260c:	f8ca 4004 	str.w	r4, [sl, #4]
  icup->state  = ICU_STOP;
  202610:	f88a 8000 	strb.w	r8, [sl]
  202614:	f889 8000 	strb.w	r8, [r9]
  icup->config = NULL;
  202618:	f8c9 4004 	str.w	r4, [r9, #4]
  pwm_lld_init();
  20261c:	f7fe fff0 	bl	201600 <pwm_lld_init>
  iqp->q_top     = bp + size;
  202620:	49a1      	ldr	r1, [pc, #644]	; (2028a8 <main+0x3f8>)
  202622:	46bc      	mov	ip, r7
  oqp->q_buffer  = bp;
  202624:	63fd      	str	r5, [r7, #60]	; 0x3c
  iqp->q_top     = bp + size;
  202626:	61f9      	str	r1, [r7, #28]
  oqp->q_top     = bp + size;
  202628:	f105 0110 	add.w	r1, r5, #16
  20262c:	4b9f      	ldr	r3, [pc, #636]	; (2028ac <main+0x3fc>)
  20262e:	6439      	str	r1, [r7, #64]	; 0x40
  tqp->next = (thread_t *)tqp;
  202630:	f107 010c 	add.w	r1, r7, #12
  iqp->q_buffer  = bp;
  202634:	f8df e2d0 	ldr.w	lr, [pc, #720]	; 202908 <main+0x458>
  202638:	60f9      	str	r1, [r7, #12]
  tqp->prev = (thread_t *)tqp;
  20263a:	6139      	str	r1, [r7, #16]
  20263c:	499c      	ldr	r1, [pc, #624]	; (2028b0 <main+0x400>)
  iqp->q_counter = 0;
  20263e:	617c      	str	r4, [r7, #20]
  202640:	f84c 1b04 	str.w	r1, [ip], #4
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202644:	f06f 013f 	mvn.w	r1, #63	; 0x3f
  oqp->q_counter = size;
  202648:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
  iqp->q_buffer  = bp;
  20264c:	f8c7 e018 	str.w	lr, [r7, #24]
  sdp->state = SD_STOP;
  202650:	f883 8008 	strb.w	r8, [r3, #8]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  202654:	f8c7 c004 	str.w	ip, [r7, #4]
  202658:	f887 8008 	strb.w	r8, [r7, #8]
  oqp->q_link    = link;
  20265c:	653f      	str	r7, [r7, #80]	; 0x50
  iqp->q_buffer  = bp;
  20265e:	4895      	ldr	r0, [pc, #596]	; (2028b4 <main+0x404>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  202660:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 20290c <main+0x45c>
  oqp->q_wrptr   = bp;
  202664:	e9c7 5511 	strd	r5, r5, [r7, #68]	; 0x44
  oqp->q_notify  = onfy;
  202668:	4d93      	ldr	r5, [pc, #588]	; (2028b8 <main+0x408>)
  20266a:	64fd      	str	r5, [r7, #76]	; 0x4c

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3);
  iqObjectInit(&SD3.iqueue, sd_in_buf3, sizeof sd_in_buf3, NULL, &SD3);
  oqObjectInit(&SD3.oqueue, sd_out_buf3, sizeof sd_out_buf3, notify3, &SD3);
  SD3.usart = USART3;
  20266c:	4d93      	ldr	r5, [pc, #588]	; (2028bc <main+0x40c>)
  20266e:	657d      	str	r5, [r7, #84]	; 0x54
  tqp->next = (thread_t *)tqp;
  202670:	f107 0530 	add.w	r5, r7, #48	; 0x30
  iqp->q_wrptr   = bp;
  202674:	e9c7 ee08 	strd	lr, lr, [r7, #32]
  202678:	633d      	str	r5, [r7, #48]	; 0x30
  sdp->vmt = &vmt;
  20267a:	469e      	mov	lr, r3
  iqp->q_link    = link;
  20267c:	e9c7 470a 	strd	r4, r7, [r7, #40]	; 0x28
  202680:	f886 1327 	strb.w	r1, [r6, #807]	; 0x327
  202684:	f103 010c 	add.w	r1, r3, #12
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202688:	9a01      	ldr	r2, [sp, #4]
  tqp->prev = (thread_t *)tqp;
  20268a:	637d      	str	r5, [r7, #52]	; 0x34
  20268c:	f8c6 2184 	str.w	r2, [r6, #388]	; 0x184
  tqp->next = (thread_t *)tqp;
  202690:	60d9      	str	r1, [r3, #12]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202692:	6072      	str	r2, [r6, #4]
  tqp->prev = (thread_t *)tqp;
  202694:	6119      	str	r1, [r3, #16]
  202696:	4986      	ldr	r1, [pc, #536]	; (2028b0 <main+0x400>)
  oqp->q_buffer  = bp;
  202698:	4d89      	ldr	r5, [pc, #548]	; (2028c0 <main+0x410>)
  20269a:	f84e 1b04 	str.w	r1, [lr], #4
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20269e:	f06f 013f 	mvn.w	r1, #63	; 0x3f
  2026a2:	f8c3 e004 	str.w	lr, [r3, #4]
  SD3.clock = STM32_USART3CLK;
  2026a6:	f8df e268 	ldr.w	lr, [pc, #616]	; 202910 <main+0x460>
  iqp->q_counter = 0;
  2026aa:	615c      	str	r4, [r3, #20]
  2026ac:	f8c7 e058 	str.w	lr, [r7, #88]	; 0x58
  iqp->q_buffer  = bp;
  2026b0:	6198      	str	r0, [r3, #24]
  oqp->q_counter = size;
  2026b2:	f8c3 b038 	str.w	fp, [r3, #56]	; 0x38
  iqp->q_rdptr   = bp;
  2026b6:	6258      	str	r0, [r3, #36]	; 0x24
  2026b8:	f886 1334 	strb.w	r1, [r6, #820]	; 0x334
  iqp->q_top     = bp + size;
  2026bc:	f100 0110 	add.w	r1, r0, #16
  oqp->q_buffer  = bp;
  2026c0:	63dd      	str	r5, [r3, #60]	; 0x3c
  iqp->q_top     = bp + size;
  2026c2:	61d9      	str	r1, [r3, #28]
  oqp->q_top     = bp + size;
  2026c4:	f105 0110 	add.w	r1, r5, #16
  iqp->q_wrptr   = bp;
  2026c8:	6218      	str	r0, [r3, #32]
#if STM32_SERIAL_USE_UART4
  sdObjectInit(&SD4);
  iqObjectInit(&SD4.iqueue, sd_in_buf4, sizeof sd_in_buf4, NULL, &SD4);
  oqObjectInit(&SD4.oqueue, sd_out_buf4, sizeof sd_out_buf4, notify4, &SD4);
  SD4.usart = UART4;
  SD4.clock = STM32_UART4CLK;
  2026ca:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
  oqp->q_top     = bp + size;
  2026ce:	6419      	str	r1, [r3, #64]	; 0x40
  oqp->q_link    = link;
  2026d0:	651b      	str	r3, [r3, #80]	; 0x50
  oqp->q_notify  = onfy;
  2026d2:	487c      	ldr	r0, [pc, #496]	; (2028c4 <main+0x414>)
  oqp->q_wrptr   = bp;
  2026d4:	e9c3 5511 	strd	r5, r5, [r3, #68]	; 0x44
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2026d8:	f44f 1580 	mov.w	r5, #1048576	; 0x100000
  iqp->q_link    = link;
  2026dc:	e9c3 430a 	strd	r4, r3, [r3, #40]	; 0x28
  2026e0:	4629      	mov	r1, r5
  2026e2:	f8c6 5184 	str.w	r5, [r6, #388]	; 0x184
  SD4.usart = UART4;
  2026e6:	4d78      	ldr	r5, [pc, #480]	; (2028c8 <main+0x418>)
  oqp->q_notify  = onfy;
  2026e8:	64d8      	str	r0, [r3, #76]	; 0x4c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2026ea:	6071      	str	r1, [r6, #4]
  tqp->next = (thread_t *)tqp;
  2026ec:	f10c 010c 	add.w	r1, ip, #12
#endif

#if STM32_SPI_USE_SPI4
  spiObjectInit(&SPID4);
  SPID4.spi       = SPI4;
  SPID4.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI4_RX_DMA_STREAM);
  2026f0:	4876      	ldr	r0, [pc, #472]	; (2028cc <main+0x41c>)
  2026f2:	655d      	str	r5, [r3, #84]	; 0x54
  SPID4.spi       = SPI4;
  2026f4:	f505 4568 	add.w	r5, r5, #59392	; 0xe800
  SPID4.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI4_RX_DMA_STREAM);
  2026f8:	f8cc 0020 	str.w	r0, [ip, #32]
  SPID4.spi       = SPI4;
  2026fc:	f8cc 501c 	str.w	r5, [ip, #28]
  SPID4.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI4_TX_DMA_STREAM);
  202700:	f100 050c 	add.w	r5, r0, #12
#if STM32_UART_USE_UART7
  uartObjectInit(&UARTD7);
  UARTD7.usart   = UART7;
  UARTD7.clock   = STM32_UART7CLK;
  UARTD7.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  UARTD7.dmarx   = STM32_DMA_STREAM(STM32_UART_UART7_RX_DMA_STREAM);
  202704:	383c      	subs	r0, #60	; 0x3c
  202706:	f8cc 100c 	str.w	r1, [ip, #12]
  tqp->prev = (thread_t *)tqp;
  20270a:	f8cc 1010 	str.w	r1, [ip, #16]
  tqp->next = (thread_t *)tqp;
  20270e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  202712:	9001      	str	r0, [sp, #4]
  SPID4.rxdmamode = STM32_DMA_CR_CHSEL(SPI4_RX_DMA_CHANNEL) |
  202714:	486e      	ldr	r0, [pc, #440]	; (2028d0 <main+0x420>)
  SPID4.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI4_TX_DMA_STREAM);
  202716:	f8cc 5024 	str.w	r5, [ip, #36]	; 0x24
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20271a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
  SPID4.rxdmamode = STM32_DMA_CR_CHSEL(SPI4_RX_DMA_CHANNEL) |
  20271e:	f8cc 0028 	str.w	r0, [ip, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI4_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID4.txdmamode = STM32_DMA_CR_CHSEL(SPI4_TX_DMA_CHANNEL) |
  202722:	3030      	adds	r0, #48	; 0x30
  202724:	f88c 8000 	strb.w	r8, [ip]
  202728:	f8cc 002c 	str.w	r0, [ip, #44]	; 0x2c
 *
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state      = UART_STOP;
  20272c:	4869      	ldr	r0, [pc, #420]	; (2028d4 <main+0x424>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  20272e:	f8cc 4014 	str.w	r4, [ip, #20]
  tqp->prev = (thread_t *)tqp;
  202732:	e9c3 110c 	strd	r1, r1, [r3, #48]	; 0x30

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
  202736:	4b68      	ldr	r3, [pc, #416]	; (2028d8 <main+0x428>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202738:	f06f 013f 	mvn.w	r1, #63	; 0x3f
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
  20273c:	e9cc 4401 	strd	r4, r4, [ip, #4]
  202740:	f880 8000 	strb.w	r8, [r0]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  202744:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
  uartp->txstate    = UART_TX_IDLE;
  202748:	7044      	strb	r4, [r0, #1]
  uartp->rxstate    = UART_RX_IDLE;
  20274a:	7084      	strb	r4, [r0, #2]
  20274c:	f886 1352 	strb.w	r1, [r6, #850]	; 0x352
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202750:	f8c6 5188 	str.w	r5, [r6, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202754:	60b5      	str	r5, [r6, #8]
  ST_ENABLE_CLOCK();
  202756:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  202758:	9901      	ldr	r1, [sp, #4]
  20275a:	ea45 0508 	orr.w	r5, r5, r8
  uartp->config     = NULL;
  20275e:	6044      	str	r4, [r0, #4]
  202760:	6301      	str	r1, [r0, #48]	; 0x30
#if UART_USE_WAIT == TRUE
  uartp->early      = false;
  202762:	7204      	strb	r4, [r0, #8]
  202764:	641d      	str	r5, [r3, #64]	; 0x40
  202766:	6e1d      	ldr	r5, [r3, #96]	; 0x60
  UARTD7.dmatx   = STM32_DMA_STREAM(STM32_UART_UART7_TX_DMA_STREAM);
  202768:	495c      	ldr	r1, [pc, #368]	; (2028dc <main+0x42c>)
  20276a:	ea45 0508 	orr.w	r5, r5, r8
  uartp->threadrx   = NULL;
  20276e:	60c4      	str	r4, [r0, #12]
  uartp->threadtx   = NULL;
  202770:	6104      	str	r4, [r0, #16]
  202772:	661d      	str	r5, [r3, #96]	; 0x60
  202774:	6e1d      	ldr	r5, [r3, #96]	; 0x60
  202776:	6341      	str	r1, [r0, #52]	; 0x34
  UARTD7.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  202778:	2106      	movs	r1, #6
  UARTD7.clock   = STM32_UART7CLK;
  20277a:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
  UARTD7.dmamode = STM32_DMA_CR_DMEIE | STM32_DMA_CR_TEIE;
  20277e:	62c1      	str	r1, [r0, #44]	; 0x2c
  ST_ENABLE_STOP();
  202780:	4957      	ldr	r1, [pc, #348]	; (2028e0 <main+0x430>)
  UARTD7.usart   = UART7;
  202782:	f8df e190 	ldr.w	lr, [pc, #400]	; 202914 <main+0x464>
  202786:	688d      	ldr	r5, [r1, #8]
  ST_ENABLE_CLOCK();
  202788:	9302      	str	r3, [sp, #8]
  tqp->next = (thread_t *)tqp;
  20278a:	f100 0314 	add.w	r3, r0, #20
  20278e:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
  ST_ENABLE_STOP();
  202792:	ea45 0e08 	orr.w	lr, r5, r8
  202796:	6143      	str	r3, [r0, #20]
  202798:	61c4      	str	r4, [r0, #28]
  20279a:	f8c1 e008 	str.w	lr, [r1, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  20279e:	f242 517f 	movw	r1, #9599	; 0x257f
  2027a2:	4d50      	ldr	r5, [pc, #320]	; (2028e4 <main+0x434>)
  2027a4:	f8cc 1028 	str.w	r1, [ip, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  2027a8:	9903      	ldr	r1, [sp, #12]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  2027aa:	f105 0e1c 	add.w	lr, r5, #28
  2027ae:	f8cc 102c 	str.w	r1, [ip, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
  2027b2:	6183      	str	r3, [r0, #24]
  chTMStartMeasurementX(&tm);
  2027b4:	a804      	add	r0, sp, #16
  STM32_ST_TIM->CCMR1  = 0;
  2027b6:	f8cc 4018 	str.w	r4, [ip, #24]
  STM32_ST_TIM->CCR[0] = 0;
  2027ba:	f8cc 4034 	str.w	r4, [ip, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
  2027be:	f8cc 400c 	str.w	r4, [ip, #12]
  STM32_ST_TIM->CR2    = 0;
  2027c2:	f8cc 4004 	str.w	r4, [ip, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  2027c6:	f8cc 8014 	str.w	r8, [ip, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  2027ca:	f8cc 8000 	str.w	r8, [ip]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2027ce:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2027d2:	f886 231c 	strb.w	r2, [r6, #796]	; 0x31c
  2027d6:	9201      	str	r2, [sp, #4]
  tmp->cumulative = (rttime_t)0;
  2027d8:	2200      	movs	r2, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2027da:	f8c6 c180 	str.w	ip, [r6, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2027de:	f8c6 c000 	str.w	ip, [r6]
  ch.vtlist.delta = (sysinterval_t)-1;
  2027e2:	6269      	str	r1, [r5, #36]	; 0x24
  ch.rlist.prio = NOPRIO;
  2027e4:	60ac      	str	r4, [r5, #8]
  ch.vtlist.lasttime = (systime_t)0;
  2027e6:	62ac      	str	r4, [r5, #40]	; 0x28
  ch.tm.offset = (rtcnt_t)0;
  2027e8:	676c      	str	r4, [r5, #116]	; 0x74
  tqp->next = (thread_t *)tqp;
  2027ea:	4e3f      	ldr	r6, [pc, #252]	; (2028e8 <main+0x438>)
  tmp->worst      = (rtcnt_t)0;
  2027ec:	e9cd 1404 	strd	r1, r4, [sp, #16]
  tmp->cumulative = (rttime_t)0;
  2027f0:	2100      	movs	r1, #0
  tqp->prev = (thread_t *)tqp;
  2027f2:	e9c5 5500 	strd	r5, r5, [r5]
  2027f6:	e9cd 1208 	strd	r1, r2, [sp, #32]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  2027fa:	e9c5 ee07 	strd	lr, lr, [r5, #28]
  tmp->n          = (ucnt_t)0;
  2027fe:	e9cd 4406 	strd	r4, r4, [sp, #24]
  ch.rlist.older = (thread_t *)&ch.rlist;
  202802:	e9c5 5504 	strd	r5, r5, [r5, #16]
  chTMStartMeasurementX(&tm);
  202806:	f7fe fba3 	bl	200f50 <chTMStartMeasurementX.constprop.6>
  chTMStopMeasurementX(&tm);
  20280a:	a804      	add	r0, sp, #16
  20280c:	f7fe fc78 	bl	201100 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
  202810:	4936      	ldr	r1, [pc, #216]	; (2028ec <main+0x43c>)
  202812:	f8df e104 	ldr.w	lr, [pc, #260]	; 202918 <main+0x468>
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
  202816:	f106 0c3c 	add.w	ip, r6, #60	; 0x3c
  tqp->next = (thread_t *)tqp;
  20281a:	f101 000c 	add.w	r0, r1, #12
  20281e:	614c      	str	r4, [r1, #20]
  202820:	f8c1 e000 	str.w	lr, [r1]

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
  202824:	f04f 0e04 	mov.w	lr, #4
  tp->prio      = prio;
  202828:	9a01      	ldr	r2, [sp, #4]
  20282a:	f8c6 c03c 	str.w	ip, [r6, #60]	; 0x3c
  20282e:	63aa      	str	r2, [r5, #56]	; 0x38
  tp->realprio  = prio;
  202830:	66ea      	str	r2, [r5, #108]	; 0x6c
  mp->object_size = size;
  202832:	221c      	movs	r2, #28
  mp->provider = provider;
  202834:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 20291c <main+0x46c>
  mp->object_size = size;
  202838:	6332      	str	r2, [r6, #48]	; 0x30
  ch_memcore.nextmem = __heap_base__;
  20283a:	4a2d      	ldr	r2, [pc, #180]	; (2028f0 <main+0x440>)
  ch.tm.offset = tm.last;
  20283c:	9b06      	ldr	r3, [sp, #24]
  20283e:	60b4      	str	r4, [r6, #8]
  mp->next = NULL;
  202840:	6174      	str	r4, [r6, #20]
  202842:	62f4      	str	r4, [r6, #44]	; 0x2c
  mp->align = align;
  202844:	f8c6 e01c 	str.w	lr, [r6, #28]
  202848:	f8c6 e034 	str.w	lr, [r6, #52]	; 0x34
  mp->provider = provider;
  20284c:	f8c6 c020 	str.w	ip, [r6, #32]
  202850:	f8c6 c038 	str.w	ip, [r6, #56]	; 0x38
  ch_memcore.endmem  = __heap_end__;
  202854:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 202920 <main+0x470>
  tp->flags     = CH_FLAG_MODE_STATIC;
  202858:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
  tp->refs      = (trefs_t)1;
  20285c:	f885 8052 	strb.w	r8, [r5, #82]	; 0x52
  202860:	676b      	str	r3, [r5, #116]	; 0x74
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
  202862:	e9c1 4401 	strd	r4, r4, [r1, #4]
  tqp->prev = (thread_t *)tqp;
  202866:	e9c1 0003 	strd	r0, r0, [r1, #12]
  20286a:	f106 0110 	add.w	r1, r6, #16
  REG_INSERT(tp);
  20286e:	f105 0030 	add.w	r0, r5, #48	; 0x30
  202872:	6131      	str	r1, [r6, #16]
  mp->object_size = size;
  202874:	2114      	movs	r1, #20
  202876:	61b1      	str	r1, [r6, #24]
  202878:	f106 0124 	add.w	r1, r6, #36	; 0x24
  20287c:	6271      	str	r1, [r6, #36]	; 0x24
  20287e:	f106 0128 	add.w	r1, r6, #40	; 0x28
  202882:	62b1      	str	r1, [r6, #40]	; 0x28
  202884:	3118      	adds	r1, #24
  202886:	6431      	str	r1, [r6, #64]	; 0x40
  ch_memcore.nextmem = __heap_base__;
  202888:	491a      	ldr	r1, [pc, #104]	; (2028f4 <main+0x444>)
  20288a:	e9c6 6600 	strd	r6, r6, [r6]
  20288e:	600a      	str	r2, [r1, #0]
  202890:	e048      	b.n	202924 <main+0x474>
  202892:	bf00      	nop
  202894:	e000e100 	.word	0xe000e100
  202898:	40010000 	.word	0x40010000
  20289c:	40000400 	.word	0x40000400
  2028a0:	20000ab8 	.word	0x20000ab8
  2028a4:	20000e3c 	.word	0x20000e3c
  2028a8:	20000e2c 	.word	0x20000e2c
  2028ac:	20000b18 	.word	0x20000b18
  2028b0:	08003a40 	.word	0x08003a40
  2028b4:	20000e2c 	.word	0x20000e2c
  2028b8:	00200fd1 	.word	0x00200fd1
  2028bc:	40004800 	.word	0x40004800
  2028c0:	20000e4c 	.word	0x20000e4c
  2028c4:	00200fe1 	.word	0x00200fe1
  2028c8:	40004c00 	.word	0x40004c00
  2028cc:	080038f8 	.word	0x080038f8
  2028d0:	08010016 	.word	0x08010016
  2028d4:	20000ba8 	.word	0x20000ba8
  2028d8:	40023800 	.word	0x40023800
  2028dc:	080038a4 	.word	0x080038a4
  2028e0:	e0042000 	.word	0xe0042000
  2028e4:	20000be4 	.word	0x20000be4
  2028e8:	20000c5c 	.word	0x20000c5c
  2028ec:	20000d80 	.word	0x20000d80
  2028f0:	20020080 	.word	0x20020080
  2028f4:	20000d78 	.word	0x20000d78
  2028f8:	40026000 	.word	0x40026000
  2028fc:	40026400 	.word	0x40026400
  202900:	20000a50 	.word	0x20000a50
  202904:	20000a68 	.word	0x20000a68
  202908:	20000e1c 	.word	0x20000e1c
  20290c:	20000b78 	.word	0x20000b78
  202910:	02dc6c00 	.word	0x02dc6c00
  202914:	40007800 	.word	0x40007800
  202918:	00200f81 	.word	0x00200f81
  20291c:	002010d1 	.word	0x002010d1
  202920:	20080000 	.word	0x20080000
  tp->name      = name;
  202924:	4ed3      	ldr	r6, [pc, #844]	; (202c74 <main+0x7c4>)
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  202926:	4ad4      	ldr	r2, [pc, #848]	; (202c78 <main+0x7c8>)
  tp->epending  = (eventmask_t)0;
  202928:	e9c5 4419 	strd	r4, r4, [r5, #100]	; 0x64
  ch_memcore.endmem  = __heap_end__;
  20292c:	f8c1 c004 	str.w	ip, [r1, #4]
  tp->name      = name;
  202930:	64ae      	str	r6, [r5, #72]	; 0x48
  202932:	68d6      	ldr	r6, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
  202934:	49d1      	ldr	r1, [pc, #836]	; (202c7c <main+0x7cc>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  202936:	f426 66e0 	bic.w	r6, r6, #1792	; 0x700
  REG_INSERT(tp);
  20293a:	f8d5 e014 	ldr.w	lr, [r5, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  20293e:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 202ce0 <main+0x830>
  202942:	0436      	lsls	r6, r6, #16
  202944:	0c36      	lsrs	r6, r6, #16
  reg_value  =  (reg_value                                   |
  202946:	4331      	orrs	r1, r6
  202948:	e9c5 5e10 	strd	r5, lr, [r5, #64]	; 0x40
  20294c:	f8ce 0010 	str.w	r0, [lr, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
  202950:	60d1      	str	r1, [r2, #12]
  202952:	f8dc 600c 	ldr.w	r6, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
  202956:	49ca      	ldr	r1, [pc, #808]	; (202c80 <main+0x7d0>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  202958:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  DWT->LAR = 0xC5ACCE55U;
  20295c:	f8df e384 	ldr.w	lr, [pc, #900]	; 202ce4 <main+0x834>
  202960:	6168      	str	r0, [r5, #20]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  202962:	f8cc 600c 	str.w	r6, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
  202966:	f8c1 efb0 	str.w	lr, [r1, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  20296a:	680e      	ldr	r6, [r1, #0]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  20296c:	61a8      	str	r0, [r5, #24]
  tlp->next = (thread_t *)tlp;
  20296e:	f105 0058 	add.w	r0, r5, #88	; 0x58
  202972:	ea46 0608 	orr.w	r6, r6, r8
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
  }
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
  202976:	64ec      	str	r4, [r5, #76]	; 0x4c
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
  202978:	f885 8050 	strb.w	r8, [r5, #80]	; 0x50
  20297c:	65a8      	str	r0, [r5, #88]	; 0x58
  20297e:	600e      	str	r6, [r1, #0]
  tqp->next = (thread_t *)tqp;
  202980:	1d01      	adds	r1, r0, #4
  202982:	65e9      	str	r1, [r5, #92]	; 0x5c
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  202984:	f882 b01f 	strb.w	fp, [r2, #31]
  tqp->prev = (thread_t *)tqp;
  202988:	6629      	str	r1, [r5, #96]	; 0x60
  20298a:	f04f 0120 	mov.w	r1, #32
  20298e:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
  202992:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
  202996:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202998:	2120      	movs	r1, #32
  20299a:	f381 8811 	msr	BASEPRI, r1
  tp->wabase = tdp->wbase;
  20299e:	4ab9      	ldr	r2, [pc, #740]	; (202c84 <main+0x7d4>)
  tp->state     = CH_STATE_WTSTART;
  2029a0:	f04f 0c02 	mov.w	ip, #2
  REG_INSERT(tp);
  2029a4:	696e      	ldr	r6, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2029a6:	f102 006c 	add.w	r0, r2, #108	; 0x6c
  tp->name      = name;
  2029aa:	4bb7      	ldr	r3, [pc, #732]	; (202c88 <main+0x7d8>)
  REG_INSERT(tp);
  2029ac:	f102 0190 	add.w	r1, r2, #144	; 0x90
  2029b0:	f8c2 60a4 	str.w	r6, [r2, #164]	; 0xa4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2029b4:	f8c2 009c 	str.w	r0, [r2, #156]	; 0x9c
  tqp->next = (thread_t *)tqp;
  2029b8:	f102 06bc 	add.w	r6, r2, #188	; 0xbc
  tp->name      = name;
  2029bc:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
  tlp->next = (thread_t *)tlp;
  2029c0:	f102 0eb8 	add.w	lr, r2, #184	; 0xb8
  REG_INSERT(tp);
  2029c4:	696b      	ldr	r3, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2029c6:	f8df b320 	ldr.w	fp, [pc, #800]	; 202ce8 <main+0x838>
  2029ca:	48b0      	ldr	r0, [pc, #704]	; (202c8c <main+0x7dc>)
  2029cc:	6714      	str	r4, [r2, #112]	; 0x70
  2029ce:	66d0      	str	r0, [r2, #108]	; 0x6c
  chSchWakeupS(tp, MSG_OK);
  2029d0:	4608      	mov	r0, r1
  tp->prio      = prio;
  2029d2:	f8c2 8098 	str.w	r8, [r2, #152]	; 0x98
  tp->epending  = (eventmask_t)0;
  2029d6:	f8c2 40c4 	str.w	r4, [r2, #196]	; 0xc4
  tp->flags     = CH_FLAG_MODE_STATIC;
  2029da:	f882 80b2 	strb.w	r8, [r2, #178]	; 0xb2
  REG_INSERT(tp);
  2029de:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  2029e2:	f8c2 20ac 	str.w	r2, [r2, #172]	; 0xac
  tp->state     = CH_STATE_WTSTART;
  2029e6:	f8a2 c0b0 	strh.w	ip, [r2, #176]	; 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2029ea:	f8c2 b08c 	str.w	fp, [r2, #140]	; 0x8c
  tp->mtxlist   = NULL;
  2029ee:	e9c2 4832 	strd	r4, r8, [r2, #200]	; 0xc8
  REG_INSERT(tp);
  2029f2:	6119      	str	r1, [r3, #16]
  tqp->prev = (thread_t *)tqp;
  2029f4:	f8c2 60c0 	str.w	r6, [r2, #192]	; 0xc0
  2029f8:	6169      	str	r1, [r5, #20]
  tqp->next = (thread_t *)tqp;
  2029fa:	e9c2 e62e 	strd	lr, r6, [r2, #184]	; 0xb8
  chSchWakeupS(tp, MSG_OK);
  2029fe:	f7ff f8cf 	bl	201ba0 <chSchWakeupS.constprop.11>
  202a02:	f384 8811 	msr	BASEPRI, r4
  202a06:	f7fe ff6b 	bl	2018e0 <can_lld_init>
  ICUD1.tim = STM32_TIM1;
  202a0a:	4ba1      	ldr	r3, [pc, #644]	; (202c90 <main+0x7e0>)
  ICUD3.tim = STM32_TIM3;
  202a0c:	4aa1      	ldr	r2, [pc, #644]	; (202c94 <main+0x7e4>)
  icup->state  = ICU_STOP;
  202a0e:	f88a 8000 	strb.w	r8, [sl]
  icup->config = NULL;
  202a12:	f8ca 4004 	str.w	r4, [sl, #4]
  ICUD1.tim = STM32_TIM1;
  202a16:	f8ca 300c 	str.w	r3, [sl, #12]
  icup->state  = ICU_STOP;
  202a1a:	f889 8000 	strb.w	r8, [r9]
  icup->config = NULL;
  202a1e:	f8c9 4004 	str.w	r4, [r9, #4]
  ICUD3.tim = STM32_TIM3;
  202a22:	f8c9 200c 	str.w	r2, [r9, #12]
  202a26:	f7fe fdeb 	bl	201600 <pwm_lld_init>
  202a2a:	2120      	movs	r1, #32
  202a2c:	f381 8811 	msr	BASEPRI, r1
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
  202a30:	7a3a      	ldrb	r2, [r7, #8]
  202a32:	9b02      	ldr	r3, [sp, #8]
  202a34:	4542      	cmp	r2, r8
  202a36:	f000 8180 	beq.w	202d3a <main+0x88a>
    fck = (uint32_t)(sdp->clock / config->speed);
  202a3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  u->ICR = 0xFFFFFFFFU;
  202a3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    fck = (uint32_t)(sdp->clock / config->speed);
  202a40:	4a95      	ldr	r2, [pc, #596]	; (202c98 <main+0x7e8>)
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  202a42:	f04f 0c40 	mov.w	ip, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
  202a46:	2001      	movs	r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  202a48:	f240 162d 	movw	r6, #301	; 0x12d
    fck = (uint32_t)(sdp->clock / config->speed);
  202a4c:	fba2 3203 	umull	r3, r2, r2, r3
  sdp->state = SD_READY;
  202a50:	2102      	movs	r1, #2
  USART_TypeDef *u = sdp->usart;
  202a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    fck = (uint32_t)(sdp->clock / config->speed);
  202a54:	0c12      	lsrs	r2, r2, #16
  u->BRR = fck;
  202a56:	60da      	str	r2, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  202a58:	f8c3 c004 	str.w	ip, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  202a5c:	6098      	str	r0, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  202a5e:	601e      	str	r6, [r3, #0]
  u->ICR = 0xFFFFFFFFU;
  202a60:	621c      	str	r4, [r3, #32]
  202a62:	2300      	movs	r3, #0
    sdp->rxmask = 0xFF;
  202a64:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
  202a68:	7239      	strb	r1, [r7, #8]
  202a6a:	f383 8811 	msr	BASEPRI, r3
  202a6e:	2320      	movs	r3, #32
  202a70:	f383 8811 	msr	BASEPRI, r3
void can_lld_start(CANDriver *canp) {

  /* Clock activation.*/
#if STM32_CAN_USE_CAN1
  if (&CAND1 == canp) {
    rccEnableCAN1(true);
  202a74:	4a89      	ldr	r2, [pc, #548]	; (202c9c <main+0x7ec>)

  osalSysLock();
  osalDbgAssert(canp->state == CAN_STOP, "invalid state");

  /* Entering initialization mode. */
  canp->state = CAN_STARTING;
  202a76:	4c8a      	ldr	r4, [pc, #552]	; (202ca0 <main+0x7f0>)
  202a78:	7021      	strb	r1, [r4, #0]
  202a7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
  canp->config = config;
  202a7c:	4989      	ldr	r1, [pc, #548]	; (202ca4 <main+0x7f4>)
  202a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  202a82:	6061      	str	r1, [r4, #4]
  202a84:	6413      	str	r3, [r2, #64]	; 0x40
  202a86:	6e11      	ldr	r1, [r2, #96]	; 0x60
    rccEnableCAN3(true);
  }
#endif

  /* Configuring CAN. */
  canp->can->MCR = CAN_MCR_INRQ;
  202a88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    rccEnableCAN1(true);
  202a8a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  202a8e:	6611      	str	r1, [r2, #96]	; 0x60
  202a90:	6e12      	ldr	r2, [r2, #96]	; 0x60
  canp->can->MCR = CAN_MCR_INRQ;
  202a92:	6018      	str	r0, [r3, #0]
  while ((canp->can->MSR & CAN_MSR_INAK) == 0)
  202a94:	685a      	ldr	r2, [r3, #4]
  202a96:	07d1      	lsls	r1, r2, #31
  202a98:	d407      	bmi.n	202aaa <main+0x5fa>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
  202a9a:	2101      	movs	r1, #1
  202a9c:	2008      	movs	r0, #8
  202a9e:	f7ff f8c7 	bl	201c30 <chSchGoSleepTimeoutS>
  202aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  202aa4:	685a      	ldr	r2, [r3, #4]
  202aa6:	07d2      	lsls	r2, r2, #31
  202aa8:	d5f7      	bpl.n	202a9a <main+0x5ea>
    osalThreadSleepS(1);
  canp->can->BTR = canp->config->btr;
  202aaa:	6862      	ldr	r2, [r4, #4]
  /* Low level initialization, could be a slow process and sleeps could
     be performed inside.*/
  can_lld_start(canp);

  /* The driver finally goes into the ready state.*/
  canp->state = CAN_READY;
  202aac:	2103      	movs	r1, #3
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
                   CAN_IER_WKUIE  | CAN_IER_ERRIE  | CAN_IER_LECIE  |
                   CAN_IER_BOFIE  | CAN_IER_EPVIE  | CAN_IER_EWGIE  |
                   CAN_IER_FOVIE0 | CAN_IER_FOVIE1;
#else
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
  202aae:	487e      	ldr	r0, [pc, #504]	; (202ca8 <main+0x7f8>)
  canp->can->MCR = canp->config->mcr;
  202ab0:	e9d2 2600 	ldrd	r2, r6, [r2]
  canp->can->BTR = canp->config->btr;
  202ab4:	61de      	str	r6, [r3, #28]
  202ab6:	2600      	movs	r6, #0
  canp->can->MCR = canp->config->mcr;
  202ab8:	601a      	str	r2, [r3, #0]
  canp->can->IER = CAN_IER_TMEIE  | CAN_IER_FMPIE0 | CAN_IER_FMPIE1 |
  202aba:	6158      	str	r0, [r3, #20]
  202abc:	7021      	strb	r1, [r4, #0]
  202abe:	f386 8811 	msr	BASEPRI, r6
  202ac2:	2420      	movs	r4, #32
  202ac4:	f384 8811 	msr	BASEPRI, r4
  osalDbgCheck((icup != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((icup->state == ICU_STOP) || (icup->state == ICU_READY),
                "invalid state");
  icup->config = config;
  202ac8:	4b78      	ldr	r3, [pc, #480]	; (202cac <main+0x7fc>)
  icu_lld_start(icup);
  icup->state = ICU_READY;
  202aca:	2702      	movs	r7, #2
  icu_lld_start(icup);
  202acc:	4878      	ldr	r0, [pc, #480]	; (202cb0 <main+0x800>)
  icup->config = config;
  202ace:	f8ca 3004 	str.w	r3, [sl, #4]
  icu_lld_start(icup);
  202ad2:	f7fe fdfd 	bl	2016d0 <icu_lld_start>
  icup->state = ICU_READY;
  202ad6:	f88a 7000 	strb.w	r7, [sl]
  202ada:	f386 8811 	msr	BASEPRI, r6
  202ade:	f384 8811 	msr	BASEPRI, r4
  icup->config = config;
  202ae2:	4b74      	ldr	r3, [pc, #464]	; (202cb4 <main+0x804>)
  icu_lld_start(icup);
  202ae4:	4874      	ldr	r0, [pc, #464]	; (202cb8 <main+0x808>)
  icup->config = config;
  202ae6:	f8c9 3004 	str.w	r3, [r9, #4]
  icu_lld_start(icup);
  202aea:	f7fe fdf1 	bl	2016d0 <icu_lld_start>
  icup->state = ICU_READY;
  202aee:	f889 7000 	strb.w	r7, [r9]
  202af2:	f386 8811 	msr	BASEPRI, r6
  202af6:	f384 8811 	msr	BASEPRI, r4
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  202afa:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 202cec <main+0x83c>
  202afe:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 202cf0 <main+0x840>
  pwmp->period = config->period;
  202b02:	f8d9 3004 	ldr.w	r3, [r9, #4]
  pwm_lld_start(pwmp);
  202b06:	4640      	mov	r0, r8
  pwmp->period = config->period;
  202b08:	e9c8 9301 	strd	r9, r3, [r8, #4]
  pwm_lld_start(pwmp);
  202b0c:	f7fe fcb8 	bl	201480 <pwm_lld_start>
  pwmp->enabled = 0;
  202b10:	f8c8 600c 	str.w	r6, [r8, #12]
  pwmp->state = PWM_READY;
  202b14:	f888 7000 	strb.w	r7, [r8]
  202b18:	f386 8811 	msr	BASEPRI, r6
  202b1c:	f384 8811 	msr	BASEPRI, r4
  pwmp->config = config;
  202b20:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 202cf4 <main+0x844>
  pwmp->period = config->period;
  202b24:	f8d9 3004 	ldr.w	r3, [r9, #4]
  pwm_lld_start(pwmp);
  202b28:	4640      	mov	r0, r8
  pwmp->period = config->period;
  202b2a:	e9c8 9301 	strd	r9, r3, [r8, #4]
  pwm_lld_start(pwmp);
  202b2e:	f7fe fca7 	bl	201480 <pwm_lld_start>
  pwmp->enabled = 0;
  202b32:	f8c8 600c 	str.w	r6, [r8, #12]
  pwmp->state = PWM_READY;
  202b36:	f888 7000 	strb.w	r7, [r8]
  202b3a:	f386 8811 	msr	BASEPRI, r6
   * ************************************************************************* *
   *                      SETTAGGI PIN PERIFERICHE
   * ************************************************************************* *
   */
  //CAN
  palSetPadMode(GPIOD, GPIOD_ZIO_D67, PAL_MODE_ALTERNATE(9));
  202b3e:	f240 4282 	movw	r2, #1154	; 0x482
  202b42:	2101      	movs	r1, #1
  202b44:	485d      	ldr	r0, [pc, #372]	; (202cbc <main+0x80c>)
  202b46:	f7fe fe5b 	bl	201800 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, GPIOD_ZIO_D66, PAL_MODE_ALTERNATE(9));
  202b4a:	4639      	mov	r1, r7
  202b4c:	f240 4282 	movw	r2, #1154	; 0x482
  202b50:	485a      	ldr	r0, [pc, #360]	; (202cbc <main+0x80c>)
  202b52:	f7fe fe55 	bl	201800 <_pal_lld_setgroupmode>
  //PWM
  //palSetPadMode(GPIOB, GPIOB_ZIO_D23, PAL_MODE_ALTERNATE(2));
  //palSetPadMode(GPIOA, GPIOA_ZIO_D32, PAL_MODE_ALTERNATE(1));
  //ICU PINS
  palSetPadMode (GPIOE, GPIOE_ARD_D6, PAL_MODE_ALTERNATE(1));
  202b56:	2282      	movs	r2, #130	; 0x82
  202b58:	f44f 7100 	mov.w	r1, #512	; 0x200
  202b5c:	4858      	ldr	r0, [pc, #352]	; (202cc0 <main+0x810>)
  202b5e:	f7fe fe4f 	bl	201800 <_pal_lld_setgroupmode>
  palSetPadMode (GPIOE, GPIOE_ARD_D5, PAL_MODE_OUTPUT_PUSHPULL);
  202b62:	2201      	movs	r2, #1
  202b64:	f44f 6100 	mov.w	r1, #2048	; 0x800
  202b68:	4855      	ldr	r0, [pc, #340]	; (202cc0 <main+0x810>)
  202b6a:	f7fe fe49 	bl	201800 <_pal_lld_setgroupmode>
  palSetPadMode (GPIOA, GPIOA_ARD_D12, PAL_MODE_ALTERNATE(2));
  202b6e:	f44f 7281 	mov.w	r2, #258	; 0x102
  202b72:	2140      	movs	r1, #64	; 0x40
  202b74:	4853      	ldr	r0, [pc, #332]	; (202cc4 <main+0x814>)
  202b76:	f7fe fe43 	bl	201800 <_pal_lld_setgroupmode>
  //Ventole
  palSetPadMode (GPIOC, GPIOC_ZIO_D16, PAL_MODE_ALTERNATE(3)); //PWM8/1
  202b7a:	f44f 72c1 	mov.w	r2, #386	; 0x182
  202b7e:	2140      	movs	r1, #64	; 0x40
  202b80:	4851      	ldr	r0, [pc, #324]	; (202cc8 <main+0x818>)
  202b82:	f7fe fe3d 	bl	201800 <_pal_lld_setgroupmode>
  palSetPadMode (GPIOC, GPIOC_ZIO_D43, PAL_MODE_ALTERNATE(3)); //PWM8/3
  202b86:	f44f 72c1 	mov.w	r2, #386	; 0x182
  202b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
  202b8e:	484e      	ldr	r0, [pc, #312]	; (202cc8 <main+0x818>)
  202b90:	f7fe fe36 	bl	201800 <_pal_lld_setgroupmode>
  //BUZZ
  palSetPadMode (GPIOA, GPIOA_RMII_MDIO, PAL_MODE_ALTERNATE(3)); //PWM9/1
  202b94:	f44f 72c1 	mov.w	r2, #386	; 0x182
  202b98:	2104      	movs	r1, #4
  202b9a:	484a      	ldr	r0, [pc, #296]	; (202cc4 <main+0x814>)
  202b9c:	f7fe fe30 	bl	201800 <_pal_lld_setgroupmode>
  //Virtual com port configuratin pins
  palSetPadMode(GPIOD, GPIOD_USART3_TX, PAL_MODE_ALTERNATE(7)
  202ba0:	f240 329a 	movw	r2, #922	; 0x39a
  202ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
  202ba8:	4844      	ldr	r0, [pc, #272]	; (202cbc <main+0x80c>)
  202baa:	f7fe fe29 	bl	201800 <_pal_lld_setgroupmode>
                | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_PUSHPULL);
  palSetPadMode(GPIOD, GPIOD_USART3_RX, PAL_MODE_ALTERNATE(7)
  202bae:	f240 329a 	movw	r2, #922	; 0x39a
  202bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
  202bb6:	4841      	ldr	r0, [pc, #260]	; (202cbc <main+0x80c>)
  202bb8:	f7fe fe22 	bl	201800 <_pal_lld_setgroupmode>
                | PAL_STM32_OSPEED_HIGHEST | PAL_STM32_OTYPE_PUSHPULL);
  //PIN PER SPI IMU NICOLA
  palSetPadMode(GPIOE, GPIOE_ZIO_D39, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);   //SPI4_SCK
  202bbc:	f240 229a 	movw	r2, #666	; 0x29a
  202bc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  202bc4:	483e      	ldr	r0, [pc, #248]	; (202cc0 <main+0x810>)
  202bc6:	f7fe fe1b 	bl	201800 <_pal_lld_setgroupmode>
               palSetPadMode(GPIOE, GPIOE_ARD_D5, PAL_MODE_OUTPUT_PUSHPULL);   //SPI4_NSS
  202bca:	2201      	movs	r2, #1
  202bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  202bd0:	483b      	ldr	r0, [pc, #236]	; (202cc0 <main+0x810>)
  202bd2:	f7fe fe15 	bl	201800 <_pal_lld_setgroupmode>
               palSetPadMode(GPIOE, GPIOE_ARD_D3, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);   //SPI4_MISO
  202bd6:	f240 229a 	movw	r2, #666	; 0x29a
  202bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  202bde:	4838      	ldr	r0, [pc, #224]	; (202cc0 <main+0x810>)
  202be0:	f7fe fe0e 	bl	201800 <_pal_lld_setgroupmode>
               palSetPadMode(GPIOE, GPIOE_ZIO_D38, PAL_MODE_ALTERNATE(5) | PAL_STM32_OSPEED_HIGHEST);   //SPI4_MOSI
  202be4:	f240 229a 	movw	r2, #666	; 0x29a
  202be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  202bec:	4834      	ldr	r0, [pc, #208]	; (202cc0 <main+0x810>)
  202bee:	f7fe fe07 	bl	201800 <_pal_lld_setgroupmode>
               palSetPadMode(GPIOF, GPIOF_ARD_D7, PAL_MODE_INPUT);//DRDY PIN
  202bf2:	4632      	mov	r2, r6
  202bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  202bf8:	4834      	ldr	r0, [pc, #208]	; (202ccc <main+0x81c>)
  202bfa:	f7fe fe01 	bl	201800 <_pal_lld_setgroupmode>
  //PIN UART
  palSetPadMode(GPIOC, 10U, PAL_MODE_ALTERNATE(7));//UART5_TX
  202bfe:	f240 3282 	movw	r2, #898	; 0x382
  202c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
  202c06:	4830      	ldr	r0, [pc, #192]	; (202cc8 <main+0x818>)
  202c08:	f7fe fdfa 	bl	201800 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 11U, PAL_MODE_ALTERNATE(7));//UART5_RX
  202c0c:	f240 3282 	movw	r2, #898	; 0x382
  202c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
  202c14:	482c      	ldr	r0, [pc, #176]	; (202cc8 <main+0x818>)
  202c16:	f7fe fdf3 	bl	201800 <_pal_lld_setgroupmode>
       pwmEnableChannel(&PWMD9, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD9, 0));   //canale 1 perch� uso PWM 2/1

       pwmDisableChannel(&PWMD9,0);
  BZR_ON=0;
  }*/
  cls(chp);
  202c1a:	492d      	ldr	r1, [pc, #180]	; (202cd0 <main+0x820>)
  202c1c:	482d      	ldr	r0, [pc, #180]	; (202cd4 <main+0x824>)
  202c1e:	f7ff f927 	bl	201e70 <chprintf.constprop.0>
  202c22:	f384 8811 	msr	BASEPRI, r4
  tp->wabase = (stkalign_t *)wsp;
  202c26:	4b2c      	ldr	r3, [pc, #176]	; (202cd8 <main+0x828>)
  tp->prio      = prio;
  202c28:	f04f 0c84 	mov.w	ip, #132	; 0x84
  tp->flags     = CH_FLAG_MODE_STATIC;
  202c2c:	2001      	movs	r0, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202c2e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 202cf8 <main+0x848>
  202c32:	f503 71ae 	add.w	r1, r3, #348	; 0x15c
  tp->state     = CH_STATE_WTSTART;
  202c36:	f8a3 71a0 	strh.w	r7, [r3, #416]	; 0x1a0
  tp->name      = name;
  202c3a:	4f28      	ldr	r7, [pc, #160]	; (202cdc <main+0x82c>)
  REG_INSERT(tp);
  202c3c:	f503 72c0 	add.w	r2, r3, #384	; 0x180
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202c40:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  tlp->next = (thread_t *)tlp;
  202c44:	f503 7ed4 	add.w	lr, r3, #424	; 0x1a8
  tqp->next = (thread_t *)tqp;
  202c48:	f503 71d6 	add.w	r1, r3, #428	; 0x1ac
  tp->name      = name;
  202c4c:	f8c3 7198 	str.w	r7, [r3, #408]	; 0x198
  REG_INSERT(tp);
  202c50:	696f      	ldr	r7, [r5, #20]
  tp->flags     = CH_FLAG_MODE_STATIC;
  202c52:	f883 01a2 	strb.w	r0, [r3, #418]	; 0x1a2
  chSchWakeupS(tp, MSG_OK);
  202c56:	4610      	mov	r0, r2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202c58:	f8c3 b17c 	str.w	fp, [r3, #380]	; 0x17c
  202c5c:	f8c3 6160 	str.w	r6, [r3, #352]	; 0x160
  tp->mtxlist   = NULL;
  202c60:	f8c3 61b8 	str.w	r6, [r3, #440]	; 0x1b8
  tp->epending  = (eventmask_t)0;
  202c64:	f8c3 61b4 	str.w	r6, [r3, #436]	; 0x1b4
  REG_INSERT(tp);
  202c68:	f8c3 5190 	str.w	r5, [r3, #400]	; 0x190
  tp->wabase = (stkalign_t *)wsp;
  202c6c:	f8c3 319c 	str.w	r3, [r3, #412]	; 0x19c
  202c70:	e044      	b.n	202cfc <main+0x84c>
  202c72:	bf00      	nop
  202c74:	08003960 	.word	0x08003960
  202c78:	e000ed00 	.word	0xe000ed00
  202c7c:	05fa0300 	.word	0x05fa0300
  202c80:	e0001000 	.word	0xe0001000
  202c84:	20000ca0 	.word	0x20000ca0
  202c88:	0800398c 	.word	0x0800398c
  202c8c:	00201281 	.word	0x00201281
  202c90:	40010000 	.word	0x40010000
  202c94:	40000400 	.word	0x40000400
  202c98:	91a2b3c5 	.word	0x91a2b3c5
  202c9c:	40023800 	.word	0x40023800
  202ca0:	20000800 	.word	0x20000800
  202ca4:	08003958 	.word	0x08003958
  202ca8:	0001875b 	.word	0x0001875b
  202cac:	20020000 	.word	0x20020000
  202cb0:	20000a50 	.word	0x20000a50
  202cb4:	2002001c 	.word	0x2002001c
  202cb8:	20000a68 	.word	0x20000a68
  202cbc:	40020c00 	.word	0x40020c00
  202cc0:	40021000 	.word	0x40021000
  202cc4:	40020000 	.word	0x40020000
  202cc8:	40020800 	.word	0x40020800
  202ccc:	40021400 	.word	0x40021400
  202cd0:	08003978 	.word	0x08003978
  202cd4:	20000ab8 	.word	0x20000ab8
  202cd8:	20000888 	.word	0x20000888
  202cdc:	08003994 	.word	0x08003994
  202ce0:	e000edf0 	.word	0xe000edf0
  202ce4:	c5acce55 	.word	0xc5acce55
  202ce8:	002002f1 	.word	0x002002f1
  202cec:	20020038 	.word	0x20020038
  202cf0:	20000a80 	.word	0x20000a80
  202cf4:	20000a9c 	.word	0x20000a9c
  202cf8:	00200f61 	.word	0x00200f61
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202cfc:	f8c3 815c 	str.w	r8, [r3, #348]	; 0x15c
  tp->prio      = prio;
  202d00:	f8c3 c188 	str.w	ip, [r3, #392]	; 0x188
  tp->realprio  = prio;
  202d04:	f8c3 c1bc 	str.w	ip, [r3, #444]	; 0x1bc
  REG_INSERT(tp);
  202d08:	f8c3 7194 	str.w	r7, [r3, #404]	; 0x194
  202d0c:	613a      	str	r2, [r7, #16]
  tlp->next = (thread_t *)tlp;
  202d0e:	f8c3 e1a8 	str.w	lr, [r3, #424]	; 0x1a8
  tqp->next = (thread_t *)tqp;
  202d12:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
  tqp->prev = (thread_t *)tqp;
  202d16:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
  202d1a:	616a      	str	r2, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
  202d1c:	f7fe ff40 	bl	201ba0 <chSchWakeupS.constprop.11>
  202d20:	f386 8811 	msr	BASEPRI, r6
  202d24:	f384 8811 	msr	BASEPRI, r4
  202d28:	f241 3188 	movw	r1, #5000	; 0x1388
  202d2c:	2008      	movs	r0, #8
  202d2e:	f7fe ff7f 	bl	201c30 <chSchGoSleepTimeoutS>
  202d32:	2300      	movs	r3, #0
  202d34:	f383 8811 	msr	BASEPRI, r3
  202d38:	e7f4      	b.n	202d24 <main+0x874>
      rccEnableUSART2(true);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(true);
  202d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  202d3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  202d40:	641a      	str	r2, [r3, #64]	; 0x40
  202d42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  202d44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  202d48:	661a      	str	r2, [r3, #96]	; 0x60
  202d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  202d4c:	e675      	b.n	202a3a <main+0x58a>
  202d4e:	bf00      	nop

00202d50 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  202d50:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  202d54:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  202d56:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202d5a:	2300      	movs	r3, #0
  202d5c:	f383 8811 	msr	BASEPRI, r3
}
  202d60:	4770      	bx	lr
  202d62:	bf00      	nop
	...

00202d70 <chThdExit>:
void chThdExit(msg_t msg) {
  202d70:	b538      	push	{r3, r4, r5, lr}
  202d72:	2220      	movs	r2, #32
  202d74:	4603      	mov	r3, r0
  202d76:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  202d7a:	4a10      	ldr	r2, [pc, #64]	; (202dbc <chThdExit+0x4c>)
  202d7c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  202d7e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  202d82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  202d84:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  202d86:	42a8      	cmp	r0, r5
  202d88:	d006      	beq.n	202d98 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  202d8a:	6803      	ldr	r3, [r0, #0]
  202d8c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  202d8e:	f7fe fa17 	bl	2011c0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  202d92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  202d94:	42a8      	cmp	r0, r5
  202d96:	d1f8      	bne.n	202d8a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  202d98:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  202d9c:	b943      	cbnz	r3, 202db0 <chThdExit+0x40>
  202d9e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  202da2:	079b      	lsls	r3, r3, #30
  202da4:	d104      	bne.n	202db0 <chThdExit+0x40>
    REG_REMOVE(tp);
  202da6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
  202daa:	611a      	str	r2, [r3, #16]
  202dac:	6922      	ldr	r2, [r4, #16]
  202dae:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  202db0:	200f      	movs	r0, #15
}
  202db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  202db6:	f7fe bf23 	b.w	201c00 <chSchGoSleepS>
  202dba:	bf00      	nop
  202dbc:	20000be4 	.word	0x20000be4

00202dc0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  202dc0:	4a0e      	ldr	r2, [pc, #56]	; (202dfc <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  202dc2:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  202dc4:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  202dc6:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  202dc8:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  202dca:	2500      	movs	r5, #0
  thread_t *otp = currp;
  202dcc:	6994      	ldr	r4, [r2, #24]
  202dce:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  202dd0:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  202dd2:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  202dd6:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  202dda:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  202ddc:	6190      	str	r0, [r2, #24]
  202dde:	e000      	b.n	202de2 <chSchDoReschedule+0x22>
  202de0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  202de2:	689a      	ldr	r2, [r3, #8]
  202de4:	4291      	cmp	r1, r2
  202de6:	d3fb      	bcc.n	202de0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  202de8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  202dea:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  202dec:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  202dee:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  202df0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  202df2:	605c      	str	r4, [r3, #4]
}
  202df4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  202df6:	f7fd ba73 	b.w	2002e0 <_port_switch>
  202dfa:	bf00      	nop
  202dfc:	20000be4 	.word	0x20000be4

00202e00 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
  202e00:	4a86      	ldr	r2, [pc, #536]	; (20301c <__early_init+0x21c>)
  gpiop->OTYPER  = config->otyper;
  202e02:	2300      	movs	r3, #0
  202e04:	4886      	ldr	r0, [pc, #536]	; (203020 <__early_init+0x220>)
  gpiop->MODER   = config->moder;
  202e06:	f640 2c08 	movw	ip, #2568	; 0xa08
  rccResetAHB1(STM32_GPIO_EN_MASK);
  202e0a:	6911      	ldr	r1, [r2, #16]
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
  202e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
  202e10:	f240 75ff 	movw	r5, #2047	; 0x7ff
  202e14:	4c83      	ldr	r4, [pc, #524]	; (203024 <__early_init+0x224>)
  gpiop->OSPEEDR = config->ospeedr;
  202e16:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  gpiop->PUPDR   = config->pupdr;
  202e1a:	4f83      	ldr	r7, [pc, #524]	; (203028 <__early_init+0x228>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
  202e1c:	4329      	orrs	r1, r5
  gpiop->AFRL    = config->afrl;
  202e1e:	f8df e254 	ldr.w	lr, [pc, #596]	; 203074 <__early_init+0x274>
  gpiop->ODR     = config->odr;
  202e22:	f64b 787e 	movw	r8, #49022	; 0xbf7e
  gpiop->AFRH    = config->afrh;
  202e26:	f44f 0930 	mov.w	r9, #11534336	; 0xb00000
  rccResetAHB1(STM32_GPIO_EN_MASK);
  202e2a:	6111      	str	r1, [r2, #16]
  202e2c:	6911      	ldr	r1, [r2, #16]
  202e2e:	400c      	ands	r4, r1
  gpiop->ODR     = config->odr;
  202e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
  rccResetAHB1(STM32_GPIO_EN_MASK);
  202e34:	6114      	str	r4, [r2, #16]
  202e36:	6914      	ldr	r4, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  202e38:	6b14      	ldr	r4, [r2, #48]	; 0x30
  202e3a:	432c      	orrs	r4, r5
  202e3c:	6314      	str	r4, [r2, #48]	; 0x30
  202e3e:	6d14      	ldr	r4, [r2, #80]	; 0x50
  202e40:	432c      	orrs	r4, r5
  gpiop->OSPEEDR = config->ospeedr;
  202e42:	f06f 4570 	mvn.w	r5, #4026531840	; 0xf0000000
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  202e46:	6514      	str	r4, [r2, #80]	; 0x50
  202e48:	6d14      	ldr	r4, [r2, #80]	; 0x50
  gpiop->AFRH    = config->afrh;
  202e4a:	4c78      	ldr	r4, [pc, #480]	; (20302c <__early_init+0x22c>)
  gpiop->OTYPER  = config->otyper;
  202e4c:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202e4e:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
  202e50:	60c7      	str	r7, [r0, #12]
  gpiop->OSPEEDR = config->ospeedr;
  202e52:	f46f 1740 	mvn.w	r7, #3145728	; 0x300000
  gpiop->ODR     = config->odr;
  202e56:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
  202e58:	f8c0 e020 	str.w	lr, [r0, #32]
  gpiop->AFRH    = config->afrh;
  202e5c:	f04f 0e77 	mov.w	lr, #119	; 0x77
  202e60:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202e62:	4c73      	ldr	r4, [pc, #460]	; (203030 <__early_init+0x230>)
  202e64:	6004      	str	r4, [r0, #0]
  gpiop->PUPDR   = config->pupdr;
  202e66:	f104 54d5 	add.w	r4, r4, #446693376	; 0x1aa00000
  gpiop->OTYPER  = config->otyper;
  202e6a:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  gpiop->PUPDR   = config->pupdr;
  202e6e:	f504 24d2 	add.w	r4, r4, #430080	; 0x69000
  gpiop->OSPEEDR = config->ospeedr;
  202e72:	f8c0 6408 	str.w	r6, [r0, #1032]	; 0x408
  gpiop->MODER   = config->moder;
  202e76:	4e6f      	ldr	r6, [pc, #444]	; (203034 <__early_init+0x234>)
  gpiop->PUPDR   = config->pupdr;
  202e78:	f204 542c 	addw	r4, r4, #1324	; 0x52c
  202e7c:	f8c0 440c 	str.w	r4, [r0, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  202e80:	f44f 2420 	mov.w	r4, #655360	; 0xa0000
  gpiop->ODR     = config->odr;
  202e84:	f8c0 8414 	str.w	r8, [r0, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  202e88:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
  gpiop->PUPDR   = config->pupdr;
  202e8c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 203078 <__early_init+0x278>
  gpiop->AFRH    = config->afrh;
  202e90:	f8c0 9424 	str.w	r9, [r0, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202e94:	f8c0 6400 	str.w	r6, [r0, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
  202e98:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  202e9c:	6043      	str	r3, [r0, #4]
  gpiop->PUPDR   = config->pupdr;
  202e9e:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
  gpiop->OSPEEDR = config->ospeedr;
  202ea2:	6085      	str	r5, [r0, #8]
  gpiop->MODER   = config->moder;
  202ea4:	f04f 6508 	mov.w	r5, #142606336	; 0x8800000
  gpiop->PUPDR   = config->pupdr;
  202ea8:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->AFRL    = config->afrl;
  202eac:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 20307c <__early_init+0x27c>
  gpiop->ODR     = config->odr;
  202eb0:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
  202eb2:	f8c0 8020 	str.w	r8, [r0, #32]
  gpiop->PUPDR   = config->pupdr;
  202eb6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 203080 <__early_init+0x280>
  gpiop->AFRH    = config->afrh;
  202eba:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202ebc:	f8c0 c000 	str.w	ip, [r0]
  gpiop->OSPEEDR = config->ospeedr;
  202ec0:	f04f 0c0f 	mov.w	ip, #15
  gpiop->OTYPER  = config->otyper;
  202ec4:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  202ec8:	f8c0 7408 	str.w	r7, [r0, #1032]	; 0x408
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  202ecc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  gpiop->PUPDR   = config->pupdr;
  202ed0:	f8c0 840c 	str.w	r8, [r0, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
  202ed4:	f8c0 1414 	str.w	r1, [r0, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  202ed8:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  202edc:	f8c0 e424 	str.w	lr, [r0, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  202ee0:	f8c0 4400 	str.w	r4, [r0, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  202ee4:	4c54      	ldr	r4, [pc, #336]	; (203038 <__early_init+0x238>)
  gpiop->OTYPER  = config->otyper;
  202ee6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  202eea:	f8c0 4808 	str.w	r4, [r0, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  202eee:	f8c0 680c 	str.w	r6, [r0, #2060]	; 0x80c
  gpiop->OTYPER  = config->otyper;
  202ef2:	4c52      	ldr	r4, [pc, #328]	; (20303c <__early_init+0x23c>)
  gpiop->ODR     = config->odr;
  202ef4:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  202ef8:	f8c0 3820 	str.w	r3, [r0, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  202efc:	f8c0 3824 	str.w	r3, [r0, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  202f00:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  202f04:	484e      	ldr	r0, [pc, #312]	; (203040 <__early_init+0x240>)
  gpiop->OTYPER  = config->otyper;
  202f06:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202f08:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  202f0a:	60e6      	str	r6, [r4, #12]
  gpiop->OTYPER  = config->otyper;
  202f0c:	484d      	ldr	r0, [pc, #308]	; (203044 <__early_init+0x244>)
  gpiop->ODR     = config->odr;
  202f0e:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  202f10:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  202f12:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202f14:	6023      	str	r3, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  202f16:	4c4c      	ldr	r4, [pc, #304]	; (203048 <__early_init+0x248>)
  gpiop->OTYPER  = config->otyper;
  202f18:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202f1a:	6084      	str	r4, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
  202f1c:	4c4b      	ldr	r4, [pc, #300]	; (20304c <__early_init+0x24c>)
  202f1e:	60c4      	str	r4, [r0, #12]
  gpiop->AFRH    = config->afrh;
  202f20:	4c4b      	ldr	r4, [pc, #300]	; (203050 <__early_init+0x250>)
  gpiop->ODR     = config->odr;
  202f22:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
  202f24:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
  202f26:	6244      	str	r4, [r0, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
  202f28:	4c4a      	ldr	r4, [pc, #296]	; (203054 <__early_init+0x254>)
  gpiop->MODER   = config->moder;
  202f2a:	6005      	str	r5, [r0, #0]
  gpiop->OTYPER  = config->otyper;
  202f2c:	4d4a      	ldr	r5, [pc, #296]	; (203058 <__early_init+0x258>)
  gpiop->PUPDR   = config->pupdr;
  202f2e:	484b      	ldr	r0, [pc, #300]	; (20305c <__early_init+0x25c>)
  gpiop->OTYPER  = config->otyper;
  202f30:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202f32:	f8c5 c008 	str.w	ip, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  202f36:	60e8      	str	r0, [r5, #12]

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  202f38:	4610      	mov	r0, r2
  gpiop->ODR     = config->odr;
  202f3a:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
  202f3c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  202f3e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202f40:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
  202f42:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  202f44:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  202f46:	60e6      	str	r6, [r4, #12]
  gpiop->ODR     = config->odr;
  202f48:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
  202f4a:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  202f4c:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202f4e:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
  202f50:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  202f54:	f8c5 3808 	str.w	r3, [r5, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  202f58:	f8c5 680c 	str.w	r6, [r5, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  202f5c:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  202f60:	f8c5 3820 	str.w	r3, [r5, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  202f64:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  202f68:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
  202f6c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  202f70:	4d3b      	ldr	r5, [pc, #236]	; (203060 <__early_init+0x260>)
  gpiop->OSPEEDR = config->ospeedr;
  202f72:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  202f76:	f8c4 680c 	str.w	r6, [r4, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
  202f7a:	f8c4 1814 	str.w	r1, [r4, #2068]	; 0x814
  PWR->CR1 = STM32_VOS;
  202f7e:	4939      	ldr	r1, [pc, #228]	; (203064 <__early_init+0x264>)
  gpiop->AFRL    = config->afrl;
  202f80:	f8c4 3820 	str.w	r3, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  202f84:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  202f88:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  202f8c:	6415      	str	r5, [r2, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  202f8e:	600f      	str	r7, [r1, #0]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  202f90:	6813      	ldr	r3, [r2, #0]
  202f92:	f043 0301 	orr.w	r3, r3, #1
  202f96:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  202f98:	6803      	ldr	r3, [r0, #0]
  202f9a:	0799      	lsls	r1, r3, #30
  202f9c:	d5fc      	bpl.n	202f98 <__early_init+0x198>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
  202f9e:	6883      	ldr	r3, [r0, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  202fa0:	4a1e      	ldr	r2, [pc, #120]	; (20301c <__early_init+0x21c>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
  202fa2:	f023 0303 	bic.w	r3, r3, #3
  202fa6:	6083      	str	r3, [r0, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  202fa8:	6893      	ldr	r3, [r2, #8]
  202faa:	f013 030c 	ands.w	r3, r3, #12
  202fae:	d1fb      	bne.n	202fa8 <__early_init+0x1a8>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  202fb0:	6810      	ldr	r0, [r2, #0]
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  202fb2:	4c2d      	ldr	r4, [pc, #180]	; (203068 <__early_init+0x268>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  202fb4:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  202fb8:	492a      	ldr	r1, [pc, #168]	; (203064 <__early_init+0x264>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  202fba:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  202fbc:	6093      	str	r3, [r2, #8]
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  202fbe:	6054      	str	r4, [r2, #4]
  RCC->CR |= RCC_CR_PLLON;
  202fc0:	6813      	ldr	r3, [r2, #0]
  202fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  202fc6:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  202fc8:	684b      	ldr	r3, [r1, #4]
  202fca:	045a      	lsls	r2, r3, #17
  202fcc:	d5fc      	bpl.n	202fc8 <__early_init+0x1c8>
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  202fce:	4913      	ldr	r1, [pc, #76]	; (20301c <__early_init+0x21c>)
  202fd0:	680b      	ldr	r3, [r1, #0]
  202fd2:	019b      	lsls	r3, r3, #6
  202fd4:	d5fc      	bpl.n	202fd0 <__early_init+0x1d0>
                  STM32_UART8SEL  | STM32_UART7SEL  | STM32_USART6SEL |
                  STM32_UART5SEL  | STM32_UART4SEL  | STM32_USART3SEL |
                  STM32_USART2SEL | STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  202fd6:	4b25      	ldr	r3, [pc, #148]	; (20306c <__early_init+0x26c>)
  202fd8:	f240 3203 	movw	r2, #771	; 0x303
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  202fdc:	4d24      	ldr	r5, [pc, #144]	; (203070 <__early_init+0x270>)
    RCC->DCKCFGR1 = dckcfgr1;
  202fde:	f240 1401 	movw	r4, #257	; 0x101
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  202fe2:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  202fe4:	608d      	str	r5, [r1, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  202fe6:	f8c1 408c 	str.w	r4, [r1, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  202fea:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  202fee:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  202ff0:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202ff2:	4a0a      	ldr	r2, [pc, #40]	; (20301c <__early_init+0x21c>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  202ff4:	f043 0302 	orr.w	r3, r3, #2
  202ff8:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  202ffa:	6893      	ldr	r3, [r2, #8]
  202ffc:	f003 030c 	and.w	r3, r3, #12
  203000:	2b08      	cmp	r3, #8
  203002:	d1fa      	bne.n	202ffa <__early_init+0x1fa>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
  203004:	6c53      	ldr	r3, [r2, #68]	; 0x44
  203006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  20300a:	6453      	str	r3, [r2, #68]	; 0x44
  20300c:	6e53      	ldr	r3, [r2, #100]	; 0x64
  20300e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  203012:	6653      	str	r3, [r2, #100]	; 0x64
  203014:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
  203016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  20301a:	bf00      	nop
  20301c:	40023800 	.word	0x40023800
  203020:	40020000 	.word	0x40020000
  203024:	fffff800 	.word	0xfffff800
  203028:	40005551 	.word	0x40005551
  20302c:	000aaa0a 	.word	0x000aaa0a
  203030:	2aae8028 	.word	0x2aae8028
  203034:	18004001 	.word	0x18004001
  203038:	cffffff3 	.word	0xcffffff3
  20303c:	40021400 	.word	0x40021400
  203040:	003fcfff 	.word	0x003fcfff
  203044:	40021800 	.word	0x40021800
  203048:	3cccf000 	.word	0x3cccf000
  20304c:	51155555 	.word	0x51155555
  203050:	00b0b000 	.word	0x00b0b000
  203054:	40022000 	.word	0x40022000
  203058:	40021c00 	.word	0x40021c00
  20305c:	55555550 	.word	0x55555550
  203060:	10000400 	.word	0x10000400
  203064:	40007000 	.word	0x40007000
  203068:	09001808 	.word	0x09001808
  20306c:	40023c00 	.word	0x40023c00
  203070:	30999000 	.word	0x30999000
  203074:	b0000bb0 	.word	0xb0000bb0
  203078:	01555051 	.word	0x01555051
  20307c:	00bb00b0 	.word	0x00bb00b0
  203080:	55505555 	.word	0x55505555
	...

00203090 <Vector188>:
OSAL_IRQ_HANDLER(STM32_UART7_HANDLER) {
  203090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USART_TypeDef *u = uartp->usart;
  203092:	4d37      	ldr	r5, [pc, #220]	; (203170 <Vector188+0xe0>)
  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
  203094:	f240 130f 	movw	r3, #271	; 0x10f
  USART_TypeDef *u = uartp->usart;
  203098:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  uint32_t cr1 = u->CR1;
  20309a:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
  20309c:	69f4      	ldr	r4, [r6, #28]
  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
  20309e:	421c      	tst	r4, r3
  u->ICR = isr;
  2030a0:	6234      	str	r4, [r6, #32]
  if (isr & (USART_ISR_LBDF | USART_ISR_ORE | USART_ISR_NE |
  2030a2:	d028      	beq.n	2030f6 <Vector188+0x66>
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
  2030a4:	686b      	ldr	r3, [r5, #4]
  2030a6:	691b      	ldr	r3, [r3, #16]
  2030a8:	b1b3      	cbz	r3, 2030d8 <Vector188+0x48>
    sts |= UART_OVERRUN_ERROR;
  2030aa:	f014 0f08 	tst.w	r4, #8
  2030ae:	bf0c      	ite	eq
  2030b0:	2100      	moveq	r1, #0
  2030b2:	2110      	movne	r1, #16
  if (isr & USART_ISR_PE)
  2030b4:	07e2      	lsls	r2, r4, #31
    sts |= UART_PARITY_ERROR;
  2030b6:	bf48      	it	mi
  2030b8:	f041 0104 	orrmi.w	r1, r1, #4
  if (isr & USART_ISR_FE)
  2030bc:	07a0      	lsls	r0, r4, #30
    sts |= UART_FRAMING_ERROR;
  2030be:	bf48      	it	mi
  2030c0:	f041 0108 	orrmi.w	r1, r1, #8
  if (isr & USART_ISR_NE)
  2030c4:	0762      	lsls	r2, r4, #29
    sts |= UART_NOISE_ERROR;
  2030c6:	bf48      	it	mi
  2030c8:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_LBDF)
  2030cc:	05e0      	lsls	r0, r4, #23
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
  2030ce:	4828      	ldr	r0, [pc, #160]	; (203170 <Vector188+0xe0>)
    sts |= UART_BREAK_DETECTED;
  2030d0:	bf48      	it	mi
  2030d2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
    _uart_rx_error_isr_code(uartp, translate_errors(isr));
  2030d6:	4798      	blx	r3
  2030d8:	2320      	movs	r3, #32
  2030da:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  2030de:	68e8      	ldr	r0, [r5, #12]
  2030e0:	b130      	cbz	r0, 2030f0 <Vector188+0x60>
    tp->u.rdymsg = msg;
  2030e2:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
  2030e6:	2300      	movs	r3, #0
    tp->u.rdymsg = msg;
  2030e8:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
  2030ea:	60eb      	str	r3, [r5, #12]
    (void) chSchReadyI(tp);
  2030ec:	f7fe f868 	bl	2011c0 <chSchReadyI>
  2030f0:	2300      	movs	r3, #0
  2030f2:	f383 8811 	msr	BASEPRI, r3
  if ((isr & USART_ISR_TC) && (cr1 & USART_CR1_TCIE)) {
  2030f6:	0662      	lsls	r2, r4, #25
  2030f8:	d50b      	bpl.n	203112 <Vector188+0x82>
  2030fa:	067b      	lsls	r3, r7, #25
  2030fc:	d509      	bpl.n	203112 <Vector188+0x82>
    _uart_tx2_isr_code(uartp);
  2030fe:	686a      	ldr	r2, [r5, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  203100:	f027 0340 	bic.w	r3, r7, #64	; 0x40
    _uart_tx2_isr_code(uartp);
  203104:	6852      	ldr	r2, [r2, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
  203106:	6033      	str	r3, [r6, #0]
    _uart_tx2_isr_code(uartp);
  203108:	b10a      	cbz	r2, 20310e <Vector188+0x7e>
  20310a:	4819      	ldr	r0, [pc, #100]	; (203170 <Vector188+0xe0>)
  20310c:	4790      	blx	r2
  20310e:	7a2b      	ldrb	r3, [r5, #8]
  203110:	b303      	cbz	r3, 203154 <Vector188+0xc4>
  if (((cr1 & USART_CR1_IDLEIE) && (isr & USART_ISR_IDLE)) ||
  203112:	06f8      	lsls	r0, r7, #27
  203114:	d501      	bpl.n	20311a <Vector188+0x8a>
  203116:	06e1      	lsls	r1, r4, #27
  203118:	d403      	bmi.n	203122 <Vector188+0x92>
  20311a:	017a      	lsls	r2, r7, #5
  20311c:	d516      	bpl.n	20314c <Vector188+0xbc>
      ((cr1 & USART_CR1_RTOIE) && (isr & USART_ISR_RTOF))) {
  20311e:	0523      	lsls	r3, r4, #20
  203120:	d514      	bpl.n	20314c <Vector188+0xbc>
    _uart_timeout_isr_code(uartp);
  203122:	686b      	ldr	r3, [r5, #4]
  203124:	695b      	ldr	r3, [r3, #20]
  203126:	b10b      	cbz	r3, 20312c <Vector188+0x9c>
  203128:	4811      	ldr	r0, [pc, #68]	; (203170 <Vector188+0xe0>)
  20312a:	4798      	blx	r3
  20312c:	2320      	movs	r3, #32
  20312e:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  203132:	68eb      	ldr	r3, [r5, #12]
  203134:	b13b      	cbz	r3, 203146 <Vector188+0xb6>
    tp->u.rdymsg = msg;
  203136:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    *trp = NULL;
  20313a:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  20313c:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  20313e:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  203140:	60ea      	str	r2, [r5, #12]
    (void) chSchReadyI(tp);
  203142:	f7fe f83d 	bl	2011c0 <chSchReadyI>
  203146:	2300      	movs	r3, #0
  203148:	f383 8811 	msr	BASEPRI, r3
}
  20314c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
  203150:	f7fd bf8e 	b.w	201070 <_port_irq_epilogue>
  203154:	2220      	movs	r2, #32
  203156:	f382 8811 	msr	BASEPRI, r2
  if (*trp != NULL) {
  20315a:	6928      	ldr	r0, [r5, #16]
  20315c:	b118      	cbz	r0, 203166 <Vector188+0xd6>
    tp->u.rdymsg = msg;
  20315e:	6243      	str	r3, [r0, #36]	; 0x24
    *trp = NULL;
  203160:	612b      	str	r3, [r5, #16]
    (void) chSchReadyI(tp);
  203162:	f7fe f82d 	bl	2011c0 <chSchReadyI>
  203166:	2300      	movs	r3, #0
  203168:	f383 8811 	msr	BASEPRI, r3
  20316c:	e7d1      	b.n	203112 <Vector188+0x82>
  20316e:	bf00      	nop
  203170:	20000ba8 	.word	0x20000ba8
	...

00203180 <Vector110>:
OSAL_IRQ_HANDLER(STM32_UART4_HANDLER) {
  203180:	b508      	push	{r3, lr}
  serve_interrupt(&SD4);
  203182:	4803      	ldr	r0, [pc, #12]	; (203190 <Vector110+0x10>)
  203184:	f7fe f884 	bl	201290 <serve_interrupt>
}
  203188:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20318c:	f7fd bf70 	b.w	201070 <_port_irq_epilogue>
  203190:	20000b18 	.word	0x20000b18
	...

002031a0 <VectorDC>:
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
  2031a0:	b508      	push	{r3, lr}
  serve_interrupt(&SD3);
  2031a2:	4803      	ldr	r0, [pc, #12]	; (2031b0 <VectorDC+0x10>)
  2031a4:	f7fe f874 	bl	201290 <serve_interrupt>
}
  2031a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2031ac:	f7fd bf60 	b.w	201070 <_port_irq_epilogue>
  2031b0:	20000ab8 	.word	0x20000ab8
	...

002031c0 <VectorA0>:
OSAL_IRQ_HANDLER(STM32_TIM9_HANDLER) {
  2031c0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD9);
  2031c2:	4803      	ldr	r0, [pc, #12]	; (2031d0 <VectorA0+0x10>)
  2031c4:	f7fe f92c 	bl	201420 <pwm_lld_serve_interrupt>
}
  2031c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2031cc:	f7fd bf50 	b.w	201070 <_port_irq_epilogue>
  2031d0:	20000a9c 	.word	0x20000a9c
	...

002031e0 <VectorF0>:
OSAL_IRQ_HANDLER(STM32_TIM8_UP_HANDLER) {
  2031e0:	b508      	push	{r3, lr}
  pwm_lld_serve_interrupt(&PWMD8);
  2031e2:	4803      	ldr	r0, [pc, #12]	; (2031f0 <VectorF0+0x10>)
  2031e4:	f7fe f91c 	bl	201420 <pwm_lld_serve_interrupt>
}
  2031e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2031ec:	f7fd bf40 	b.w	201070 <_port_irq_epilogue>
  2031f0:	20000a80 	.word	0x20000a80
	...

00203200 <VectorF8>:
  203200:	f7ff bfee 	b.w	2031e0 <VectorF0>
	...

00203210 <VectorB4>:
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
  203210:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD3);
  203212:	4803      	ldr	r0, [pc, #12]	; (203220 <VectorB4+0x10>)
  203214:	f7fe fa14 	bl	201640 <icu_lld_serve_interrupt>
}
  203218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20321c:	f7fd bf28 	b.w	201070 <_port_irq_epilogue>
  203220:	20000a68 	.word	0x20000a68
	...

00203230 <VectorA4>:
OSAL_IRQ_HANDLER(STM32_TIM1_UP_HANDLER) {
  203230:	b508      	push	{r3, lr}
  icu_lld_serve_interrupt(&ICUD1);
  203232:	4803      	ldr	r0, [pc, #12]	; (203240 <VectorA4+0x10>)
  203234:	f7fe fa04 	bl	201640 <icu_lld_serve_interrupt>
}
  203238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20323c:	f7fd bf18 	b.w	201070 <_port_irq_epilogue>
  203240:	20000a50 	.word	0x20000a50
	...

00203250 <VectorAC>:
  203250:	f7ff bfee 	b.w	203230 <VectorA4>
	...

00203260 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
  203260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  203264:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  203268:	6933      	ldr	r3, [r6, #16]
  20326a:	079b      	lsls	r3, r3, #30
  20326c:	d403      	bmi.n	203276 <VectorB0+0x16>
}
  20326e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  203272:	f7fd befd 	b.w	201070 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
  203276:	2300      	movs	r3, #0
  203278:	2220      	movs	r2, #32
  20327a:	6133      	str	r3, [r6, #16]
  20327c:	f382 8811 	msr	BASEPRI, r2
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
  203280:	4c1d      	ldr	r4, [pc, #116]	; (2032f8 <VectorB0+0x98>)
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
  203282:	4698      	mov	r8, r3
  vtp = ch.vtlist.next;
  203284:	46a1      	mov	r9, r4
  203286:	f859 3f1c 	ldr.w	r3, [r9, #28]!
  20328a:	689a      	ldr	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
  20328c:	6a70      	ldr	r0, [r6, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
  20328e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
  203290:	1a47      	subs	r7, r0, r1
    if (nowdelta < vtp->delta) {
  203292:	4297      	cmp	r7, r2
  203294:	d31b      	bcc.n	2032ce <VectorB0+0x6e>
  203296:	2520      	movs	r5, #32
  203298:	e00a      	b.n	2032b0 <VectorB0+0x50>
  20329a:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
  20329e:	6918      	ldr	r0, [r3, #16]
  2032a0:	4790      	blx	r2
  2032a2:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
  2032a6:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
  2032a8:	689a      	ldr	r2, [r3, #8]
  2032aa:	4297      	cmp	r7, r2
  2032ac:	d3ee      	bcc.n	20328c <VectorB0+0x2c>
  2032ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2032b0:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
  2032b2:	4411      	add	r1, r2
      nowdelta -= vtp->delta;
  2032b4:	1abf      	subs	r7, r7, r2
      fn = vtp->func;
  2032b6:	68da      	ldr	r2, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2032b8:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
  2032ba:	62a1      	str	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  2032bc:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
  2032c0:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
  2032c2:	f8c3 800c 	str.w	r8, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2032c6:	d1e8      	bne.n	20329a <VectorB0+0x3a>
  STM32_ST_TIM->DIER = 0;
  2032c8:	f8c6 800c 	str.w	r8, [r6, #12]
  2032cc:	e7e5      	b.n	20329a <VectorB0+0x3a>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  2032ce:	69e2      	ldr	r2, [r4, #28]
  2032d0:	454a      	cmp	r2, r9
  2032d2:	d009      	beq.n	2032e8 <VectorB0+0x88>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
  2032d4:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
  2032d6:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
  2032d8:	1bcf      	subs	r7, r1, r7
  2032da:	6097      	str	r7, [r2, #8]
  return systime + (systime_t)interval;
  2032dc:	689b      	ldr	r3, [r3, #8]
  2032de:	2b02      	cmp	r3, #2
  2032e0:	bf2c      	ite	cs
  2032e2:	18c0      	addcs	r0, r0, r3
  2032e4:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  2032e6:	6370      	str	r0, [r6, #52]	; 0x34
  2032e8:	2300      	movs	r3, #0
  2032ea:	f383 8811 	msr	BASEPRI, r3
}
  2032ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  2032f2:	f7fd bebd 	b.w	201070 <_port_irq_epilogue>
  2032f6:	bf00      	nop
  2032f8:	20000be4 	.word	0x20000be4
  2032fc:	00000000 	.word	0x00000000

00203300 <Vector158>:
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  203300:	4b08      	ldr	r3, [pc, #32]	; (203324 <Vector158+0x24>)
  if (dma_isr_redir[15].dma_func)
  203302:	4809      	ldr	r0, [pc, #36]	; (203328 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  203304:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  203306:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  203308:	0d89      	lsrs	r1, r1, #22
  20330a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  20330e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  203310:	058c      	lsls	r4, r1, #22
  203312:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  203314:	b10a      	cbz	r2, 20331a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  203316:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  203318:	4790      	blx	r2
}
  20331a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20331e:	f7fd bea7 	b.w	201070 <_port_irq_epilogue>
  203322:	bf00      	nop
  203324:	40026400 	.word	0x40026400
  203328:	20000d9c 	.word	0x20000d9c
  20332c:	00000000 	.word	0x00000000

00203330 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  203330:	4b08      	ldr	r3, [pc, #32]	; (203354 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  203332:	4809      	ldr	r0, [pc, #36]	; (203358 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  203334:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  203336:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  203338:	0c09      	lsrs	r1, r1, #16
  20333a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20333e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  203340:	040c      	lsls	r4, r1, #16
  203342:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  203344:	b10a      	cbz	r2, 20334a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  203346:	6f40      	ldr	r0, [r0, #116]	; 0x74
  203348:	4790      	blx	r2
}
  20334a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20334e:	f7fd be8f 	b.w	201070 <_port_irq_epilogue>
  203352:	bf00      	nop
  203354:	40026400 	.word	0x40026400
  203358:	20000d9c 	.word	0x20000d9c
  20335c:	00000000 	.word	0x00000000

00203360 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  203360:	4b08      	ldr	r3, [pc, #32]	; (203384 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  203362:	4809      	ldr	r0, [pc, #36]	; (203388 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  203364:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  203366:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  203368:	0989      	lsrs	r1, r1, #6
  20336a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  20336e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  203370:	018c      	lsls	r4, r1, #6
  203372:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  203374:	b10a      	cbz	r2, 20337a <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  203376:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  203378:	4790      	blx	r2
}
  20337a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20337e:	f7fd be77 	b.w	201070 <_port_irq_epilogue>
  203382:	bf00      	nop
  203384:	40026400 	.word	0x40026400
  203388:	20000d9c 	.word	0x20000d9c
  20338c:	00000000 	.word	0x00000000

00203390 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  203390:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203392:	4b07      	ldr	r3, [pc, #28]	; (2033b0 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  203394:	4807      	ldr	r0, [pc, #28]	; (2033b4 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203396:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  203398:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20339a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  20339e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  2033a0:	b10a      	cbz	r2, 2033a6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  2033a2:	6e40      	ldr	r0, [r0, #100]	; 0x64
  2033a4:	4790      	blx	r2
}
  2033a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2033aa:	f7fd be61 	b.w	201070 <_port_irq_epilogue>
  2033ae:	bf00      	nop
  2033b0:	40026400 	.word	0x40026400
  2033b4:	20000d9c 	.word	0x20000d9c
	...

002033c0 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2033c0:	4b08      	ldr	r3, [pc, #32]	; (2033e4 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  2033c2:	4809      	ldr	r0, [pc, #36]	; (2033e8 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2033c4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  2033c6:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2033c8:	0d89      	lsrs	r1, r1, #22
  2033ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  2033ce:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  2033d0:	058c      	lsls	r4, r1, #22
  2033d2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  2033d4:	b10a      	cbz	r2, 2033da <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  2033d6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  2033d8:	4790      	blx	r2
}
  2033da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2033de:	f7fd be47 	b.w	201070 <_port_irq_epilogue>
  2033e2:	bf00      	nop
  2033e4:	40026400 	.word	0x40026400
  2033e8:	20000d9c 	.word	0x20000d9c
  2033ec:	00000000 	.word	0x00000000

002033f0 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2033f0:	4b08      	ldr	r3, [pc, #32]	; (203414 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  2033f2:	4809      	ldr	r0, [pc, #36]	; (203418 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2033f4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  2033f6:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2033f8:	0c09      	lsrs	r1, r1, #16
  2033fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  2033fe:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  203400:	040c      	lsls	r4, r1, #16
  203402:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  203404:	b10a      	cbz	r2, 20340a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  203406:	6d40      	ldr	r0, [r0, #84]	; 0x54
  203408:	4790      	blx	r2
}
  20340a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20340e:	f7fd be2f 	b.w	201070 <_port_irq_epilogue>
  203412:	bf00      	nop
  203414:	40026400 	.word	0x40026400
  203418:	20000d9c 	.word	0x20000d9c
  20341c:	00000000 	.word	0x00000000

00203420 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203420:	4b08      	ldr	r3, [pc, #32]	; (203444 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  203422:	4809      	ldr	r0, [pc, #36]	; (203448 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203424:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  203426:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203428:	0989      	lsrs	r1, r1, #6
  20342a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20342e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  203430:	018c      	lsls	r4, r1, #6
  203432:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  203434:	b10a      	cbz	r2, 20343a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  203436:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  203438:	4790      	blx	r2
}
  20343a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20343e:	f7fd be17 	b.w	201070 <_port_irq_epilogue>
  203442:	bf00      	nop
  203444:	40026400 	.word	0x40026400
  203448:	20000d9c 	.word	0x20000d9c
  20344c:	00000000 	.word	0x00000000

00203450 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  203450:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  203452:	4b07      	ldr	r3, [pc, #28]	; (203470 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  203454:	4807      	ldr	r0, [pc, #28]	; (203474 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  203456:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  203458:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  20345a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  20345e:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  203460:	b10a      	cbz	r2, 203466 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  203462:	6c40      	ldr	r0, [r0, #68]	; 0x44
  203464:	4790      	blx	r2
}
  203466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20346a:	f7fd be01 	b.w	201070 <_port_irq_epilogue>
  20346e:	bf00      	nop
  203470:	40026400 	.word	0x40026400
  203474:	20000d9c 	.word	0x20000d9c
	...

00203480 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  203480:	4b08      	ldr	r3, [pc, #32]	; (2034a4 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  203482:	4809      	ldr	r0, [pc, #36]	; (2034a8 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  203484:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  203486:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  203488:	0d89      	lsrs	r1, r1, #22
  20348a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  20348e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  203490:	058c      	lsls	r4, r1, #22
  203492:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  203494:	b10a      	cbz	r2, 20349a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  203496:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  203498:	4790      	blx	r2
}
  20349a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20349e:	f7fd bde7 	b.w	201070 <_port_irq_epilogue>
  2034a2:	bf00      	nop
  2034a4:	40026000 	.word	0x40026000
  2034a8:	20000d9c 	.word	0x20000d9c
  2034ac:	00000000 	.word	0x00000000

002034b0 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2034b0:	4b08      	ldr	r3, [pc, #32]	; (2034d4 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  2034b2:	4809      	ldr	r0, [pc, #36]	; (2034d8 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2034b4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  2034b6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  2034b8:	0c09      	lsrs	r1, r1, #16
  2034ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  2034be:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  2034c0:	040c      	lsls	r4, r1, #16
  2034c2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  2034c4:	b10a      	cbz	r2, 2034ca <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  2034c6:	6b40      	ldr	r0, [r0, #52]	; 0x34
  2034c8:	4790      	blx	r2
}
  2034ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2034ce:	f7fd bdcf 	b.w	201070 <_port_irq_epilogue>
  2034d2:	bf00      	nop
  2034d4:	40026000 	.word	0x40026000
  2034d8:	20000d9c 	.word	0x20000d9c
  2034dc:	00000000 	.word	0x00000000

002034e0 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2034e0:	4b08      	ldr	r3, [pc, #32]	; (203504 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  2034e2:	4809      	ldr	r0, [pc, #36]	; (203508 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2034e4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  2034e6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2034e8:	0989      	lsrs	r1, r1, #6
  2034ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2034ee:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  2034f0:	018c      	lsls	r4, r1, #6
  2034f2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  2034f4:	b10a      	cbz	r2, 2034fa <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  2034f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  2034f8:	4790      	blx	r2
}
  2034fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2034fe:	f7fd bdb7 	b.w	201070 <_port_irq_epilogue>
  203502:	bf00      	nop
  203504:	40026000 	.word	0x40026000
  203508:	20000d9c 	.word	0x20000d9c
  20350c:	00000000 	.word	0x00000000

00203510 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  203510:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203512:	4b07      	ldr	r3, [pc, #28]	; (203530 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  203514:	4807      	ldr	r0, [pc, #28]	; (203534 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203516:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  203518:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20351a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20351e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  203520:	b10a      	cbz	r2, 203526 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  203522:	6a40      	ldr	r0, [r0, #36]	; 0x24
  203524:	4790      	blx	r2
}
  203526:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20352a:	f7fd bda1 	b.w	201070 <_port_irq_epilogue>
  20352e:	bf00      	nop
  203530:	40026000 	.word	0x40026000
  203534:	20000d9c 	.word	0x20000d9c
	...

00203540 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  203540:	4b08      	ldr	r3, [pc, #32]	; (203564 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  203542:	4809      	ldr	r0, [pc, #36]	; (203568 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  203544:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  203546:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  203548:	0d89      	lsrs	r1, r1, #22
  20354a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  20354e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  203550:	058c      	lsls	r4, r1, #22
  203552:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  203554:	b10a      	cbz	r2, 20355a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  203556:	69c0      	ldr	r0, [r0, #28]
  203558:	4790      	blx	r2
}
  20355a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20355e:	f7fd bd87 	b.w	201070 <_port_irq_epilogue>
  203562:	bf00      	nop
  203564:	40026000 	.word	0x40026000
  203568:	20000d9c 	.word	0x20000d9c
  20356c:	00000000 	.word	0x00000000

00203570 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  203570:	4b08      	ldr	r3, [pc, #32]	; (203594 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  203572:	4809      	ldr	r0, [pc, #36]	; (203598 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  203574:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  203576:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  203578:	0c09      	lsrs	r1, r1, #16
  20357a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  20357e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  203580:	040c      	lsls	r4, r1, #16
  203582:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  203584:	b10a      	cbz	r2, 20358a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  203586:	6940      	ldr	r0, [r0, #20]
  203588:	4790      	blx	r2
}
  20358a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20358e:	f7fd bd6f 	b.w	201070 <_port_irq_epilogue>
  203592:	bf00      	nop
  203594:	40026000 	.word	0x40026000
  203598:	20000d9c 	.word	0x20000d9c
  20359c:	00000000 	.word	0x00000000

002035a0 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2035a0:	4b08      	ldr	r3, [pc, #32]	; (2035c4 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  2035a2:	4809      	ldr	r0, [pc, #36]	; (2035c8 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2035a4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  2035a6:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  2035a8:	0989      	lsrs	r1, r1, #6
  2035aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  2035ae:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  2035b0:	018c      	lsls	r4, r1, #6
  2035b2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  2035b4:	b10a      	cbz	r2, 2035ba <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  2035b6:	68c0      	ldr	r0, [r0, #12]
  2035b8:	4790      	blx	r2
}
  2035ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2035be:	f7fd bd57 	b.w	201070 <_port_irq_epilogue>
  2035c2:	bf00      	nop
  2035c4:	40026000 	.word	0x40026000
  2035c8:	20000d9c 	.word	0x20000d9c
  2035cc:	00000000 	.word	0x00000000

002035d0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  2035d0:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2035d2:	4b07      	ldr	r3, [pc, #28]	; (2035f0 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  2035d4:	4a07      	ldr	r2, [pc, #28]	; (2035f4 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2035d6:	6819      	ldr	r1, [r3, #0]
  2035d8:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  2035dc:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  2035de:	6813      	ldr	r3, [r2, #0]
  2035e0:	b10b      	cbz	r3, 2035e6 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  2035e2:	6850      	ldr	r0, [r2, #4]
  2035e4:	4798      	blx	r3
}
  2035e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2035ea:	f7fd bd41 	b.w	201070 <_port_irq_epilogue>
  2035ee:	bf00      	nop
  2035f0:	40026000 	.word	0x40026000
  2035f4:	20000d9c 	.word	0x20000d9c
	...

00203600 <Vector1EC>:
OSAL_IRQ_HANDLER(STM32_CAN3_SCE_HANDLER) {
  203600:	b508      	push	{r3, lr}
  can_lld_sce_handler(&CAND3);
  203602:	4803      	ldr	r0, [pc, #12]	; (203610 <Vector1EC+0x10>)
  203604:	f7fe fa24 	bl	201a50 <can_lld_sce_handler>
}
  203608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20360c:	f7fd bd30 	b.w	201070 <_port_irq_epilogue>
  203610:	20000858 	.word	0x20000858
	...

00203620 <Vector1E8>:
OSAL_IRQ_HANDLER(STM32_CAN3_RX1_HANDLER) {
  203620:	b508      	push	{r3, lr}
  can_lld_rx1_handler(&CAND3);
  203622:	4803      	ldr	r0, [pc, #12]	; (203630 <Vector1E8+0x10>)
  203624:	f7fe fa34 	bl	201a90 <can_lld_rx1_handler>
}
  203628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20362c:	f7fd bd20 	b.w	201070 <_port_irq_epilogue>
  203630:	20000858 	.word	0x20000858
	...

00203640 <Vector1E4>:
OSAL_IRQ_HANDLER(STM32_CAN3_RX0_HANDLER) {
  203640:	b508      	push	{r3, lr}
  can_lld_rx0_handler(&CAND3);
  203642:	4803      	ldr	r0, [pc, #12]	; (203650 <Vector1E4+0x10>)
  203644:	f7fe fa4c 	bl	201ae0 <can_lld_rx0_handler>
}
  203648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20364c:	f7fd bd10 	b.w	201070 <_port_irq_epilogue>
  203650:	20000858 	.word	0x20000858
	...

00203660 <Vector1E0>:
OSAL_IRQ_HANDLER(STM32_CAN3_TX_HANDLER) {
  203660:	b508      	push	{r3, lr}
  can_lld_tx_handler(&CAND3);
  203662:	4803      	ldr	r0, [pc, #12]	; (203670 <Vector1E0+0x10>)
  203664:	f7fe fa64 	bl	201b30 <can_lld_tx_handler>
}
  203668:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20366c:	f7fd bd00 	b.w	201070 <_port_irq_epilogue>
  203670:	20000858 	.word	0x20000858
	...

00203680 <Vector148>:
OSAL_IRQ_HANDLER(STM32_CAN2_SCE_HANDLER) {
  203680:	b508      	push	{r3, lr}
  can_lld_sce_handler(&CAND2);
  203682:	4803      	ldr	r0, [pc, #12]	; (203690 <Vector148+0x10>)
  203684:	f7fe f9e4 	bl	201a50 <can_lld_sce_handler>
}
  203688:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20368c:	f7fd bcf0 	b.w	201070 <_port_irq_epilogue>
  203690:	2000082c 	.word	0x2000082c
	...

002036a0 <Vector144>:
OSAL_IRQ_HANDLER(STM32_CAN2_RX1_HANDLER) {
  2036a0:	b508      	push	{r3, lr}
  can_lld_rx1_handler(&CAND2);
  2036a2:	4803      	ldr	r0, [pc, #12]	; (2036b0 <Vector144+0x10>)
  2036a4:	f7fe f9f4 	bl	201a90 <can_lld_rx1_handler>
}
  2036a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2036ac:	f7fd bce0 	b.w	201070 <_port_irq_epilogue>
  2036b0:	2000082c 	.word	0x2000082c
	...

002036c0 <Vector140>:
OSAL_IRQ_HANDLER(STM32_CAN2_RX0_HANDLER) {
  2036c0:	b508      	push	{r3, lr}
  can_lld_rx0_handler(&CAND2);
  2036c2:	4803      	ldr	r0, [pc, #12]	; (2036d0 <Vector140+0x10>)
  2036c4:	f7fe fa0c 	bl	201ae0 <can_lld_rx0_handler>
}
  2036c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2036cc:	f7fd bcd0 	b.w	201070 <_port_irq_epilogue>
  2036d0:	2000082c 	.word	0x2000082c
	...

002036e0 <Vector13C>:
OSAL_IRQ_HANDLER(STM32_CAN2_TX_HANDLER) {
  2036e0:	b508      	push	{r3, lr}
  can_lld_tx_handler(&CAND2);
  2036e2:	4803      	ldr	r0, [pc, #12]	; (2036f0 <Vector13C+0x10>)
  2036e4:	f7fe fa24 	bl	201b30 <can_lld_tx_handler>
}
  2036e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2036ec:	f7fd bcc0 	b.w	201070 <_port_irq_epilogue>
  2036f0:	2000082c 	.word	0x2000082c
	...

00203700 <Vector98>:
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
  203700:	b508      	push	{r3, lr}
  can_lld_sce_handler(&CAND1);
  203702:	4803      	ldr	r0, [pc, #12]	; (203710 <Vector98+0x10>)
  203704:	f7fe f9a4 	bl	201a50 <can_lld_sce_handler>
}
  203708:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20370c:	f7fd bcb0 	b.w	201070 <_port_irq_epilogue>
  203710:	20000800 	.word	0x20000800
	...

00203720 <Vector94>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
  203720:	b508      	push	{r3, lr}
  can_lld_rx1_handler(&CAND1);
  203722:	4803      	ldr	r0, [pc, #12]	; (203730 <Vector94+0x10>)
  203724:	f7fe f9b4 	bl	201a90 <can_lld_rx1_handler>
}
  203728:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20372c:	f7fd bca0 	b.w	201070 <_port_irq_epilogue>
  203730:	20000800 	.word	0x20000800
	...

00203740 <Vector90>:
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
  203740:	b508      	push	{r3, lr}
  can_lld_rx0_handler(&CAND1);
  203742:	4803      	ldr	r0, [pc, #12]	; (203750 <Vector90+0x10>)
  203744:	f7fe f9cc 	bl	201ae0 <can_lld_rx0_handler>
}
  203748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20374c:	f7fd bc90 	b.w	201070 <_port_irq_epilogue>
  203750:	20000800 	.word	0x20000800
	...

00203760 <Vector8C>:
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
  203760:	b508      	push	{r3, lr}
  can_lld_tx_handler(&CAND1);
  203762:	4803      	ldr	r0, [pc, #12]	; (203770 <Vector8C+0x10>)
  203764:	f7fe f9e4 	bl	201b30 <can_lld_tx_handler>
}
  203768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20376c:	f7fd bc80 	b.w	201070 <_port_irq_epilogue>
  203770:	20000800 	.word	0x20000800
	...

00203780 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  203780:	b4f0      	push	{r4, r5, r6, r7}
  203782:	4e14      	ldr	r6, [pc, #80]	; (2037d4 <__init_ram_areas+0x54>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  203784:	2700      	movs	r7, #0
void __init_ram_areas(void) {
  203786:	4d14      	ldr	r5, [pc, #80]	; (2037d8 <__init_ram_areas+0x58>)
  203788:	f106 0c70 	add.w	ip, r6, #112	; 0x70
  20378c:	4c13      	ldr	r4, [pc, #76]	; (2037dc <__init_ram_areas+0x5c>)
  20378e:	4b14      	ldr	r3, [pc, #80]	; (2037e0 <__init_ram_areas+0x60>)
  203790:	4914      	ldr	r1, [pc, #80]	; (2037e4 <__init_ram_areas+0x64>)
    while (p < rap->clear_area) {
  203792:	429c      	cmp	r4, r3
  203794:	d911      	bls.n	2037ba <__init_ram_areas+0x3a>
  203796:	3904      	subs	r1, #4
  203798:	461a      	mov	r2, r3
      *p = *tp;
  20379a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20379e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  2037a2:	4294      	cmp	r4, r2
  2037a4:	d8f9      	bhi.n	20379a <__init_ram_areas+0x1a>
  2037a6:	43da      	mvns	r2, r3
  2037a8:	4414      	add	r4, r2
  2037aa:	f024 0403 	bic.w	r4, r4, #3
  2037ae:	3404      	adds	r4, #4
  2037b0:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  2037b2:	429d      	cmp	r5, r3
  2037b4:	d903      	bls.n	2037be <__init_ram_areas+0x3e>
      *p = 0;
  2037b6:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
  2037ba:	429d      	cmp	r5, r3
  2037bc:	d8fb      	bhi.n	2037b6 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  2037be:	4566      	cmp	r6, ip
  2037c0:	d005      	beq.n	2037ce <__init_ram_areas+0x4e>
  2037c2:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
  2037c6:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
  2037ca:	3610      	adds	r6, #16
  2037cc:	e7e1      	b.n	203792 <__init_ram_areas+0x12>
#endif
}
  2037ce:	bcf0      	pop	{r4, r5, r6, r7}
  2037d0:	4770      	bx	lr
  2037d2:	bf00      	nop
  2037d4:	080039c0 	.word	0x080039c0
  2037d8:	2002007c 	.word	0x2002007c
  2037dc:	2002007c 	.word	0x2002007c
  2037e0:	2002007c 	.word	0x2002007c
  2037e4:	08003ae4 	.word	0x08003ae4
	...

002037f0 <__default_exit>:
void __default_exit(void) {
  2037f0:	e7fe      	b.n	2037f0 <__default_exit>
  2037f2:	bf00      	nop
	...

00203800 <__late_init>:
void __late_init(void) {}
  203800:	4770      	bx	lr
  203802:	bf00      	nop
	...

00203810 <__core_init>:
void __core_init(void) {
  203810:	b4f0      	push	{r4, r5, r6, r7}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  203812:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  203816:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20381a:	481d      	ldr	r0, [pc, #116]	; (203890 <__core_init+0x80>)
  20381c:	2200      	movs	r2, #0
  20381e:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  203822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  203826:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  20382a:	6943      	ldr	r3, [r0, #20]
  20382c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  203830:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  203832:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  203836:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  20383a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  20383e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  203842:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  203846:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  20384a:	f3c5 06c9 	ubfx	r6, r5, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  20384e:	f3c5 354e 	ubfx	r5, r5, #13, #15
  203852:	07b7      	lsls	r7, r6, #30
  203854:	016d      	lsls	r5, r5, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  203856:	ea05 040c 	and.w	r4, r5, ip
  20385a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  20385c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20385e:	ea44 0301 	orr.w	r3, r4, r1
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  203862:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  203864:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  203868:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
  20386c:	1c53      	adds	r3, r2, #1
  20386e:	d1f6      	bne.n	20385e <__core_init+0x4e>
  203870:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  203872:	f115 0f20 	cmn.w	r5, #32
  203876:	d1ee      	bne.n	203856 <__core_init+0x46>
  203878:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  20387c:	6943      	ldr	r3, [r0, #20]
  20387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  203882:	6143      	str	r3, [r0, #20]
  203884:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  203888:	f3bf 8f6f 	isb	sy
}
  20388c:	bcf0      	pop	{r4, r5, r6, r7}
  20388e:	4770      	bx	lr
  203890:	e000ed00 	.word	0xe000ed00
